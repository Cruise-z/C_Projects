
KeyBoard_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08004e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  20000144  08004f44  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20000abc  08004f44  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228a1  00000000  00000000  000201b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000501c  00000000  00000000  00042a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00047a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001469  00000000  00000000  00048e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024746  00000000  00000000  0004a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024960  00000000  00000000  0006ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c59  00000000  00000000  00093367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003938  00000000  00000000  00163fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000d264  00000000  00000000  001678f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00174b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000144 	.word	0x20000144
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004c64 	.word	0x08004c64

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000148 	.word	0x20000148
 80001c8:	08004c64 	.word	0x08004c64

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b500      	push	{lr}
 80004da:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2214      	movs	r2, #20
 80004de:	2100      	movs	r1, #0
 80004e0:	a803      	add	r0, sp, #12
 80004e2:	f004 fb7c 	bl	8004bde <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80004e8:	481a      	ldr	r0, [pc, #104]	; (8000554 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ec:	f042 0204 	orr.w	r2, r2, #4
 80004f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80004f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f4:	f002 0204 	and.w	r2, r2, #4
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	f042 0201 	orr.w	r2, r2, #1
 8000502:	64da      	str	r2, [r3, #76]	; 0x4c
 8000504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000506:	f002 0201 	and.w	r2, r2, #1
 800050a:	9201      	str	r2, [sp, #4]
 800050c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000510:	f042 0202 	orr.w	r2, r2, #2
 8000514:	64da      	str	r2, [r3, #76]	; 0x4c
 8000516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000524:	f000 fc7c 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <MX_GPIO_Init+0x7c>)
 800052a:	2201      	movs	r2, #1
 800052c:	2108      	movs	r1, #8
 800052e:	f000 fc77 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2209      	movs	r2, #9
 8000534:	2301      	movs	r3, #1
 8000536:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <MX_GPIO_Init+0x7c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000544:	f000 fbb4 	bl	8000cb0 <HAL_GPIO_Init>

}
 8000548:	b009      	add	sp, #36	; 0x24
 800054a:	f85d fb04 	ldr.w	pc, [sp], #4
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055c:	2244      	movs	r2, #68	; 0x44
 800055e:	2100      	movs	r1, #0
 8000560:	a805      	add	r0, sp, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000564:	f004 fb3b 	bl	8004bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	462a      	mov	r2, r5
 800056a:	2100      	movs	r1, #0
 800056c:	4668      	mov	r0, sp
 800056e:	f004 fb36 	bl	8004bde <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000576:	f001 fb43 	bl	8001c00 <HAL_PWREx_ControlVoltageScaling>
 800057a:	4604      	mov	r4, r0
 800057c:	b108      	cbz	r0, 8000582 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <SystemClock_Config+0x28>
  HAL_PWR_EnableBkUpAccess();
 8000582:	f001 fb2d 	bl	8001be0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <SystemClock_Config+0x90>)
 8000588:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800058c:	f023 0318 	bic.w	r3, r3, #24
 8000590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000594:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000596:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800059c:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a2:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a6:	2118      	movs	r1, #24
 80005a8:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ac:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b4:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b6:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f001 fbf0 	bl	8001d9c <HAL_RCC_OscConfig>
 80005bc:	b108      	cbz	r0, 80005c2 <SystemClock_Config+0x6a>
 80005be:	b672      	cpsid	i
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	220f      	movs	r2, #15
 80005c8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	4621      	mov	r1, r4
 80005ce:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f001 fe86 	bl	80022e4 <HAL_RCC_ClockConfig>
 80005d8:	b108      	cbz	r0, 80005de <SystemClock_Config+0x86>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <SystemClock_Config+0x84>
  HAL_RCCEx_EnableMSIPLLMode();
 80005de:	f002 f91b 	bl	8002818 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e2:	b017      	add	sp, #92	; 0x5c
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <Get_Descriptor>:
void Get_Descriptor(uint8_t ascii){
 80005ec:	b530      	push	{r4, r5, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005ee:	4d10      	ldr	r5, [pc, #64]	; (8000630 <Get_Descriptor+0x44>)
void Get_Descriptor(uint8_t ascii){
 80005f0:	b0a3      	sub	sp, #140	; 0x8c
 80005f2:	4604      	mov	r4, r0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005f4:	220f      	movs	r2, #15
 80005f6:	2100      	movs	r1, #0
 80005f8:	4628      	mov	r0, r5
 80005fa:	f004 faf0 	bl	8004bde <memset>
	uint8_t Map[MapLen] = Map_Init;
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <Get_Descriptor+0x48>)
 8000600:	2282      	movs	r2, #130	; 0x82
 8000602:	a801      	add	r0, sp, #4
 8000604:	f004 fb20 	bl	8004c48 <memcpy>
	uint8_t pos = Map[ascii];
 8000608:	f104 0388 	add.w	r3, r4, #136	; 0x88
 800060c:	eb0d 0403 	add.w	r4, sp, r3
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000610:	2201      	movs	r2, #1
	uint8_t pos = Map[ascii];
 8000612:	f814 3c84 	ldrb.w	r3, [r4, #-132]
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000616:	0919      	lsrs	r1, r3, #4
 8000618:	f003 0007 	and.w	r0, r3, #7
 800061c:	4082      	lsls	r2, r0
 800061e:	546a      	strb	r2, [r5, r1]
	if((pos&0x08) == 8)
 8000620:	071b      	lsls	r3, r3, #28
		sent_buffer[0] |= 0x02;
 8000622:	bf42      	ittt	mi
 8000624:	782b      	ldrbmi	r3, [r5, #0]
 8000626:	f043 0302 	orrmi.w	r3, r3, #2
 800062a:	702b      	strbmi	r3, [r5, #0]
}
 800062c:	b023      	add	sp, #140	; 0x8c
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	20000171 	.word	0x20000171
 8000634:	08004c7c 	.word	0x08004c7c

08000638 <SimulateKeyPress>:
void SimulateKeyPress(uint8_t ascii){
 8000638:	b508      	push	{r3, lr}
    Get_Descriptor(ascii);
 800063a:	f7ff ffd7 	bl	80005ec <Get_Descriptor>
}
 800063e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000642:	4902      	ldr	r1, [pc, #8]	; (800064c <SimulateKeyPress+0x14>)
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <SimulateKeyPress+0x18>)
 8000646:	220f      	movs	r2, #15
 8000648:	f003 bc47 	b.w	8003eda <USBD_CUSTOM_HID_SendReport>
 800064c:	20000171 	.word	0x20000171
 8000650:	200002c0 	.word	0x200002c0

08000654 <SimulateKeyRelease>:
void SimulateKeyRelease(){
 8000654:	b508      	push	{r3, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <SimulateKeyRelease+0x1c>)
 8000658:	220f      	movs	r2, #15
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fabe 	bl	8004bde <memset>
}
 8000662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000666:	4601      	mov	r1, r0
 8000668:	220f      	movs	r2, #15
 800066a:	4802      	ldr	r0, [pc, #8]	; (8000674 <SimulateKeyRelease+0x20>)
 800066c:	f003 bc35 	b.w	8003eda <USBD_CUSTOM_HID_SendReport>
 8000670:	20000171 	.word	0x20000171
 8000674:	200002c0 	.word	0x200002c0

08000678 <SimulateKeyStroke>:
void SimulateKeyStroke(uint8_t ascii){
 8000678:	b508      	push	{r3, lr}
	SimulateKeyPress(ascii);
 800067a:	f7ff ffdd 	bl	8000638 <SimulateKeyPress>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800067e:	2023      	movs	r0, #35	; 0x23
 8000680:	f000 fa9c 	bl	8000bbc <HAL_Delay>
    SimulateKeyRelease();
 8000684:	f7ff ffe6 	bl	8000654 <SimulateKeyRelease>
}
 8000688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800068c:	2023      	movs	r0, #35	; 0x23
 800068e:	f000 ba95 	b.w	8000bbc <HAL_Delay>
	...

08000694 <SimulateKeyStrokes>:
void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    	if((recv_buffer[0]&0x02) != 0x02){
 8000698:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80006e8 <SimulateKeyStrokes+0x54>
    	if(NeedRollBack == 1){
 800069c:	4f11      	ldr	r7, [pc, #68]	; (80006e4 <SimulateKeyStrokes+0x50>)
void SimulateKeyStrokes(char *str, int len, int *cntNow){
 800069e:	4606      	mov	r6, r0
 80006a0:	460d      	mov	r5, r1
 80006a2:	4614      	mov	r4, r2
    for(; *cntNow < len; (*cntNow)++){
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	db01      	blt.n	80006ae <SimulateKeyStrokes+0x1a>
}
 80006aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	if((recv_buffer[0]&0x02) != 0x02){
 80006ae:	f898 3000 	ldrb.w	r3, [r8]
 80006b2:	079b      	lsls	r3, r3, #30
 80006b4:	d402      	bmi.n	80006bc <SimulateKeyStrokes+0x28>
    		SimulateKeyStroke(128);
 80006b6:	2080      	movs	r0, #128	; 0x80
 80006b8:	f7ff ffde 	bl	8000678 <SimulateKeyStroke>
    	SimulateKeyStroke(str[*cntNow]);
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	5cf0      	ldrb	r0, [r6, r3]
 80006c0:	f7ff ffda 	bl	8000678 <SimulateKeyStroke>
    	if(NeedRollBack == 1){
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d107      	bne.n	80006da <SimulateKeyStrokes+0x46>
    		NeedRollBack = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
    		(*cntNow)--;
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	6023      	str	r3, [r4, #0]
    		SimulateKeyStroke(129);
 80006d4:	2081      	movs	r0, #129	; 0x81
 80006d6:	f7ff ffcf 	bl	8000678 <SimulateKeyStroke>
    for(; *cntNow < len; (*cntNow)++){
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	6023      	str	r3, [r4, #0]
 80006e0:	e7e0      	b.n	80006a4 <SimulateKeyStrokes+0x10>
 80006e2:	bf00      	nop
 80006e4:	20000168 	.word	0x20000168
 80006e8:	20000170 	.word	0x20000170

080006ec <Convert2CapsMap>:
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80006ec:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80006f0:	305a      	adds	r0, #90	; 0x5a
		LowerCaseMap[cnt] &= 0xf7;
 80006f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80006f6:	f022 0208 	bic.w	r2, r2, #8
 80006fa:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 80006fc:	f893 2020 	ldrb.w	r2, [r3, #32]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000700:	4283      	cmp	r3, r0
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000702:	f042 0208 	orr.w	r2, r2, #8
 8000706:	f883 2020 	strb.w	r2, [r3, #32]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 800070a:	d1f2      	bne.n	80006f2 <Convert2CapsMap+0x6>
}
 800070c:	4770      	bx	lr
	...

08000710 <InterruptTrap>:
void InterruptTrap(int *InterruptFlag){
 8000710:	b508      	push	{r3, lr}
	if(*InterruptFlag == 1){
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10e      	bne.n	8000736 <InterruptTrap+0x26>
		TIM2->EGR |= TIM_EGR_UG;
 8000718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
		*InterruptFlag = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	6003      	str	r3, [r0, #0]
		TIM2->EGR |= TIM_EGR_UG;
 8000720:	6953      	ldr	r3, [r2, #20]
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6153      	str	r3, [r2, #20]
		MX_TIM2_Init();
 8000728:	f000 f914 	bl	8000954 <MX_TIM2_Init>
}
 800072c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Start_IT(&htim2);
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <InterruptTrap+0x28>)
 8000732:	f002 b8e3 	b.w	80028fc <HAL_TIM_Base_Start_IT>
}
 8000736:	bd08      	pop	{r3, pc}
 8000738:	200001e4 	.word	0x200001e4

0800073c <main>:
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	b0e3      	sub	sp, #396	; 0x18c
  HAL_Init();
 8000740:	f000 fa1a 	bl	8000b78 <HAL_Init>
  SystemClock_Config();
 8000744:	f7ff ff08 	bl	8000558 <SystemClock_Config>
  MX_GPIO_Init();
 8000748:	f7ff fec6 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074c:	f000 f958 	bl	8000a00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000750:	f000 f900 	bl	8000954 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000754:	f004 f816 	bl	8004784 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000758:	f000 f86a 	bl	8000830 <MX_SPI1_Init>
  uint8_t Map[MapLen] = Map_Init;
 800075c:	4913      	ldr	r1, [pc, #76]	; (80007ac <main+0x70>)
	  InterruptTrap(&InterruptFlag);
 800075e:	4f14      	ldr	r7, [pc, #80]	; (80007b0 <main+0x74>)
		  strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000760:	4e14      	ldr	r6, [pc, #80]	; (80007b4 <main+0x78>)
		  SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000762:	4d15      	ldr	r5, [pc, #84]	; (80007b8 <main+0x7c>)
  uint8_t Map[MapLen] = Map_Init;
 8000764:	2282      	movs	r2, #130	; 0x82
 8000766:	a801      	add	r0, sp, #4
 8000768:	f004 fa6e 	bl	8004c48 <memcpy>
  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800076c:	220f      	movs	r2, #15
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <main+0x80>)
 8000770:	2100      	movs	r1, #0
 8000772:	f004 fa34 	bl	8004bde <memset>
  Convert2CapsMap(Map);
 8000776:	a801      	add	r0, sp, #4
 8000778:	f7ff ffb8 	bl	80006ec <Convert2CapsMap>
  int flag = 1;
 800077c:	2401      	movs	r4, #1
	  InterruptTrap(&InterruptFlag);
 800077e:	4638      	mov	r0, r7
 8000780:	f7ff ffc6 	bl	8000710 <InterruptTrap>
	  if(flag == 1){
 8000784:	2c00      	cmp	r4, #0
 8000786:	d0fa      	beq.n	800077e <main+0x42>
		  HAL_Delay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f000 fa16 	bl	8000bbc <HAL_Delay>
		  strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000790:	4631      	mov	r1, r6
 8000792:	a822      	add	r0, sp, #136	; 0x88
 8000794:	f004 fa50 	bl	8004c38 <strcpy>
		  SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000798:	a822      	add	r0, sp, #136	; 0x88
 800079a:	f7ff fd17 	bl	80001cc <strlen>
 800079e:	462a      	mov	r2, r5
 80007a0:	4601      	mov	r1, r0
 80007a2:	a822      	add	r0, sp, #136	; 0x88
 80007a4:	f7ff ff76 	bl	8000694 <SimulateKeyStrokes>
		  flag = 0;
 80007a8:	2400      	movs	r4, #0
 80007aa:	e7e8      	b.n	800077e <main+0x42>
 80007ac:	08004c7c 	.word	0x08004c7c
 80007b0:	20000164 	.word	0x20000164
 80007b4:	08004cfe 	.word	0x08004cfe
 80007b8:	2000016c 	.word	0x2000016c
 80007bc:	20000171 	.word	0x20000171

080007c0 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007c2:	4283      	cmp	r3, r0
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007c4:	b510      	push	{r4, lr}
	if(htim == &htim2){
 80007c6:	d113      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x30>
		if(InterruptCnt == 0){
 80007c8:	4c14      	ldr	r4, [pc, #80]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	b98b      	cbnz	r3, 80007f2 <HAL_TIM_PeriodElapsedCallback+0x32>
			Get_Descriptor(128);
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	f7ff ff0c 	bl	80005ec <Get_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007d4:	4912      	ldr	r1, [pc, #72]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80007d6:	4813      	ldr	r0, [pc, #76]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80007d8:	220f      	movs	r2, #15
 80007da:	f003 fb7e 	bl	8003eda <USBD_CUSTOM_HID_SendReport>
		InterruptCnt = (InterruptCnt+1)%3;
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	2203      	movs	r2, #3
 80007e2:	3301      	adds	r3, #1
 80007e4:	fb93 f2f2 	sdiv	r2, r3, r2
 80007e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	6023      	str	r3, [r4, #0]
}
 80007f0:	bd10      	pop	{r4, pc}
		}else if(InterruptCnt == 1){
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d109      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x4a>
			SimulateKeyRelease();
 80007f6:	f7ff ff2d 	bl	8000654 <SimulateKeyRelease>
			if((recv_buffer[0]&0x02) != 0x02)
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	079b      	lsls	r3, r3, #30
 8000800:	d4ed      	bmi.n	80007de <HAL_TIM_PeriodElapsedCallback+0x1e>
				InterruptCnt = -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	6023      	str	r3, [r4, #0]
 8000808:	e7e9      	b.n	80007de <HAL_TIM_PeriodElapsedCallback+0x1e>
			TIM2->CR1 &= ~TIM_CR1_CEN;
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e7e2      	b.n	80007de <HAL_TIM_PeriodElapsedCallback+0x1e>
 8000818:	200001e4 	.word	0x200001e4
 800081c:	20000160 	.word	0x20000160
 8000820:	20000171 	.word	0x20000171
 8000824:	200002c0 	.word	0x200002c0
 8000828:	20000170 	.word	0x20000170

0800082c <Error_Handler>:
 800082c:	b672      	cpsid	i
  while (1)
 800082e:	e7fe      	b.n	800082e <Error_Handler+0x2>

08000830 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_SPI1_Init+0x4c>)
{
 8000834:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	f44f 7382 	mov.w	r3, #260	; 0x104
 800083a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083e:	2300      	movs	r3, #0
 8000840:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000844:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084c:	2228      	movs	r2, #40	; 0x28
 800084e:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000852:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000858:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085c:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000862:	2308      	movs	r3, #8
 8000864:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000866:	f001 ffdf 	bl	8002828 <HAL_SPI_Init>
 800086a:	b118      	cbz	r0, 8000874 <MX_SPI1_Init+0x44>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000870:	f7ff bfdc 	b.w	800082c <Error_Handler>
}
 8000874:	bd08      	pop	{r3, pc}
 8000876:	bf00      	nop
 8000878:	20000180 	.word	0x20000180
 800087c:	40013000 	.word	0x40013000

08000880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000880:	b510      	push	{r4, lr}
 8000882:	4604      	mov	r4, r0
 8000884:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	2214      	movs	r2, #20
 8000888:	2100      	movs	r1, #0
 800088a:	a803      	add	r0, sp, #12
 800088c:	f004 f9a7 	bl	8004bde <memset>
  if(spiHandle->Instance==SPI1)
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_SPI_MspInit+0x60>)
 8000894:	429a      	cmp	r2, r3
 8000896:	d120      	bne.n	80008da <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000898:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089c:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008a4:	661a      	str	r2, [r3, #96]	; 0x60
 80008a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	22c2      	movs	r2, #194	; 0xc2
 80008c4:	2302      	movs	r3, #2
 80008c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ca:	2305      	movs	r3, #5
 80008cc:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	a903      	add	r1, sp, #12
 80008d6:	f000 f9eb 	bl	8000cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008da:	b008      	add	sp, #32
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000

080008e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_MspInit+0x2c>)
 80008e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008e8:	f042 0201 	orr.w	r2, r2, #1
 80008ec:	661a      	str	r2, [r3, #96]	; 0x60
 80008ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80008f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	f002 0201 	and.w	r2, r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000900:	659a      	str	r2, [r3, #88]	; 0x58
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	b002      	add	sp, #8
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler>

08000916 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler>

08000918 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler>

0800091a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler>

0800091c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler>

0800091e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	4770      	bx	lr

08000920 <DebugMon_Handler>:
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 b938 	b.w	8000b98 <HAL_IncTick>

08000928 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000928:	4801      	ldr	r0, [pc, #4]	; (8000930 <TIM2_IRQHandler+0x8>)
 800092a:	f002 b815 	b.w	8002958 <HAL_TIM_IRQHandler>
 800092e:	bf00      	nop
 8000930:	200001e4 	.word	0x200001e4

08000934 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000934:	4801      	ldr	r0, [pc, #4]	; (800093c <USB_IRQHandler+0x8>)
 8000936:	f000 bb1f 	b.w	8000f78 <HAL_PCD_IRQHandler>
 800093a:	bf00      	nop
 800093c:	2000079c 	.word	0x2000079c

08000940 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <SystemInit+0x10>)
 8000942:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000954:	b500      	push	{lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	2210      	movs	r2, #16
{
 8000958:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	2100      	movs	r1, #0
 800095c:	eb0d 0002 	add.w	r0, sp, r2
 8000960:	f004 f93d 	bl	8004bde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000964:	4816      	ldr	r0, [pc, #88]	; (80009c0 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 7199;
 8000966:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800096a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 7199;
 8000970:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 399;
 8000974:	f240 128f 	movw	r2, #399	; 0x18f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	6083      	str	r3, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000986:	f002 f8c1 	bl	8002b0c <HAL_TIM_Base_Init>
 800098a:	b108      	cbz	r0, 8000990 <MX_TIM2_Init+0x3c>
  {
    Error_Handler();
 800098c:	f7ff ff4e 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000998:	a904      	add	r1, sp, #16
 800099a:	f002 f8f1 	bl	8002b80 <HAL_TIM_ConfigClockSource>
 800099e:	b108      	cbz	r0, 80009a4 <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 80009a0:	f7ff ff44 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009aa:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ae:	f002 f981 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	b108      	cbz	r0, 80009b8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80009b4:	f7ff ff3a 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b8:	b009      	add	sp, #36	; 0x24
 80009ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80009be:	bf00      	nop
 80009c0:	200001e4 	.word	0x200001e4

080009c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80009c4:	6803      	ldr	r3, [r0, #0]
 80009c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80009ca:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80009cc:	d115      	bne.n	80009fa <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009d2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	659a      	str	r2, [r3, #88]	; 0x58
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ea:	f000 f90d 	bl	8000c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ee:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009f0:	b003      	add	sp, #12
 80009f2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f6:	f000 b939 	b.w	8000c6c <HAL_NVIC_EnableIRQ>
}
 80009fa:	b003      	add	sp, #12
 80009fc:	f85d fb04 	ldr.w	pc, [sp], #4

08000a00 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <MX_USART2_UART_Init+0x38>)
{
 8000a04:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8000a06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a0a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a12:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	f002 fb83 	bl	800312c <HAL_UART_Init>
 8000a26:	b118      	cbz	r0, 8000a30 <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a2c:	f7ff befe 	b.w	800082c <Error_Handler>
}
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	20000230 	.word	0x20000230
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	b09c      	sub	sp, #112	; 0x70
 8000a40:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	2214      	movs	r2, #20
 8000a44:	2100      	movs	r1, #0
 8000a46:	a802      	add	r0, sp, #8
 8000a48:	f004 f8c9 	bl	8004bde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	2254      	movs	r2, #84	; 0x54
 8000a4e:	2100      	movs	r1, #0
 8000a50:	a807      	add	r0, sp, #28
 8000a52:	f004 f8c4 	bl	8004bde <memset>
  if(uartHandle->Instance==USART2)
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_UART_MspInit+0x94>)
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d135      	bne.n	8000aca <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5e:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a62:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a64:	f001 fd94 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	b108      	cbz	r0, 8000a6e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000a6a:	f7ff fedf 	bl	800082c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_UART_MspInit+0x98>)
 8000a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a76:	659a      	str	r2, [r3, #88]	; 0x58
 8000a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a7a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	9b01      	ldr	r3, [sp, #4]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2602      	movs	r6, #2
 8000a96:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa0:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	a902      	add	r1, sp, #8
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	e9cd 5404 	strd	r5, r4, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f000 f8ff 	bl	8000cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	a902      	add	r1, sp, #8
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	e9cd 5404 	strd	r5, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ac4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f000 f8f3 	bl	8000cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aca:	b01c      	add	sp, #112	; 0x70
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ff30 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 f873 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fe17 	bl	800073c <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000b1c:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8000b20:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000b24:	20000abc 	.word	0x20000abc

08000b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_IRQHandler>
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_InitTick+0x40>)
 8000b30:	781a      	ldrb	r2, [r3, #0]
{
 8000b32:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000b34:	b90a      	cbnz	r2, 8000b3a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b38:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <HAL_InitTick+0x44>)
 8000b44:	6810      	ldr	r0, [r2, #0]
 8000b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b4a:	f000 f89d 	bl	8000c88 <HAL_SYSTICK_Config>
 8000b4e:	4604      	mov	r4, r0
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d1f0      	bne.n	8000b36 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	2d0f      	cmp	r5, #15
 8000b56:	d8ee      	bhi.n	8000b36 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f852 	bl	8000c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_InitTick+0x48>)
 8000b66:	4620      	mov	r0, r4
 8000b68:	601d      	str	r5, [r3, #0]
  return status;
 8000b6a:	e7e5      	b.n	8000b38 <HAL_InitTick+0xc>
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_Init>:
{
 8000b78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f832 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff ffd3 	bl	8000b2c <HAL_InitTick>
 8000b86:	4604      	mov	r4, r0
 8000b88:	b918      	cbnz	r0, 8000b92 <HAL_Init+0x1a>
    HAL_MspInit();
 8000b8a:	f7ff feab 	bl	80008e4 <HAL_MspInit>
}
 8000b8e:	4620      	mov	r0, r4
 8000b90:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b92:	2401      	movs	r4, #1
 8000b94:	e7fb      	b.n	8000b8e <HAL_Init+0x16>
	...

08000b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x10>)
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_IncTick+0x14>)
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200002b8 	.word	0x200002b8
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <HAL_GetTick+0x8>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200002b8 	.word	0x200002b8

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff6 	bl	8000bb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8000bc6:	bf1c      	itt	ne
 8000bc8:	4b05      	ldrne	r3, [pc, #20]	; (8000be0 <HAL_Delay+0x24>)
 8000bca:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8000bce:	bf18      	it	ne
 8000bd0:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	f7ff ffed 	bl	8000bb0 <HAL_GetTick>
 8000bd6:	1b43      	subs	r3, r0, r5
 8000bd8:	42a3      	cmp	r3, r4
 8000bda:	d3fa      	bcc.n	8000bd2 <HAL_Delay+0x16>
  {
  }
}
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000be6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c00:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0a:	b530      	push	{r4, r5, lr}
 8000c0c:	68dc      	ldr	r4, [r3, #12]
 8000c0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	bf28      	it	cs
 8000c1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c24:	bf8c      	ite	hi
 8000c26:	3c03      	subhi	r4, #3
 8000c28:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2a:	fa05 f303 	lsl.w	r3, r5, r3
 8000c2e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c32:	40a5      	lsls	r5, r4
 8000c34:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	bfac      	ite	ge
 8000c42:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	4a08      	ldrlt	r2, [pc, #32]	; (8000c68 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	bfb8      	it	lt
 8000c4e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	bfaa      	itet	ge
 8000c56:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c60:	bd30      	pop	{r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	e000ed14 	.word	0xe000ed14

08000c6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	db07      	blt.n	8000c80 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_NVIC_EnableIRQ+0x18>)
 8000c72:	0941      	lsrs	r1, r0, #5
 8000c74:	2301      	movs	r3, #1
 8000c76:	f000 001f 	and.w	r0, r0, #31
 8000c7a:	4083      	lsls	r3, r0
 8000c7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	3801      	subs	r0, #1
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d20b      	bcs.n	8000ca8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	21f0      	movs	r1, #240	; 0xf0
 8000c9a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ca8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8000e1c <HAL_GPIO_Init+0x16c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb8:	4c56      	ldr	r4, [pc, #344]	; (8000e14 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	680a      	ldr	r2, [r1, #0]
 8000cbe:	fa32 f503 	lsrs.w	r5, r2, r3
 8000cc2:	d102      	bne.n	8000cca <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8000cc4:	b003      	add	sp, #12
 8000cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cca:	2501      	movs	r5, #1
 8000ccc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8000cd0:	ea18 0202 	ands.w	r2, r8, r2
 8000cd4:	f000 8098 	beq.w	8000e08 <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cda:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	f006 0503 	and.w	r5, r6, #3
 8000ce0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ce4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	1e6f      	subs	r7, r5, #1
 8000cea:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cec:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	d834      	bhi.n	8000d5c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000cf2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cf4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	68cf      	ldr	r7, [r1, #12]
 8000cfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfe:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d02:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d04:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d06:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8000d0e:	409f      	lsls	r7, r3
 8000d10:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8000d14:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d16:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d18:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1c:	688f      	ldr	r7, [r1, #8]
 8000d1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d22:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8000d28:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	d119      	bne.n	8000d60 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000d2c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8000d30:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d34:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000d38:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000d40:	f04f 0b0f 	mov.w	fp, #15
 8000d44:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000d48:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4c:	690f      	ldr	r7, [r1, #16]
 8000d4e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d52:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000d56:	f8c8 7020 	str.w	r7, [r8, #32]
 8000d5a:	e001      	b.n	8000d60 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5c:	2d03      	cmp	r5, #3
 8000d5e:	d1da      	bne.n	8000d16 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8000d60:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d62:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d66:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d6a:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000d70:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d72:	d049      	beq.n	8000e08 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d74:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000d78:	f045 0501 	orr.w	r5, r5, #1
 8000d7c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000d80:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000d84:	f023 0703 	bic.w	r7, r3, #3
 8000d88:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d8c:	f005 0501 	and.w	r5, r5, #1
 8000d90:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d94:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d96:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d9c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000da2:	f04f 0e0f 	mov.w	lr, #15
 8000da6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000daa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db2:	d02b      	beq.n	8000e0c <HAL_GPIO_Init+0x15c>
 8000db4:	4d18      	ldr	r5, [pc, #96]	; (8000e18 <HAL_GPIO_Init+0x168>)
 8000db6:	42a8      	cmp	r0, r5
 8000db8:	d02a      	beq.n	8000e10 <HAL_GPIO_Init+0x160>
 8000dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dbe:	42a8      	cmp	r0, r5
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2502      	moveq	r5, #2
 8000dc4:	2507      	movne	r5, #7
 8000dc6:	fa05 f50c 	lsl.w	r5, r5, ip
 8000dca:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dce:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8000dd0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000dd2:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000dd8:	bf0c      	ite	eq
 8000dda:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000ddc:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8000dde:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000de0:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000de6:	bf0c      	ite	eq
 8000de8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000dea:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8000dec:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8000dee:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000df4:	bf0c      	ite	eq
 8000df6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000df8:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8000dfa:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8000dfc:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dfe:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8000e00:	bf54      	ite	pl
 8000e02:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000e04:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8000e06:	6025      	str	r5, [r4, #0]
    position++;
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e757      	b.n	8000cbc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e0c:	2500      	movs	r5, #0
 8000e0e:	e7da      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e10:	2501      	movs	r5, #1
 8000e12:	e7d8      	b.n	8000dc6 <HAL_GPIO_Init+0x116>
 8000e14:	40010400 	.word	0x40010400
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e20:	b10a      	cbz	r2, 8000e26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	6181      	str	r1, [r0, #24]
 8000e24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000e28:	4770      	bx	lr

08000e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e2c:	4604      	mov	r4, r0
{
 8000e2e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000e30:	b310      	cbz	r0, 8000e78 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e32:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3a:	b91b      	cbnz	r3, 8000e44 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e3c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e40:	f003 fd52 	bl	80048e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e44:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e46:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e48:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000e4c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000e50:	f002 f9aa 	bl	80031a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	466e      	mov	r6, sp
 8000e58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	6033      	str	r3, [r6, #0]
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1d27      	adds	r7, r4, #4
 8000e62:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e66:	f856 0b10 	ldr.w	r0, [r6], #16
 8000e6a:	f002 f98d 	bl	8003188 <USB_CoreInit>
 8000e6e:	4605      	mov	r5, r0
 8000e70:	b120      	cbz	r0, 8000e7c <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000e78:	2501      	movs	r5, #1
 8000e7a:	e051      	b.n	8000f20 <HAL_PCD_Init+0xf6>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	6820      	ldr	r0, [r4, #0]
 8000e80:	f002 f99c 	bl	80031bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e84:	4628      	mov	r0, r5
 8000e86:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000e8a:	2528      	movs	r5, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e8c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e90:	4602      	mov	r2, r0
 8000e92:	b2c1      	uxtb	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e94:	458c      	cmp	ip, r1
 8000e96:	f100 0001 	add.w	r0, r0, #1
 8000e9a:	d81b      	bhi.n	8000ed4 <HAL_PCD_Init+0xaa>
 8000e9c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e9e:	2528      	movs	r5, #40	; 0x28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea4:	4584      	cmp	ip, r0
 8000ea6:	f103 0301 	add.w	r3, r3, #1
 8000eaa:	d81f      	bhi.n	8000eec <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eac:	4635      	mov	r5, r6
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	46ec      	mov	ip, sp
 8000eb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	f8cc 3000 	str.w	r3, [ip]
 8000ebc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	f002 f97d 	bl	80031c0 <USB_DevInit>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4605      	mov	r5, r0
 8000eca:	b1e0      	cbz	r0, 8000f06 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ecc:	2202      	movs	r2, #2
 8000ece:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000ed2:	e7d1      	b.n	8000e78 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000ed4:	fb05 4301 	mla	r3, r5, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ed8:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8000edc:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000ee0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ee4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	e7d2      	b.n	8000e92 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8000eec:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ef0:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef4:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000ef8:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000efc:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f00:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f04:	e7cd      	b.n	8000ea2 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8000f06:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f0a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f0e:	69e3      	ldr	r3, [r4, #28]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d102      	bne.n	8000f1a <HAL_PCD_Init+0xf0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f14:	4620      	mov	r0, r4
 8000f16:	f000 fe4b 	bl	8001bb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	f002 fc15 	bl	800374a <USB_DevDisconnect>

  return HAL_OK;
}
 8000f20:	4628      	mov	r0, r5
 8000f22:	b007      	add	sp, #28
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f26:	b510      	push	{r4, lr}
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000f28:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000f2c:	2b01      	cmp	r3, #1
{
 8000f2e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f30:	d00c      	beq.n	8000f4c <HAL_PCD_Start+0x26>
 8000f32:	2301      	movs	r3, #1
 8000f34:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000f38:	6800      	ldr	r0, [r0, #0]
 8000f3a:	f002 f92c 	bl	8003196 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	f002 fbf8 	bl	8003734 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000f4a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	e7fc      	b.n	8000f4a <HAL_PCD_Start+0x24>

08000f50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f50:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000f52:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8000f56:	2a01      	cmp	r2, #1
{
 8000f58:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f5a:	d00b      	beq.n	8000f74 <HAL_PCD_SetAddress+0x24>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000f62:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f66:	6800      	ldr	r0, [r0, #0]
 8000f68:	f002 fbde 	bl	8003728 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000f72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f74:	2002      	movs	r0, #2
 8000f76:	e7fc      	b.n	8000f72 <HAL_PCD_SetAddress+0x22>

08000f78 <HAL_PCD_IRQHandler>:
{
 8000f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f7e:	6800      	ldr	r0, [r0, #0]
 8000f80:	f002 fbeb 	bl	800375a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f84:	f410 4100 	ands.w	r1, r0, #32768	; 0x8000
 8000f88:	f000 8439 	beq.w	80017fe <HAL_PCD_IRQHandler+0x886>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f8c:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80012ac <HAL_PCD_IRQHandler+0x334>
 8000f90:	4fc5      	ldr	r7, [pc, #788]	; (80012a8 <HAL_PCD_IRQHandler+0x330>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f92:	6820      	ldr	r0, [r4, #0]
 8000f94:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f98:	041a      	lsls	r2, r3, #16
 8000f9a:	d402      	bmi.n	8000fa2 <HAL_PCD_IRQHandler+0x2a>
}
 8000f9c:	b003      	add	sp, #12
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000fa2:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8000fa6:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8000fa8:	f015 050f 	ands.w	r5, r5, #15
 8000fac:	f040 80c2 	bne.w	8001134 <HAL_PCD_IRQHandler+0x1bc>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fb0:	f011 0110 	ands.w	r1, r1, #16
 8000fb4:	d12a      	bne.n	800100c <HAL_PCD_IRQHandler+0x94>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fb6:	8803      	ldrh	r3, [r0, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	ea03 0308 	and.w	r3, r3, r8
 8000fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fc4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fc8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000fcc:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000fd0:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fd4:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fd6:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000fda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000fe0:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fe2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000fe4:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fe6:	f003 fccc 	bl	8004982 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0cf      	beq.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
 8000ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ff4:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d1cb      	bne.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ffa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001002:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001006:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800100a:	e7c2      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800100c:	8805      	ldrh	r5, [r0, #0]
 800100e:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001010:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001014:	d020      	beq.n	8001058 <HAL_PCD_IRQHandler+0xe0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001016:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800101a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800101e:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001022:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001026:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800102a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800102e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001036:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800103a:	f002 fde3 	bl	8003c04 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	8813      	ldrh	r3, [r2, #0]
 8001042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001046:	051b      	lsls	r3, r3, #20
 8001048:	0d1b      	lsrs	r3, r3, #20
 800104a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001050:	4620      	mov	r0, r4
 8001052:	f003 fc87 	bl	8004964 <HAL_PCD_SetupStageCallback>
 8001056:	e79c      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001058:	041e      	lsls	r6, r3, #16
 800105a:	d59a      	bpl.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800105c:	8803      	ldrh	r3, [r0, #0]
 800105e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001062:	051b      	lsls	r3, r3, #20
 8001064:	0d1b      	lsrs	r3, r3, #20
 8001066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800106c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001070:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001074:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001078:	fa11 f383 	uxtah	r3, r1, r3
 800107c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001084:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001088:	b18b      	cbz	r3, 80010ae <HAL_PCD_IRQHandler+0x136>
 800108a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800108e:	b171      	cbz	r1, 80010ae <HAL_PCD_IRQHandler+0x136>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001090:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001094:	f002 fdb6 	bl	8003c04 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800109c:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 80010a0:	4413      	add	r3, r2
 80010a2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80010a6:	4629      	mov	r1, r5
 80010a8:	4620      	mov	r0, r4
 80010aa:	f003 fc61 	bl	8004970 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010ae:	6821      	ldr	r1, [r4, #0]
 80010b0:	880a      	ldrh	r2, [r1, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010b2:	0510      	lsls	r0, r2, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010b4:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010b6:	f53f af6c 	bmi.w	8000f92 <HAL_PCD_IRQHandler+0x1a>
 80010ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80010be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80010c2:	f43f af66 	beq.w	8000f92 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010c6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80010ca:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	5ac2      	ldrh	r2, [r0, r3]
 80010d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010d6:	52c2      	strh	r2, [r0, r3]
 80010d8:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 80010dc:	2a3e      	cmp	r2, #62	; 0x3e
 80010de:	d90b      	bls.n	80010f8 <HAL_PCD_IRQHandler+0x180>
 80010e0:	0955      	lsrs	r5, r2, #5
 80010e2:	06d2      	lsls	r2, r2, #27
 80010e4:	5ac2      	ldrh	r2, [r0, r3]
 80010e6:	bf08      	it	eq
 80010e8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80010ec:	b292      	uxth	r2, r2
 80010ee:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80010f2:	433a      	orrs	r2, r7
 80010f4:	b292      	uxth	r2, r2
 80010f6:	e004      	b.n	8001102 <HAL_PCD_IRQHandler+0x18a>
 80010f8:	b99a      	cbnz	r2, 8001122 <HAL_PCD_IRQHandler+0x1aa>
 80010fa:	5ac2      	ldrh	r2, [r0, r3]
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001102:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001104:	880b      	ldrh	r3, [r1, #0]
 8001106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800110a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111e:	800b      	strh	r3, [r1, #0]
 8001120:	e737      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001122:	0855      	lsrs	r5, r2, #1
 8001124:	07d6      	lsls	r6, r2, #31
 8001126:	5ac2      	ldrh	r2, [r0, r3]
 8001128:	bf48      	it	mi
 800112a:	3501      	addmi	r5, #1
 800112c:	b292      	uxth	r2, r2
 800112e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001132:	e7df      	b.n	80010f4 <HAL_PCD_IRQHandler+0x17c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001134:	fa0f f985 	sxth.w	r9, r5
 8001138:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800113c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800113e:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001140:	f140 80f4 	bpl.w	800132c <HAL_PCD_IRQHandler+0x3b4>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001144:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8001148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800114c:	051b      	lsls	r3, r3, #20
 800114e:	0d1b      	lsrs	r3, r3, #20
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001154:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001156:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->doublebuffer == 0U)
 800115a:	fb01 4105 	mla	r1, r1, r5, r4
 800115e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001162:	b9bb      	cbnz	r3, 8001194 <HAL_PCD_IRQHandler+0x21c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001164:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001168:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800116c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001170:	fa1c f383 	uxtah	r3, ip, r3
 8001174:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 8001178:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800117c:	f1ba 0f00 	cmp.w	sl, #0
 8001180:	f000 80b8 	beq.w	80012f4 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001184:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001188:	4653      	mov	r3, sl
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800118a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800118e:	f002 fd39 	bl	8003c04 <USB_ReadPMA>
 8001192:	e0af      	b.n	80012f4 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8001194:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001198:	2b02      	cmp	r3, #2
 800119a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800119e:	f040 8087 	bne.w	80012b0 <HAL_PCD_IRQHandler+0x338>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011a2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50

    if (ep->xfer_len >= count)
 80011a6:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011aa:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011ae:	fa1a fc8c 	uxtah	ip, sl, ip
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80011b2:	f416 4b80 	ands.w	fp, r6, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011b6:	4484      	add	ip, r0
 80011b8:	f006 0e40 	and.w	lr, r6, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80011bc:	d03a      	beq.n	8001234 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011be:	f8bc a402 	ldrh.w	sl, [ip, #1026]	; 0x402
 80011c2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80011c6:	4592      	cmp	sl, r2
 80011c8:	d913      	bls.n	80011f2 <HAL_PCD_IRQHandler+0x27a>
 80011ca:	2200      	movs	r2, #0
 80011cc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80011d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80011d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011dc:	0412      	lsls	r2, r2, #16
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80011e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80011f0:	e005      	b.n	80011fe <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 80011f2:	eba2 020a 	sub.w	r2, r2, sl
 80011f6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d0e8      	beq.n	80011d0 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011fe:	f1be 0f00 	cmp.w	lr, #0
 8001202:	d00d      	beq.n	8001220 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001204:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001208:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800120c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001210:	0412      	lsls	r2, r2, #16
 8001212:	0c12      	lsrs	r2, r2, #16
 8001214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001218:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800121c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001220:	f1ba 0f00 	cmp.w	sl, #0
 8001224:	d066      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001226:	2128      	movs	r1, #40	; 0x28
 8001228:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800122c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001230:	4653      	mov	r3, sl
 8001232:	e7aa      	b.n	800118a <HAL_PCD_IRQHandler+0x212>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001234:	f8bc a406 	ldrh.w	sl, [ip, #1030]	; 0x406
 8001238:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 800123c:	4592      	cmp	sl, r2
 800123e:	d912      	bls.n	8001266 <HAL_PCD_IRQHandler+0x2ee>
 8001240:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001244:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800124c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001250:	0412      	lsls	r2, r2, #16
 8001252:	0c12      	lsrs	r2, r2, #16
 8001254:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001260:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001264:	e005      	b.n	8001272 <HAL_PCD_IRQHandler+0x2fa>
      ep->xfer_len -= count;
 8001266:	eba2 020a 	sub.w	r2, r2, sl
 800126a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800126e:	2a00      	cmp	r2, #0
 8001270:	d0e8      	beq.n	8001244 <HAL_PCD_IRQHandler+0x2cc>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001272:	f1be 0f00 	cmp.w	lr, #0
 8001276:	d10d      	bne.n	8001294 <HAL_PCD_IRQHandler+0x31c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001278:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800127c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001284:	0412      	lsls	r2, r2, #16
 8001286:	0c12      	lsrs	r2, r2, #16
 8001288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800128c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001290:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001294:	f1ba 0f00 	cmp.w	sl, #0
 8001298:	d02c      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800129a:	2128      	movs	r1, #40	; 0x28
 800129c:	fb01 4105 	mla	r1, r1, r5, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012a0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80012a4:	4653      	mov	r3, sl
 80012a6:	e770      	b.n	800118a <HAL_PCD_IRQHandler+0x212>
 80012a8:	ffff8000 	.word	0xffff8000
 80012ac:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80012b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80012b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	0c12      	lsrs	r2, r2, #16
 80012c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80012c8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012cc:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80012d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80012d4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012dc:	d060      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x428>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012de:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80012e2:	fa1c f383 	uxtah	r3, ip, r3
 80012e6:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80012ea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80012ee:	f1ba 0f00 	cmp.w	sl, #0
 80012f2:	d19b      	bne.n	800122c <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 80012f4:	2128      	movs	r1, #40	; 0x28
 80012f6:	fb01 4305 	mla	r3, r1, r5, r4
 80012fa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80012fe:	4452      	add	r2, sl
 8001300:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001304:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001308:	4452      	add	r2, sl
 800130a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800130e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001312:	b11a      	cbz	r2, 800131c <HAL_PCD_IRQHandler+0x3a4>
 8001314:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001318:	459a      	cmp	sl, r3
 800131a:	d24d      	bcs.n	80013b8 <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800131c:	2328      	movs	r3, #40	; 0x28
 800131e:	fb03 4305 	mla	r3, r3, r5, r4
 8001322:	4620      	mov	r0, r4
 8001324:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001328:	f003 fb22 	bl	8004970 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800132c:	0632      	lsls	r2, r6, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800132e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001330:	f57f ae2f 	bpl.w	8000f92 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001334:	f830 3029 	ldrh.w	r3, [r0, r9, lsl #2]
 8001338:	b29b      	uxth	r3, r3
 800133a:	ea03 0308 	and.w	r3, r3, r8
 800133e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001342:	f820 3029 	strh.w	r3, [r0, r9, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001346:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800134a:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800134e:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8001352:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8001356:	2b01      	cmp	r3, #1
 8001358:	d159      	bne.n	800140e <HAL_PCD_IRQHandler+0x496>
          ep->xfer_len = 0U;
 800135a:	fb0c 4c05 	mla	ip, ip, r5, r4
 800135e:	2500      	movs	r5, #0
          if (ep->doublebuffer != 0U)
 8001360:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
          ep->xfer_len = 0U;
 8001364:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001368:	2b00      	cmp	r3, #0
 800136a:	d038      	beq.n	80013de <HAL_PCD_IRQHandler+0x466>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800136c:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8001370:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8001374:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8001378:	d037      	beq.n	80013ea <HAL_PCD_IRQHandler+0x472>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800137a:	bb2b      	cbnz	r3, 80013c8 <HAL_PCD_IRQHandler+0x450>
 800137c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001380:	f200 4002 	addw	r0, r0, #1026	; 0x402
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001384:	fa10 f383 	uxtah	r3, r0, r3
 8001388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001392:	801a      	strh	r2, [r3, #0]
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	b292      	uxth	r2, r2
 8001398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139c:	801a      	strh	r2, [r3, #0]
 800139e:	e01e      	b.n	80013de <HAL_PCD_IRQHandler+0x466>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013a0:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 80013a4:	fa1c f383 	uxtah	r3, ip, r3
 80013a8:	f833 a032 	ldrh.w	sl, [r3, r2, lsl #3]
 80013ac:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80013b0:	f1ba 0f00 	cmp.w	sl, #0
 80013b4:	d09e      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x37c>
 80013b6:	e773      	b.n	80012a0 <HAL_PCD_IRQHandler+0x328>
        ep = &hpcd->OUT_ep[epindex];
 80013b8:	fb01 4105 	mla	r1, r1, r5, r4
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80013c2:	f002 f9df 	bl	8003784 <USB_EPStartXfer>
 80013c6:	e7b1      	b.n	800132c <HAL_PCD_IRQHandler+0x3b4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_PCD_IRQHandler+0x466>
 80013cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013d0:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80013d4:	fa10 f383 	uxtah	r3, r0, r3
 80013d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013dc:	801d      	strh	r5, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013de:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013e2:	4620      	mov	r0, r4
 80013e4:	f003 facd 	bl	8004982 <HAL_PCD_DataInStageCallback>
 80013e8:	e5d3      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013ea:	b923      	cbnz	r3, 80013f6 <HAL_PCD_IRQHandler+0x47e>
 80013ec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013f0:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80013f4:	e7c6      	b.n	8001384 <HAL_PCD_IRQHandler+0x40c>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d1f1      	bne.n	80013de <HAL_PCD_IRQHandler+0x466>
 80013fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013fe:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8001402:	fa10 f383 	uxtah	r3, r0, r3
 8001406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800140a:	801e      	strh	r6, [r3, #0]
 800140c:	e7e7      	b.n	80013de <HAL_PCD_IRQHandler+0x466>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800140e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8001412:	fb0c 4e05 	mla	lr, ip, r5, r4
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001416:	f416 7a80 	ands.w	sl, r6, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 800141a:	f8de 3040 	ldr.w	r3, [lr, #64]	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800141e:	460a      	mov	r2, r1
 8001420:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001424:	d121      	bne.n	800146a <HAL_PCD_IRQHandler+0x4f2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001426:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800142a:	fa10 f282 	uxtah	r2, r0, r2
 800142e:	445a      	add	r2, fp
 8001430:	f8b2 6402 	ldrh.w	r6, [r2, #1026]	; 0x402
            if (ep->xfer_len > TxPctSize)
 8001434:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8001438:	429e      	cmp	r6, r3
 800143a:	d302      	bcc.n	8001442 <HAL_PCD_IRQHandler+0x4ca>
 800143c:	f8ce a040 	str.w	sl, [lr, #64]	; 0x40
 8001440:	e7cf      	b.n	80013e2 <HAL_PCD_IRQHandler+0x46a>
              ep->xfer_len -= TxPctSize;
 8001442:	1b9b      	subs	r3, r3, r6
              ep->xfer_buff += TxPctSize;
 8001444:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
 8001448:	f8ce 3040 	str.w	r3, [lr, #64]	; 0x40
              ep->xfer_count += TxPctSize;
 800144c:	f8de 3044 	ldr.w	r3, [lr, #68]	; 0x44
              ep->xfer_buff += TxPctSize;
 8001450:	4432      	add	r2, r6
              ep->xfer_count += TxPctSize;
 8001452:	4433      	add	r3, r6
        ep = &hpcd->IN_ep[epindex];
 8001454:	fb05 cc0c 	mla	ip, r5, ip, ip
              ep->xfer_buff += TxPctSize;
 8001458:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 800145c:	f8ce 3044 	str.w	r3, [lr, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001460:	eb04 010c 	add.w	r1, r4, ip
 8001464:	f002 f98e 	bl	8003784 <USB_EPStartXfer>
 8001468:	e593      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800146a:	f016 0a40 	ands.w	sl, r6, #64	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800146e:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001472:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001476:	f000 80e4 	beq.w	8001642 <HAL_PCD_IRQHandler+0x6ca>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800147a:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 800147e:	fa1e fc8c 	uxtah	ip, lr, ip
 8001482:	f04f 0a28 	mov.w	sl, #40	; 0x28
 8001486:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]

    if (ep->xfer_len > TxPctSize)
 800148a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800148e:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxPctSize;
 8001490:	fb0a 4a05 	mla	sl, sl, r5, r4
 8001494:	bf34      	ite	cc
 8001496:	eba3 030c 	subcc.w	r3, r3, ip
    }
    else
    {
      ep->xfer_len = 0U;
 800149a:	2300      	movcs	r3, #0
 800149c:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80014a0:	b2b6      	uxth	r6, r6
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d14f      	bne.n	8001546 <HAL_PCD_IRQHandler+0x5ce>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014a6:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 80014aa:	bbdd      	cbnz	r5, 8001524 <HAL_PCD_IRQHandler+0x5ac>
 80014ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014b0:	fa1e f383 	uxtah	r3, lr, r3
 80014b4:	f833 5031 	ldrh.w	r5, [r3, r1, lsl #3]
 80014b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80014bc:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
 80014c0:	f833 5031 	ldrh.w	r5, [r3, r1, lsl #3]
 80014c4:	b2ad      	uxth	r5, r5
 80014c6:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80014ca:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014d2:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80014d6:	fa10 f083 	uxtah	r0, r0, r3
 80014da:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 80014de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014e2:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 80014e6:	f830 3031 	ldrh.w	r3, [r0, r1, lsl #3]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f0:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f003 fa44 	bl	8004982 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	f000 80e6 	beq.w	80016cc <HAL_PCD_IRQHandler+0x754>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001500:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800150a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800150e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001522:	e0d3      	b.n	80016cc <HAL_PCD_IRQHandler+0x754>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001524:	2d01      	cmp	r5, #1
 8001526:	d1e5      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x57c>
 8001528:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800152c:	fa1e f585 	uxtah	r5, lr, r5
 8001530:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001534:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001538:	f200 4006 	addw	r0, r0, #1030	; 0x406
 800153c:	fa10 f585 	uxtah	r5, r0, r5
 8001540:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
 8001544:	e7d6      	b.n	80014f4 <HAL_PCD_IRQHandler+0x57c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001546:	b16e      	cbz	r6, 8001564 <HAL_PCD_IRQHandler+0x5ec>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001548:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800154c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001564:	2628      	movs	r6, #40	; 0x28
 8001566:	fb06 4605 	mla	r6, r6, r5, r4
 800156a:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 80ac 	bne.w	80016cc <HAL_PCD_IRQHandler+0x754>
        ep->xfer_count += TxPctSize;
 8001574:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8001576:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001578:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 800157c:	4463      	add	r3, ip
 800157e:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001580:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8001582:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001584:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001586:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001588:	d32f      	bcc.n	80015ea <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 800158a:	ebaa 0a03 	sub.w	sl, sl, r3
 800158e:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001592:	f899 6029 	ldrb.w	r6, [r9, #41]	; 0x29
 8001596:	fa1f fa83 	uxth.w	sl, r3
 800159a:	2e00      	cmp	r6, #0
 800159c:	d148      	bne.n	8001630 <HAL_PCD_IRQHandler+0x6b8>
 800159e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80015a2:	fa1e f686 	uxtah	r6, lr, r6
 80015a6:	2b3e      	cmp	r3, #62	; 0x3e
 80015a8:	f836 c032 	ldrh.w	ip, [r6, r2, lsl #3]
 80015ac:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80015b0:	f826 c032 	strh.w	ip, [r6, r2, lsl #3]
 80015b4:	d926      	bls.n	8001604 <HAL_PCD_IRQHandler+0x68c>
 80015b6:	f836 c032 	ldrh.w	ip, [r6, r2, lsl #3]
 80015ba:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 80015be:	06db      	lsls	r3, r3, #27
 80015c0:	bf08      	it	eq
 80015c2:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80015c6:	fa1f fc8c 	uxth.w	ip, ip
 80015ca:	ea4c 2c8e 	orr.w	ip, ip, lr, lsl #10
 80015ce:	ea4c 0c07 	orr.w	ip, ip, r7
 80015d2:	fa1f fc8c 	uxth.w	ip, ip
 80015d6:	f826 c032 	strh.w	ip, [r6, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	fb02 4205 	mla	r2, r2, r5, r4
 80015e0:	4653      	mov	r3, sl
 80015e2:	8e12      	ldrh	r2, [r2, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80015e4:	f002 f8bf 	bl	8003766 <USB_WritePMA>
 80015e8:	e070      	b.n	80016cc <HAL_PCD_IRQHandler+0x754>
        else if (ep->xfer_len_db == 0U)
 80015ea:	f1ba 0f00 	cmp.w	sl, #0
 80015ee:	d103      	bne.n	80015f8 <HAL_PCD_IRQHandler+0x680>
          ep->xfer_fill_db = 0U;
 80015f0:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len > TxPctSize)
 80015f4:	4663      	mov	r3, ip
 80015f6:	e7cc      	b.n	8001592 <HAL_PCD_IRQHandler+0x61a>
          ep->xfer_fill_db = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80015fe:	64b3      	str	r3, [r6, #72]	; 0x48
 8001600:	4653      	mov	r3, sl
 8001602:	e7c6      	b.n	8001592 <HAL_PCD_IRQHandler+0x61a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001604:	b93b      	cbnz	r3, 8001616 <HAL_PCD_IRQHandler+0x69e>
 8001606:	f836 3032 	ldrh.w	r3, [r6, r2, lsl #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001610:	f826 3032 	strh.w	r3, [r6, r2, lsl #3]
 8001614:	e7e1      	b.n	80015da <HAL_PCD_IRQHandler+0x662>
 8001616:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800161a:	07db      	lsls	r3, r3, #31
 800161c:	f836 3032 	ldrh.w	r3, [r6, r2, lsl #3]
 8001620:	bf48      	it	mi
 8001622:	f10c 0c01 	addmi.w	ip, ip, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
 800162c:	b29b      	uxth	r3, r3
 800162e:	e7ef      	b.n	8001610 <HAL_PCD_IRQHandler+0x698>
 8001630:	2e01      	cmp	r6, #1
 8001632:	bf02      	ittt	eq
 8001634:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 8001638:	fa1e f383 	uxtaheq	r3, lr, r3
 800163c:	f823 a032 	strheq.w	sl, [r3, r2, lsl #3]
 8001640:	e7cb      	b.n	80015da <HAL_PCD_IRQHandler+0x662>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001642:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8001646:	fa1e fc8c 	uxtah	ip, lr, ip
 800164a:	b2b6      	uxth	r6, r6
 800164c:	f83c c031 	ldrh.w	ip, [ip, r1, lsl #3]
    if (ep->xfer_len >= TxPctSize)
 8001650:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001654:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8001656:	bf88      	it	hi
 8001658:	4653      	movhi	r3, sl
 800165a:	f04f 0a28 	mov.w	sl, #40	; 0x28
 800165e:	fb0a 4a05 	mla	sl, sl, r5, r4
      ep->xfer_len -= TxPctSize;
 8001662:	bf98      	it	ls
 8001664:	eba3 030c 	subls.w	r3, r3, ip
 8001668:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800166c:	2b00      	cmp	r3, #0
 800166e:	d151      	bne.n	8001714 <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001670:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8001674:	2d00      	cmp	r5, #0
 8001676:	d13c      	bne.n	80016f2 <HAL_PCD_IRQHandler+0x77a>
 8001678:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800167c:	f200 4502 	addw	r5, r0, #1026	; 0x402
 8001680:	fa15 f383 	uxtah	r3, r5, r3
 8001684:	f833 5031 	ldrh.w	r5, [r3, r1, lsl #3]
 8001688:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800168c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
 8001690:	f833 5031 	ldrh.w	r5, [r3, r1, lsl #3]
 8001694:	b2ad      	uxth	r5, r5
 8001696:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800169a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800169e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016a2:	fa1e f383 	uxtah	r3, lr, r3
 80016a6:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 80016aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80016ae:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
 80016b2:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
 80016b6:	b280      	uxth	r0, r0
 80016b8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80016bc:	f823 0031 	strh.w	r0, [r3, r1, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f003 f95e 	bl	8004982 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80016c6:	2e00      	cmp	r6, #0
 80016c8:	f43f af1a 	beq.w	8001500 <HAL_PCD_IRQHandler+0x588>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80016cc:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016e0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80016e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80016f0:	e44f      	b.n	8000f92 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016f2:	2d01      	cmp	r5, #1
 80016f4:	d1e4      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x748>
 80016f6:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80016fa:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80016fe:	fa1c f585 	uxtah	r5, ip, r5
 8001702:	f825 3031 	strh.w	r3, [r5, r1, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001706:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 800170a:	fa1e f080 	uxtah	r0, lr, r0
 800170e:	f820 3031 	strh.w	r3, [r0, r1, lsl #3]
 8001712:	e7d5      	b.n	80016c0 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001714:	b96e      	cbnz	r6, 8001732 <HAL_PCD_IRQHandler+0x7ba>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001716:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800171a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800171e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001732:	2628      	movs	r6, #40	; 0x28
 8001734:	fb06 4605 	mla	r6, r6, r5, r4
 8001738:	f896 304c 	ldrb.w	r3, [r6, #76]	; 0x4c
 800173c:	2b01      	cmp	r3, #1
 800173e:	d1c5      	bne.n	80016cc <HAL_PCD_IRQHandler+0x754>
        ep->xfer_count += TxPctSize;
 8001740:	6c73      	ldr	r3, [r6, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8001742:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001744:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8001748:	4463      	add	r3, ip
 800174a:	6473      	str	r3, [r6, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800174c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 800174e:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8001750:	459a      	cmp	sl, r3
        ep->xfer_buff += TxPctSize;
 8001752:	63f1      	str	r1, [r6, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001754:	d323      	bcc.n	800179e <HAL_PCD_IRQHandler+0x826>
          ep->xfer_len_db -= len;
 8001756:	ebaa 0a03 	sub.w	sl, sl, r3
 800175a:	f8c6 a048 	str.w	sl, [r6, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800175e:	f899 6029 	ldrb.w	r6, [r9, #41]	; 0x29
 8001762:	fa1f fc83 	uxth.w	ip, r3
 8001766:	2e00      	cmp	r6, #0
 8001768:	d140      	bne.n	80017ec <HAL_PCD_IRQHandler+0x874>
 800176a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800176e:	fa1e f686 	uxtah	r6, lr, r6
 8001772:	2b3e      	cmp	r3, #62	; 0x3e
 8001774:	f836 e032 	ldrh.w	lr, [r6, r2, lsl #3]
 8001778:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800177c:	f826 e032 	strh.w	lr, [r6, r2, lsl #3]
 8001780:	d91a      	bls.n	80017b8 <HAL_PCD_IRQHandler+0x840>
 8001782:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8001786:	06db      	lsls	r3, r3, #27
 8001788:	f836 3032 	ldrh.w	r3, [r6, r2, lsl #3]
 800178c:	bf08      	it	eq
 800178e:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001792:	b29b      	uxth	r3, r3
 8001794:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8001798:	433b      	orrs	r3, r7
 800179a:	b29b      	uxth	r3, r3
 800179c:	e012      	b.n	80017c4 <HAL_PCD_IRQHandler+0x84c>
        else if (ep->xfer_len_db == 0U)
 800179e:	f1ba 0f00 	cmp.w	sl, #0
 80017a2:	d103      	bne.n	80017ac <HAL_PCD_IRQHandler+0x834>
          ep->xfer_fill_db = 0U;
 80017a4:	f886 a04c 	strb.w	sl, [r6, #76]	; 0x4c
    if (ep->xfer_len >= TxPctSize)
 80017a8:	4663      	mov	r3, ip
 80017aa:	e7d8      	b.n	800175e <HAL_PCD_IRQHandler+0x7e6>
          ep->xfer_len_db = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	64b3      	str	r3, [r6, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80017b0:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 80017b4:	4653      	mov	r3, sl
 80017b6:	e7d2      	b.n	800175e <HAL_PCD_IRQHandler+0x7e6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017b8:	b963      	cbnz	r3, 80017d4 <HAL_PCD_IRQHandler+0x85c>
 80017ba:	f836 3032 	ldrh.w	r3, [r6, r2, lsl #3]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c4:	f826 3032 	strh.w	r3, [r6, r2, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80017c8:	2328      	movs	r3, #40	; 0x28
 80017ca:	fb03 4505 	mla	r5, r3, r5, r4
 80017ce:	4663      	mov	r3, ip
 80017d0:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 80017d2:	e707      	b.n	80015e4 <HAL_PCD_IRQHandler+0x66c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017d4:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 80017d8:	07db      	lsls	r3, r3, #31
 80017da:	f836 3032 	ldrh.w	r3, [r6, r2, lsl #3]
 80017de:	bf48      	it	mi
 80017e0:	f10e 0e01 	addmi.w	lr, lr, #1
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 80017ea:	e7d6      	b.n	800179a <HAL_PCD_IRQHandler+0x822>
 80017ec:	2e01      	cmp	r6, #1
 80017ee:	bf02      	ittt	eq
 80017f0:	f8b0 3050 	ldrheq.w	r3, [r0, #80]	; 0x50
 80017f4:	fa1e f383 	uxtaheq	r3, lr, r3
 80017f8:	f823 c032 	strheq.w	ip, [r3, r2, lsl #3]
 80017fc:	e7e4      	b.n	80017c8 <HAL_PCD_IRQHandler+0x850>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017fe:	0543      	lsls	r3, r0, #21
 8001800:	d513      	bpl.n	800182a <HAL_PCD_IRQHandler+0x8b2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	9101      	str	r1, [sp, #4]
 8001806:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800180a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001812:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001814:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001818:	f003 f8bf 	bl	800499a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800181c:	9901      	ldr	r1, [sp, #4]
 800181e:	4620      	mov	r0, r4
}
 8001820:	b003      	add	sp, #12
 8001822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001826:	f7ff bb93 	b.w	8000f50 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800182a:	0447      	lsls	r7, r0, #17
 800182c:	d50a      	bpl.n	8001844 <HAL_PCD_IRQHandler+0x8cc>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800182e:	6822      	ldr	r2, [r4, #0]
 8001830:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001840:	f7ff bbac 	b.w	8000f9c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001844:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8001848:	d005      	beq.n	8001856 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001854:	e7f0      	b.n	8001838 <HAL_PCD_IRQHandler+0x8c0>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001856:	04c6      	lsls	r6, r0, #19
 8001858:	d522      	bpl.n	80018a0 <HAL_PCD_IRQHandler+0x928>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800186c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001870:	f023 0308 	bic.w	r3, r3, #8
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 800187c:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 8001880:	2b01      	cmp	r3, #1
 8001882:	d104      	bne.n	800188e <HAL_PCD_IRQHandler+0x916>
      hpcd->LPM_State = LPM_L0;
 8001884:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001888:	4620      	mov	r0, r4
 800188a:	f003 f97f 	bl	8004b8c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800188e:	4620      	mov	r0, r4
 8001890:	f003 f8a6 	bl	80049e0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800189a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189e:	e7cb      	b.n	8001838 <HAL_PCD_IRQHandler+0x8c0>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018a0:	0505      	lsls	r5, r0, #20
 80018a2:	d51b      	bpl.n	80018dc <HAL_PCD_IRQHandler+0x964>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018a4:	6822      	ldr	r2, [r4, #0]
 80018a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018c4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      HAL_PCD_SuspendCallback(hpcd);
 80018d2:	4620      	mov	r0, r4
 80018d4:	f003 f874 	bl	80049c0 <HAL_PCD_SuspendCallback>
 80018d8:	f7ff bb60 	b.w	8000f9c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80018dc:	0601      	lsls	r1, r0, #24
 80018de:	d52b      	bpl.n	8001938 <HAL_PCD_IRQHandler+0x9c0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80018e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ea:	0412      	lsls	r2, r2, #16
 80018ec:	0c12      	lsrs	r2, r2, #16
 80018ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80018f2:	f894 22e0 	ldrb.w	r2, [r4, #736]	; 0x2e0
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d1eb      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x95a>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018fa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80018fe:	b292      	uxth	r2, r2
 8001900:	f042 0204 	orr.w	r2, r2, #4
 8001904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001908:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800190c:	b292      	uxth	r2, r2
 800190e:	f042 0208 	orr.w	r2, r2, #8
      hpcd->LPM_State = LPM_L1;
 8001912:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8001918:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800191c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001920:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8001924:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001928:	4620      	mov	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800192a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
}
 800192e:	b003      	add	sp, #12
 8001930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001934:	f003 b92a 	b.w	8004b8c <HAL_PCDEx_LPM_Callback>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001938:	0582      	lsls	r2, r0, #22
 800193a:	d50d      	bpl.n	8001958 <HAL_PCD_IRQHandler+0x9e0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001942:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800194e:	4620      	mov	r0, r4
 8001950:	f003 f81f 	bl	8004992 <HAL_PCD_SOFCallback>
    return;
 8001954:	f7ff bb22 	b.w	8000f9c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001958:	05c3      	lsls	r3, r0, #23
 800195a:	f57f ab1f 	bpl.w	8000f9c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001968:	e766      	b.n	8001838 <HAL_PCD_IRQHandler+0x8c0>
 800196a:	bf00      	nop

0800196c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800196c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	4604      	mov	r4, r0
 8001974:	f001 0507 	and.w	r5, r1, #7
 8001978:	f04f 0028 	mov.w	r0, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800197c:	d019      	beq.n	80019b2 <HAL_PCD_EP_Open+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197e:	fb05 0000 	mla	r0, r5, r0, r0
 8001982:	1821      	adds	r1, r4, r0
    ep->is_in = 1U;
 8001984:	2001      	movs	r0, #1
 8001986:	7048      	strb	r0, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8001988:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800198a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800198c:	bf04      	itt	eq
 800198e:	2300      	moveq	r3, #0
 8001990:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001992:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8001994:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001996:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800199a:	2b01      	cmp	r3, #1
 800199c:	d013      	beq.n	80019c6 <HAL_PCD_EP_Open+0x5a>
 800199e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019a0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80019a2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019a6:	f001 fc1f 	bl	80031e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b2:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 0U;
 80019b6:	fb00 4005 	mla	r0, r0, r5, r4
 80019ba:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019bc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80019c0:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 80019c4:	e7e0      	b.n	8001988 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80019c6:	2002      	movs	r0, #2
 80019c8:	e7f2      	b.n	80019b0 <HAL_PCD_EP_Open+0x44>

080019ca <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80019ca:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80019ce:	b510      	push	{r4, lr}
 80019d0:	f001 0207 	and.w	r2, r1, #7
 80019d4:	4604      	mov	r4, r0
 80019d6:	f04f 0328 	mov.w	r3, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80019da:	d013      	beq.n	8001a04 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	fb02 3303 	mla	r3, r2, r3, r3
 80019e0:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80019e2:	2301      	movs	r3, #1
 80019e4:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80019e8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d013      	beq.n	8001a18 <HAL_PCD_EP_Close+0x4e>
 80019f0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80019f4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019f8:	f001 fd5a 	bl	80034b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001a02:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8001a08:	fb03 0302 	mla	r3, r3, r2, r0
 8001a0c:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001a12:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001a16:	e7e6      	b.n	80019e6 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8001a18:	2002      	movs	r0, #2
 8001a1a:	e7f2      	b.n	8001a02 <HAL_PCD_EP_Close+0x38>

08001a1c <HAL_PCD_EP_Receive>:
{
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8001a22:	2628      	movs	r6, #40	; 0x28
 8001a24:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_count = 0U;
 8001a28:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a2a:	f884 1168 	strb.w	r1, [r4, #360]	; 0x168
  ep->xfer_len = len;
 8001a2e:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8001a32:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001a36:	f884 5169 	strb.w	r5, [r4, #361]	; 0x169
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a3a:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 8001a3e:	6800      	ldr	r0, [r0, #0]
 8001a40:	f001 fea0 	bl	8003784 <USB_EPStartXfer>
}
 8001a44:	4628      	mov	r0, r5
 8001a46:	bd70      	pop	{r4, r5, r6, pc}

08001a48 <HAL_PCD_EP_Transmit>:
{
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	f001 0507 	and.w	r5, r1, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	2428      	movs	r4, #40	; 0x28
 8001a50:	fb05 4104 	mla	r1, r5, r4, r4
  ep->xfer_buff = pBuf;
 8001a54:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
 8001a58:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_len_db = len;
 8001a5c:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001a5e:	2300      	movs	r3, #0
  ep->xfer_fill_db = 1U;
 8001a60:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8001a62:	6463      	str	r3, [r4, #68]	; 0x44
 8001a64:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  ep->xfer_fill_db = 1U;
 8001a68:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 8001a6c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  if((recv_buffer[0]&0x02) != 0x02)
 8001a70:	4c0b      	ldr	r4, [pc, #44]	; (8001aa0 <HAL_PCD_EP_Transmit+0x58>)
  ep->is_in = 1U;
 8001a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a76:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
  if((recv_buffer[0]&0x02) != 0x02)
 8001a7a:	7823      	ldrb	r3, [r4, #0]
 8001a7c:	079d      	lsls	r5, r3, #30
	  InterruptFlag = 1;
 8001a7e:	bf58      	it	pl
 8001a80:	4b08      	ldrpl	r3, [pc, #32]	; (8001aa4 <HAL_PCD_EP_Transmit+0x5c>)
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a82:	4401      	add	r1, r0
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a84:	6800      	ldr	r0, [r0, #0]
	  InterruptFlag = 1;
 8001a86:	bf58      	it	pl
 8001a88:	601a      	strpl	r2, [r3, #0]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a8a:	f001 fe7b 	bl	8003784 <USB_EPStartXfer>
  if((recv_buffer[0]&0x02) != 0x02)
 8001a8e:	7823      	ldrb	r3, [r4, #0]
 8001a90:	079b      	lsls	r3, r3, #30
	  NeedRollBack = 1;
 8001a92:	bf5e      	ittt	pl
 8001a94:	4b04      	ldrpl	r3, [pc, #16]	; (8001aa8 <HAL_PCD_EP_Transmit+0x60>)
 8001a96:	2201      	movpl	r2, #1
 8001a98:	601a      	strpl	r2, [r3, #0]
}
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000170 	.word	0x20000170
 8001aa4:	20000164 	.word	0x20000164
 8001aa8:	20000168 	.word	0x20000168

08001aac <HAL_PCD_EP_SetStall>:
{
 8001aac:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001aae:	6843      	ldr	r3, [r0, #4]
 8001ab0:	f001 0507 	and.w	r5, r1, #7
 8001ab4:	429d      	cmp	r5, r3
{
 8001ab6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab8:	d82a      	bhi.n	8001b10 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8001aba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001abe:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001ac2:	d01b      	beq.n	8001afc <HAL_PCD_EP_SetStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	fb05 3303 	mla	r3, r5, r3, r3
 8001ac8:	18c2      	adds	r2, r0, r3
    ep->is_in = 1U;
 8001aca:	2301      	movs	r3, #1
 8001acc:	7053      	strb	r3, [r2, #1]
  ep->is_stall = 1U;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	7093      	strb	r3, [r2, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ad2:	7015      	strb	r5, [r2, #0]
  __HAL_LOCK(hpcd);
 8001ad4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d01b      	beq.n	8001b14 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001adc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001ade:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	f001 fdb7 	bl	8003656 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ae8:	b925      	cbnz	r5, 8001af4 <HAL_PCD_EP_SetStall+0x48>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001aea:	6820      	ldr	r0, [r4, #0]
 8001aec:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001af0:	f001 fe37 	bl	8003762 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001afa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001afc:	fb03 0201 	mla	r2, r3, r1, r0
    ep->is_in = 0U;
 8001b00:	fb03 0301 	mla	r3, r3, r1, r0
 8001b04:	2100      	movs	r1, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001b06:	f502 72b4 	add.w	r2, r2, #360	; 0x168
    ep->is_in = 0U;
 8001b0a:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
 8001b0e:	e7de      	b.n	8001ace <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7f2      	b.n	8001afa <HAL_PCD_EP_SetStall+0x4e>
  __HAL_LOCK(hpcd);
 8001b14:	2002      	movs	r0, #2
 8001b16:	e7f0      	b.n	8001afa <HAL_PCD_EP_SetStall+0x4e>

08001b18 <HAL_PCD_EP_ClrStall>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b1a:	6843      	ldr	r3, [r0, #4]
 8001b1c:	f001 020f 	and.w	r2, r1, #15
 8001b20:	429a      	cmp	r2, r3
{
 8001b22:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b24:	d826      	bhi.n	8001b74 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001b26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b2a:	f001 0207 	and.w	r2, r1, #7
 8001b2e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001b32:	d015      	beq.n	8001b60 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	fb02 3303 	mla	r3, r2, r3, r3
 8001b38:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8001b3e:	2500      	movs	r5, #0
 8001b40:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b42:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b44:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d015      	beq.n	8001b78 <HAL_PCD_EP_ClrStall+0x60>
 8001b4c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b4e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001b50:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b54:	f001 fd9f 	bl	8003696 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b58:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8001b5c:	4628      	mov	r0, r5
}
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	fb03 0102 	mla	r1, r3, r2, r0
    ep->is_in = 0U;
 8001b64:	fb03 0302 	mla	r3, r3, r2, r0
 8001b68:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8001b6e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001b72:	e7e4      	b.n	8001b3e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7f2      	b.n	8001b5e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	e7f0      	b.n	8001b5e <HAL_PCD_EP_ClrStall+0x46>

08001b7c <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001b7c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	bf18      	it	ne
 8001b82:	f001 0107 	andne.w	r1, r1, #7
{
 8001b86:	b510      	push	{r4, lr}
 8001b88:	f04f 0428 	mov.w	r4, #40	; 0x28
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8c:	bf15      	itete	ne
 8001b8e:	fb01 4404 	mlane	r4, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b92:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	1900      	addne	r0, r0, r4
    ep = &hpcd->OUT_ep[ep_addr];
 8001b98:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b9c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001b9e:	b91a      	cbnz	r2, 8001ba8 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 8001ba0:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001ba2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001bac:	6083      	str	r3, [r0, #8]
 8001bae:	e7f9      	b.n	8001ba4 <HAL_PCDEx_PMAConfig+0x28>

08001bb0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001bb0:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0
  hpcd->lpm_active = 1U;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bbe:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001bcc:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4a02      	ldr	r2, [pc, #8]	; (8001bec <HAL_PWR_EnableBkUpAccess+0xc>)
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	4770      	bx	lr
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_PWREx_GetVoltageRange+0xc>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001bf4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40007000 	.word	0x40007000

08001c00 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0c:	d11d      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c12:	d101      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c14:	2000      	movs	r0, #0
 8001c16:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	6813      	ldr	r3, [r2, #0]
 8001c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2132      	movs	r1, #50	; 0x32
 8001c2a:	434b      	muls	r3, r1
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c34:	6951      	ldr	r1, [r2, #20]
 8001c36:	0549      	lsls	r1, r1, #21
 8001c38:	d500      	bpl.n	8001c3c <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001c3a:	b923      	cbnz	r3, 8001c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3c:	6953      	ldr	r3, [r2, #20]
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	d5e8      	bpl.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
}
 8001c44:	4770      	bx	lr
        wait_loop_index--;
 8001c46:	3b01      	subs	r3, #1
 8001c48:	e7f4      	b.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c4e:	bf1f      	itttt	ne
 8001c50:	6813      	ldrne	r3, [r2, #0]
 8001c52:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001c56:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001c5a:	6013      	strne	r3, [r2, #0]
 8001c5c:	e7da      	b.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000
 8001c64:	20000000 	.word	0x20000000
 8001c68:	000f4240 	.word	0x000f4240

08001c6c <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001c6c:	4a02      	ldr	r2, [pc, #8]	; (8001c78 <HAL_PWREx_EnableVddUSB+0xc>)
 8001c6e:	6853      	ldr	r3, [r2, #4]
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	6053      	str	r3, [r2, #4]
}
 8001c76:	4770      	bx	lr
 8001c78:	40007000 	.word	0x40007000

08001c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c7e:	4d1e      	ldr	r5, [pc, #120]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001c80:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c82:	00da      	lsls	r2, r3, #3
{
 8001c84:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c86:	d518      	bpl.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c88:	f7ff ffb2 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c90:	d123      	bne.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c92:	2c80      	cmp	r4, #128	; 0x80
 8001c94:	d929      	bls.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c96:	2ca0      	cmp	r4, #160	; 0xa0
 8001c98:	bf8c      	ite	hi
 8001c9a:	2402      	movhi	r4, #2
 8001c9c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c9e:	4917      	ldr	r1, [pc, #92]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001ca0:	680a      	ldr	r2, [r1, #0]
 8001ca2:	f022 0207 	bic.w	r2, r2, #7
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001caa:	6808      	ldr	r0, [r1, #0]
 8001cac:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001cb0:	1b00      	subs	r0, r0, r4
 8001cb2:	bf18      	it	ne
 8001cb4:	2001      	movne	r0, #1
 8001cb6:	b003      	add	sp, #12
 8001cb8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cc2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ccc:	f7ff ff90 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cd8:	e7d8      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001cda:	2c80      	cmp	r4, #128	; 0x80
 8001cdc:	d807      	bhi.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001cde:	d008      	beq.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001ce0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001ce4:	425c      	negs	r4, r3
 8001ce6:	415c      	adcs	r4, r3
 8001ce8:	e7d9      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cea:	2400      	movs	r4, #0
 8001cec:	e7d7      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cee:	2403      	movs	r4, #3
 8001cf0:	e7d5      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf2:	2402      	movs	r4, #2
 8001cf4:	e7d3      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40022000 	.word	0x40022000

08001d00 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001d02:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d06:	f012 020c 	ands.w	r2, r2, #12
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x18>
 8001d0c:	2a0c      	cmp	r2, #12
 8001d0e:	d115      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d14:	2901      	cmp	r1, #1
 8001d16:	d118      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d18:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001d1a:	481d      	ldr	r0, [pc, #116]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d1c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d1e:	bf55      	itete	pl
 8001d20:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d24:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d26:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d2a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001d2e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d32:	b34a      	cbz	r2, 8001d88 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d34:	2a0c      	cmp	r2, #12
 8001d36:	d009      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x4c>
 8001d38:	2000      	movs	r0, #0
  return sysclockfreq;
 8001d3a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3c:	2a04      	cmp	r2, #4
 8001d3e:	d022      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d40:	2a08      	cmp	r2, #8
 8001d42:	4814      	ldr	r0, [pc, #80]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d44:	bf18      	it	ne
 8001d46:	2000      	movne	r0, #0
 8001d48:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d4a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001d52:	2a02      	cmp	r2, #2
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x82>
 8001d56:	490f      	ldr	r1, [pc, #60]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d58:	2a03      	cmp	r2, #3
 8001d5a:	bf08      	it	eq
 8001d5c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001d66:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d68:	68d8      	ldr	r0, [r3, #12]
 8001d6a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d6e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d72:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d74:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d76:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d78:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001d7c:	fbb2 f0f0 	udiv	r0, r2, r0
 8001d80:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d84:	e7eb      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08004d64 	.word	0x08004d64
 8001d94:	007a1200 	.word	0x007a1200
 8001d98:	00f42400 	.word	0x00f42400

08001d9c <HAL_RCC_OscConfig>:
{
 8001d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001da0:	4605      	mov	r5, r0
 8001da2:	b908      	cbnz	r0, 8001da8 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e047      	b.n	8001e38 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da8:	4c94      	ldr	r4, [pc, #592]	; (8001ffc <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001daa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dac:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dae:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dba:	d575      	bpl.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbc:	b11e      	cbz	r6, 8001dc6 <HAL_RCC_OscConfig+0x2a>
 8001dbe:	2e0c      	cmp	r6, #12
 8001dc0:	d154      	bne.n	8001e6c <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dc2:	2f01      	cmp	r7, #1
 8001dc4:	d152      	bne.n	8001e6c <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	0798      	lsls	r0, r3, #30
 8001dca:	d502      	bpl.n	8001dd2 <HAL_RCC_OscConfig+0x36>
 8001dcc:	69ab      	ldr	r3, [r5, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0e8      	beq.n	8001da4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	6a28      	ldr	r0, [r5, #32]
 8001dd6:	0719      	lsls	r1, r3, #28
 8001dd8:	bf56      	itet	pl
 8001dda:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001dde:	6823      	ldrmi	r3, [r4, #0]
 8001de0:	091b      	lsrpl	r3, r3, #4
 8001de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de6:	4298      	cmp	r0, r3
 8001de8:	d929      	bls.n	8001e3e <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dea:	f7ff ff47 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d1d8      	bne.n	8001da4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	6a2a      	ldr	r2, [r5, #32]
 8001dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e02:	4313      	orrs	r3, r2
 8001e04:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	69ea      	ldr	r2, [r5, #28]
 8001e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e12:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e14:	f7ff ff74 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001e18:	68a3      	ldr	r3, [r4, #8]
 8001e1a:	4a79      	ldr	r2, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x264>)
 8001e1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	40d8      	lsrs	r0, r3
 8001e28:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x268>)
 8001e2a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f7fe fe7c 	bl	8000b2c <HAL_InitTick>
        if(status != HAL_OK)
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d037      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
}
 8001e38:	b003      	add	sp, #12
 8001e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	6023      	str	r3, [r4, #0]
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4c:	4303      	orrs	r3, r0
 8001e4e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e50:	6863      	ldr	r3, [r4, #4]
 8001e52:	69ea      	ldr	r2, [r5, #28]
 8001e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e5c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5e:	2e00      	cmp	r6, #0
 8001e60:	d1d8      	bne.n	8001e14 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e62:	f7ff ff0b 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d0d4      	beq.n	8001e14 <HAL_RCC_OscConfig+0x78>
 8001e6a:	e79b      	b.n	8001da4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e6c:	69ab      	ldr	r3, [r5, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03a      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fe99 	bl	8000bb0 <HAL_GetTick>
 8001e7e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	079a      	lsls	r2, r3, #30
 8001e84:	d528      	bpl.n	8001ed8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	6a2a      	ldr	r2, [r5, #32]
 8001e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e96:	4313      	orrs	r3, r2
 8001e98:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9a:	6863      	ldr	r3, [r4, #4]
 8001e9c:	69ea      	ldr	r2, [r5, #28]
 8001e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ea6:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	07d8      	lsls	r0, r3, #31
 8001eac:	d42d      	bmi.n	8001f0a <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	0799      	lsls	r1, r3, #30
 8001eb2:	d46b      	bmi.n	8001f8c <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	0718      	lsls	r0, r3, #28
 8001eb8:	f100 80a8 	bmi.w	800200c <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	f100 80ce 	bmi.w	8002060 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	0699      	lsls	r1, r3, #26
 8001ec8:	f100 8137 	bmi.w	800213a <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ecc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 815d 	bne.w	800218e <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	e7af      	b.n	8001e38 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fe6a 	bl	8000bb0 <HAL_GetTick>
 8001edc:	eba0 0008 	sub.w	r0, r0, r8
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	d9cd      	bls.n	8001e80 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	e7a7      	b.n	8001e38 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fe5e 	bl	8000bb0 <HAL_GetTick>
 8001ef4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	079b      	lsls	r3, r3, #30
 8001efa:	d5d5      	bpl.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efc:	f7fe fe58 	bl	8000bb0 <HAL_GetTick>
 8001f00:	eba0 0008 	sub.w	r0, r0, r8
 8001f04:	2802      	cmp	r0, #2
 8001f06:	d9f6      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x15a>
 8001f08:	e7ec      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f0a:	2e08      	cmp	r6, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17a>
 8001f0e:	2e0c      	cmp	r6, #12
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f12:	2f03      	cmp	r7, #3
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	039a      	lsls	r2, r3, #14
 8001f1a:	d5c8      	bpl.n	8001eae <HAL_RCC_OscConfig+0x112>
 8001f1c:	686b      	ldr	r3, [r5, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1c5      	bne.n	8001eae <HAL_RCC_OscConfig+0x112>
 8001f22:	e73f      	b.n	8001da4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	686b      	ldr	r3, [r5, #4]
 8001f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2a:	d110      	bne.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f34:	f7fe fe3c 	bl	8000bb0 <HAL_GetTick>
 8001f38:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	039b      	lsls	r3, r3, #14
 8001f3e:	d4b6      	bmi.n	8001eae <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fe36 	bl	8000bb0 <HAL_GetTick>
 8001f44:	eba0 0008 	sub.w	r0, r0, r8
 8001f48:	2864      	cmp	r0, #100	; 0x64
 8001f4a:	d9f6      	bls.n	8001f3a <HAL_RCC_OscConfig+0x19e>
 8001f4c:	e7ca      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f52:	d104      	bne.n	8001f5e <HAL_RCC_OscConfig+0x1c2>
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	e7e6      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
 8001f5e:	6822      	ldr	r2, [r4, #0]
 8001f60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f64:	6022      	str	r2, [r4, #0]
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f6c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1e0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8001f72:	f7fe fe1d 	bl	8000bb0 <HAL_GetTick>
 8001f76:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	0398      	lsls	r0, r3, #14
 8001f7c:	d597      	bpl.n	8001eae <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fe17 	bl	8000bb0 <HAL_GetTick>
 8001f82:	eba0 0008 	sub.w	r0, r0, r8
 8001f86:	2864      	cmp	r0, #100	; 0x64
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x1dc>
 8001f8a:	e7ab      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f8c:	2e04      	cmp	r6, #4
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1fc>
 8001f90:	2e0c      	cmp	r6, #12
 8001f92:	d110      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f94:	2f02      	cmp	r7, #2
 8001f96:	d10e      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	0559      	lsls	r1, r3, #21
 8001f9c:	d503      	bpl.n	8001fa6 <HAL_RCC_OscConfig+0x20a>
 8001f9e:	68eb      	ldr	r3, [r5, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f43f aeff 	beq.w	8001da4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	6863      	ldr	r3, [r4, #4]
 8001fa8:	692a      	ldr	r2, [r5, #16]
 8001faa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001fae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001fb2:	6063      	str	r3, [r4, #4]
 8001fb4:	e77e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb6:	68eb      	ldr	r3, [r5, #12]
 8001fb8:	b17b      	cbz	r3, 8001fda <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fdf5 	bl	8000bb0 <HAL_GetTick>
 8001fc6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	055a      	lsls	r2, r3, #21
 8001fcc:	d4eb      	bmi.n	8001fa6 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe fdef 	bl	8000bb0 <HAL_GetTick>
 8001fd2:	1bc0      	subs	r0, r0, r7
 8001fd4:	2802      	cmp	r0, #2
 8001fd6:	d9f7      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x22c>
 8001fd8:	e784      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fde5 	bl	8000bb0 <HAL_GetTick>
 8001fe6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	f57f af62 	bpl.w	8001eb4 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fdde 	bl	8000bb0 <HAL_GetTick>
 8001ff4:	1bc0      	subs	r0, r0, r7
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d9f6      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
 8001ffa:	e773      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08004d4c 	.word	0x08004d4c
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200c:	696b      	ldr	r3, [r5, #20]
 800200e:	b19b      	cbz	r3, 8002038 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8002010:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800201c:	f7fe fdc8 	bl	8000bb0 <HAL_GetTick>
 8002020:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002026:	079a      	lsls	r2, r3, #30
 8002028:	f53f af48 	bmi.w	8001ebc <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fdc0 	bl	8000bb0 <HAL_GetTick>
 8002030:	1bc0      	subs	r0, r0, r7
 8002032:	2802      	cmp	r0, #2
 8002034:	d9f5      	bls.n	8002022 <HAL_RCC_OscConfig+0x286>
 8002036:	e755      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8002038:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002044:	f7fe fdb4 	bl	8000bb0 <HAL_GetTick>
 8002048:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800204a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800204e:	079b      	lsls	r3, r3, #30
 8002050:	f57f af34 	bpl.w	8001ebc <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fdac 	bl	8000bb0 <HAL_GetTick>
 8002058:	1bc0      	subs	r0, r0, r7
 800205a:	2802      	cmp	r0, #2
 800205c:	d9f5      	bls.n	800204a <HAL_RCC_OscConfig+0x2ae>
 800205e:	e741      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002062:	00d8      	lsls	r0, r3, #3
 8002064:	d429      	bmi.n	80020ba <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	65a3      	str	r3, [r4, #88]	; 0x58
 800206e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002078:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	4f96      	ldr	r7, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x53c>)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	05d9      	lsls	r1, r3, #23
 8002082:	d51d      	bpl.n	80020c0 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	68ab      	ldr	r3, [r5, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12b      	bne.n	80020e2 <HAL_RCC_OscConfig+0x346>
 800208a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002096:	f7fe fd8b 	bl	8000bb0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800209e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020a4:	079b      	lsls	r3, r3, #30
 80020a6:	d542      	bpl.n	800212e <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80020a8:	f1b8 0f00 	cmp.w	r8, #0
 80020ac:	f43f af0a 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80020b8:	e704      	b.n	8001ec4 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	f04f 0800 	mov.w	r8, #0
 80020be:	e7dd      	b.n	800207c <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80020c8:	f7fe fd72 	bl	8000bb0 <HAL_GetTick>
 80020cc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	05da      	lsls	r2, r3, #23
 80020d2:	d4d7      	bmi.n	8002084 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7fe fd6c 	bl	8000bb0 <HAL_GetTick>
 80020d8:	eba0 0009 	sub.w	r0, r0, r9
 80020dc:	2802      	cmp	r0, #2
 80020de:	d9f6      	bls.n	80020ce <HAL_RCC_OscConfig+0x332>
 80020e0:	e700      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x358>
 80020e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80020f2:	e7ca      	b.n	800208a <HAL_RCC_OscConfig+0x2ee>
 80020f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002100:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002104:	f022 0204 	bic.w	r2, r2, #4
 8002108:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1c2      	bne.n	8002096 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8002110:	f7fe fd4e 	bl	8000bb0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002118:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800211e:	0798      	lsls	r0, r3, #30
 8002120:	d5c2      	bpl.n	80020a8 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7fe fd45 	bl	8000bb0 <HAL_GetTick>
 8002126:	1bc0      	subs	r0, r0, r7
 8002128:	4548      	cmp	r0, r9
 800212a:	d9f6      	bls.n	800211a <HAL_RCC_OscConfig+0x37e>
 800212c:	e6da      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fd3f 	bl	8000bb0 <HAL_GetTick>
 8002132:	1bc0      	subs	r0, r0, r7
 8002134:	4548      	cmp	r0, r9
 8002136:	d9b3      	bls.n	80020a0 <HAL_RCC_OscConfig+0x304>
 8002138:	e6d4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800213a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800213c:	b19b      	cbz	r3, 8002166 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 800213e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800214a:	f7fe fd31 	bl	8000bb0 <HAL_GetTick>
 800214e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002150:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002154:	079a      	lsls	r2, r3, #30
 8002156:	f53f aeb9 	bmi.w	8001ecc <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215a:	f7fe fd29 	bl	8000bb0 <HAL_GetTick>
 800215e:	1bc0      	subs	r0, r0, r7
 8002160:	2802      	cmp	r0, #2
 8002162:	d9f5      	bls.n	8002150 <HAL_RCC_OscConfig+0x3b4>
 8002164:	e6be      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8002166:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002172:	f7fe fd1d 	bl	8000bb0 <HAL_GetTick>
 8002176:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800217c:	079b      	lsls	r3, r3, #30
 800217e:	f57f aea5 	bpl.w	8001ecc <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002182:	f7fe fd15 	bl	8000bb0 <HAL_GetTick>
 8002186:	1bc0      	subs	r0, r0, r7
 8002188:	2802      	cmp	r0, #2
 800218a:	d9f5      	bls.n	8002178 <HAL_RCC_OscConfig+0x3dc>
 800218c:	e6aa      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800218e:	2b02      	cmp	r3, #2
 8002190:	f040 8088 	bne.w	80022a4 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8002194:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002198:	f003 0103 	and.w	r1, r3, #3
 800219c:	4291      	cmp	r1, r2
 800219e:	d122      	bne.n	80021e6 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80021a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021a6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80021ac:	d11b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ae:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80021b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80021bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80021c4:	d10f      	bne.n	80021e6 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80021c8:	0852      	lsrs	r2, r2, #1
 80021ca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80021ce:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80021d8:	0852      	lsrs	r2, r2, #1
 80021da:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80021de:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80021e4:	d045      	beq.n	8002272 <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e6:	2e0c      	cmp	r6, #12
 80021e8:	f43f addc 	beq.w	8001da4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	015e      	lsls	r6, r3, #5
 80021f0:	f53f add8 	bmi.w	8001da4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80021fc:	f7fe fcd8 	bl	8000bb0 <HAL_GetTick>
 8002200:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	0198      	lsls	r0, r3, #6
 8002206:	d42e      	bmi.n	8002266 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002208:	68e2      	ldr	r2, [r4, #12]
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x540>)
 800220c:	4013      	ands	r3, r2
 800220e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002210:	4313      	orrs	r3, r2
 8002212:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002218:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800221a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800221e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002220:	3a01      	subs	r2, #1
 8002222:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002226:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002230:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002232:	0852      	lsrs	r2, r2, #1
 8002234:	3a01      	subs	r2, #1
 8002236:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800223a:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800224c:	f7fe fcb0 	bl	8000bb0 <HAL_GetTick>
 8002250:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	0199      	lsls	r1, r3, #6
 8002256:	f53f ae3d 	bmi.w	8001ed4 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fca9 	bl	8000bb0 <HAL_GetTick>
 800225e:	1b40      	subs	r0, r0, r5
 8002260:	2802      	cmp	r0, #2
 8002262:	d9f6      	bls.n	8002252 <HAL_RCC_OscConfig+0x4b6>
 8002264:	e63e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fca3 	bl	8000bb0 <HAL_GetTick>
 800226a:	1b80      	subs	r0, r0, r6
 800226c:	2802      	cmp	r0, #2
 800226e:	d9c8      	bls.n	8002202 <HAL_RCC_OscConfig+0x466>
 8002270:	e638      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	019a      	lsls	r2, r3, #6
 8002276:	f53f ae2d 	bmi.w	8001ed4 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002280:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002282:	68e3      	ldr	r3, [r4, #12]
 8002284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002288:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800228a:	f7fe fc91 	bl	8000bb0 <HAL_GetTick>
 800228e:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	019b      	lsls	r3, r3, #6
 8002294:	f53f ae1e 	bmi.w	8001ed4 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fc8a 	bl	8000bb0 <HAL_GetTick>
 800229c:	1b40      	subs	r0, r0, r5
 800229e:	2802      	cmp	r0, #2
 80022a0:	d9f6      	bls.n	8002290 <HAL_RCC_OscConfig+0x4f4>
 80022a2:	e61f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a4:	2e0c      	cmp	r6, #12
 80022a6:	f43f ad7d 	beq.w	8001da4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022b2:	f7fe fc7d 	bl	8000bb0 <HAL_GetTick>
 80022b6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80022be:	d104      	bne.n	80022ca <HAL_RCC_OscConfig+0x52e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022c0:	68e1      	ldr	r1, [r4, #12]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_RCC_OscConfig+0x544>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	60e2      	str	r2, [r4, #12]
 80022c8:	e604      	b.n	8001ed4 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fc71 	bl	8000bb0 <HAL_GetTick>
 80022ce:	1b40      	subs	r0, r0, r5
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d9f1      	bls.n	80022b8 <HAL_RCC_OscConfig+0x51c>
 80022d4:	e606      	b.n	8001ee4 <HAL_RCC_OscConfig+0x148>
 80022d6:	bf00      	nop
 80022d8:	40007000 	.word	0x40007000
 80022dc:	019d808c 	.word	0x019d808c
 80022e0:	feeefffc 	.word	0xfeeefffc

080022e4 <HAL_RCC_ClockConfig>:
{
 80022e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022ea:	4604      	mov	r4, r0
 80022ec:	b910      	cbnz	r0, 80022f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
}
 80022f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_RCC_ClockConfig+0x140>)
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d32c      	bcc.n	800235a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	6821      	ldr	r1, [r4, #0]
 8002302:	0788      	lsls	r0, r1, #30
 8002304:	d434      	bmi.n	8002370 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	07c9      	lsls	r1, r1, #31
 8002308:	d43f      	bmi.n	800238a <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	078a      	lsls	r2, r1, #30
 800230e:	d468      	bmi.n	80023e2 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4a44      	ldr	r2, [pc, #272]	; (8002424 <HAL_RCC_ClockConfig+0x140>)
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	42ab      	cmp	r3, r5
 800231a:	d86f      	bhi.n	80023fc <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	f011 0f04 	tst.w	r1, #4
 8002320:	4d41      	ldr	r5, [pc, #260]	; (8002428 <HAL_RCC_ClockConfig+0x144>)
 8002322:	d177      	bne.n	8002414 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	070b      	lsls	r3, r1, #28
 8002326:	d506      	bpl.n	8002336 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002328:	68ab      	ldr	r3, [r5, #8]
 800232a:	6922      	ldr	r2, [r4, #16]
 800232c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002330:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002334:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002336:	f7ff fce3 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 800233a:	68ab      	ldr	r3, [r5, #8]
 800233c:	4a3b      	ldr	r2, [pc, #236]	; (800242c <HAL_RCC_ClockConfig+0x148>)
 800233e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	40d8      	lsrs	r0, r3
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_ClockConfig+0x14c>)
 8002350:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_RCC_ClockConfig+0x150>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f7fe bbe9 	b.w	8000b2c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	f023 0307 	bic.w	r3, r3, #7
 8002360:	430b      	orrs	r3, r1
 8002362:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002364:	6813      	ldr	r3, [r2, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	428b      	cmp	r3, r1
 800236c:	d1bf      	bne.n	80022ee <HAL_RCC_ClockConfig+0xa>
 800236e:	e7c7      	b.n	8002300 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002370:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x144>)
 8002372:	68a0      	ldr	r0, [r4, #8]
 8002374:	6893      	ldr	r3, [r2, #8]
 8002376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237a:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	bf81      	itttt	hi
 800237e:	6893      	ldrhi	r3, [r2, #8]
 8002380:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002384:	4303      	orrhi	r3, r0
 8002386:	6093      	strhi	r3, [r2, #8]
 8002388:	e7bd      	b.n	8002306 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	6862      	ldr	r2, [r4, #4]
 800238c:	4e26      	ldr	r6, [pc, #152]	; (8002428 <HAL_RCC_ClockConfig+0x144>)
 800238e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002390:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002392:	d11a      	bne.n	80023ca <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002394:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	d0a9      	beq.n	80022ee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239a:	68b3      	ldr	r3, [r6, #8]
 800239c:	f023 0303 	bic.w	r3, r3, #3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80023a4:	f7fe fc04 	bl	8000bb0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023ac:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	68b3      	ldr	r3, [r6, #8]
 80023b0:	6862      	ldr	r2, [r4, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023ba:	d0a6      	beq.n	800230a <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe fbf8 	bl	8000bb0 <HAL_GetTick>
 80023c0:	1bc0      	subs	r0, r0, r7
 80023c2:	4540      	cmp	r0, r8
 80023c4:	d9f3      	bls.n	80023ae <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
 80023c8:	e792      	b.n	80022f0 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	2a02      	cmp	r2, #2
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023d2:	e7e1      	b.n	8002398 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d4:	b912      	cbnz	r2, 80023dc <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	f013 0f02 	tst.w	r3, #2
 80023da:	e7dd      	b.n	8002398 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023e0:	e7da      	b.n	8002398 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_RCC_ClockConfig+0x144>)
 80023e4:	68a0      	ldr	r0, [r4, #8]
 80023e6:	6893      	ldr	r3, [r2, #8]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ee:	bf3f      	itttt	cc
 80023f0:	6893      	ldrcc	r3, [r2, #8]
 80023f2:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80023f6:	4303      	orrcc	r3, r0
 80023f8:	6093      	strcc	r3, [r2, #8]
 80023fa:	e789      	b.n	8002310 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f023 0307 	bic.w	r3, r3, #7
 8002402:	432b      	orrs	r3, r5
 8002404:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	42ab      	cmp	r3, r5
 800240e:	f47f af6e 	bne.w	80022ee <HAL_RCC_ClockConfig+0xa>
 8002412:	e783      	b.n	800231c <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	68ab      	ldr	r3, [r5, #8]
 8002416:	68e2      	ldr	r2, [r4, #12]
 8002418:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800241c:	4313      	orrs	r3, r2
 800241e:	60ab      	str	r3, [r5, #8]
 8002420:	e780      	b.n	8002324 <HAL_RCC_ClockConfig+0x40>
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	08004d4c 	.word	0x08004d4c
 8002430:	20000000 	.word	0x20000000
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x18>)
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002446:	6810      	ldr	r0, [r2, #0]
 8002448:	f003 031f 	and.w	r3, r3, #31
}
 800244c:	40d8      	lsrs	r0, r3
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	08004d5c 	.word	0x08004d5c
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x18>)
 800245e:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 800246a:	6810      	ldr	r0, [r2, #0]
 800246c:	f003 031f 	and.w	r3, r3, #31
}
 8002470:	40d8      	lsrs	r0, r3
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000
 8002478:	08004d5c 	.word	0x08004d5c
 800247c:	20000000 	.word	0x20000000

08002480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002482:	4c42      	ldr	r4, [pc, #264]	; (800258c <RCCEx_PLLSAI1_Config+0x10c>)
 8002484:	68e2      	ldr	r2, [r4, #12]
 8002486:	0793      	lsls	r3, r2, #30
{
 8002488:	4605      	mov	r5, r0
 800248a:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800248c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800248e:	d029      	beq.n	80024e4 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002490:	68e2      	ldr	r2, [r4, #12]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	4282      	cmp	r2, r0
 8002498:	d13c      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x94>
       ||
 800249a:	2a00      	cmp	r2, #0
 800249c:	d03a      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800249e:	68e3      	ldr	r3, [r4, #12]
       ||
 80024a0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024a2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024a6:	3301      	adds	r3, #1
       ||
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d133      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fb7c 	bl	8000bb0 <HAL_GetTick>
 80024b8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	011a      	lsls	r2, r3, #4
 80024be:	d432      	bmi.n	8002526 <RCCEx_PLLSAI1_Config+0xa6>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c0:	68aa      	ldr	r2, [r5, #8]
 80024c2:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	d035      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024c8:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ca:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80024cc:	d14c      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0xe8>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ce:	6929      	ldr	r1, [r5, #16]
 80024d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024d4:	0849      	lsrs	r1, r1, #1
 80024d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024da:	3901      	subs	r1, #1
 80024dc:	4313      	orrs	r3, r2
 80024de:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80024e2:	e030      	b.n	8002546 <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80024e4:	2802      	cmp	r0, #2
 80024e6:	d011      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x8c>
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d015      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x98>
 80024ec:	2801      	cmp	r0, #1
 80024ee:	d111      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	0797      	lsls	r7, r2, #30
 80024f4:	d51d      	bpl.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	68e2      	ldr	r2, [r4, #12]
 80024f8:	6869      	ldr	r1, [r5, #4]
 80024fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80024fe:	3901      	subs	r1, #1
 8002500:	ea42 0300 	orr.w	r3, r2, r0
 8002504:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002508:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 800250a:	e7cf      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002512:	d1f0      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8002514:	2001      	movs	r0, #1
 8002516:	e00c      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	0391      	lsls	r1, r2, #14
 800251c:	d4eb      	bmi.n	80024f6 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002524:	e7f5      	b.n	8002512 <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002526:	f7fe fb43 	bl	8000bb0 <HAL_GetTick>
 800252a:	1bc0      	subs	r0, r0, r7
 800252c:	2802      	cmp	r0, #2
 800252e:	d9c4      	bls.n	80024ba <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8002530:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002534:	6921      	ldr	r1, [r4, #16]
 8002536:	68eb      	ldr	r3, [r5, #12]
 8002538:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
 800253c:	f021 4278 	bic.w	r2, r1, #4160749568	; 0xf8000000
 8002540:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002544:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002546:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800254e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002550:	f7fe fb2e 	bl	8000bb0 <HAL_GetTick>
 8002554:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	d510      	bpl.n	800257e <RCCEx_PLLSAI1_Config+0xfe>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	69aa      	ldr	r2, [r5, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	6123      	str	r3, [r4, #16]
 8002564:	2000      	movs	r0, #0
  return status;
 8002566:	e7e4      	b.n	8002532 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002568:	6969      	ldr	r1, [r5, #20]
 800256a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800256e:	0849      	lsrs	r1, r1, #1
 8002570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002574:	3901      	subs	r1, #1
 8002576:	4313      	orrs	r3, r2
 8002578:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800257c:	e7e3      	b.n	8002546 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800257e:	f7fe fb17 	bl	8000bb0 <HAL_GetTick>
 8002582:	1b80      	subs	r0, r0, r6
 8002584:	2802      	cmp	r0, #2
 8002586:	d9e6      	bls.n	8002556 <RCCEx_PLLSAI1_Config+0xd6>
 8002588:	e7d2      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xb0>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002594:	6805      	ldr	r5, [r0, #0]
 8002596:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800259a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800259c:	d009      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800259e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80025a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80025a4:	d036      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80025a6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80025aa:	d038      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80025ac:	2900      	cmp	r1, #0
 80025ae:	d041      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80025b0:	2501      	movs	r5, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	039e      	lsls	r6, r3, #14
 80025b6:	d552      	bpl.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b8:	4e95      	ldr	r6, [pc, #596]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ba:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80025bc:	00d8      	lsls	r0, r3, #3
 80025be:	d440      	bmi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	65b3      	str	r3, [r6, #88]	; 0x58
 80025c8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025d2:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8002814 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80025d8:	f8d8 3000 	ldr.w	r3, [r8]
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80025e4:	f7fe fae4 	bl	8000bb0 <HAL_GetTick>
 80025e8:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ea:	f8d8 3000 	ldr.w	r3, [r8]
 80025ee:	05d9      	lsls	r1, r3, #23
 80025f0:	d529      	bpl.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 80025f2:	bb7d      	cbnz	r5, 8002654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025fa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80025fe:	f040 80c7 	bne.w	8002790 <HAL_RCCEx_PeriphCLKConfig+0x200>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002602:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002606:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002612:	e01f      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002614:	4a7e      	ldr	r2, [pc, #504]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002616:	68d3      	ldr	r3, [r2, #12]
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800261e:	4a7c      	ldr	r2, [pc, #496]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002622:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002626:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800262a:	430b      	orrs	r3, r1
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002630:	2500      	movs	r5, #0
 8002632:	e7be      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002634:	3004      	adds	r0, #4
 8002636:	f7ff ff23 	bl	8002480 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800263a:	4605      	mov	r5, r0
 800263c:	2800      	cmp	r0, #0
 800263e:	d1b8      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002640:	e7ed      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2700      	movs	r7, #0
 8002644:	e7c6      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe fab3 	bl	8000bb0 <HAL_GetTick>
 800264a:	eba0 0009 	sub.w	r0, r0, r9
 800264e:	2802      	cmp	r0, #2
 8002650:	d9cb      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = HAL_TIMEOUT;
 8002652:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002654:	b11f      	cbz	r7, 800265e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	07df      	lsls	r7, r3, #31
 8002662:	d508      	bpl.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002664:	496a      	ldr	r1, [pc, #424]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002666:	6a20      	ldr	r0, [r4, #32]
 8002668:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800266c:	f022 0203 	bic.w	r2, r2, #3
 8002670:	4302      	orrs	r2, r0
 8002672:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002676:	079e      	lsls	r6, r3, #30
 8002678:	d508      	bpl.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800267a:	4965      	ldr	r1, [pc, #404]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800267c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800267e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002682:	f022 020c 	bic.w	r2, r2, #12
 8002686:	4302      	orrs	r2, r0
 8002688:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800268c:	0698      	lsls	r0, r3, #26
 800268e:	d508      	bpl.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002690:	495f      	ldr	r1, [pc, #380]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002694:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002698:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800269c:	4302      	orrs	r2, r0
 800269e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026a2:	0599      	lsls	r1, r3, #22
 80026a4:	d508      	bpl.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a6:	495a      	ldr	r1, [pc, #360]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80026aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026ae:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80026b2:	4302      	orrs	r2, r0
 80026b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b8:	055a      	lsls	r2, r3, #21
 80026ba:	d508      	bpl.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026bc:	4954      	ldr	r1, [pc, #336]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026c4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026c8:	4302      	orrs	r2, r0
 80026ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ce:	065f      	lsls	r7, r3, #25
 80026d0:	d508      	bpl.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d2:	494f      	ldr	r1, [pc, #316]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80026d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026de:	4302      	orrs	r2, r0
 80026e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e4:	05de      	lsls	r6, r3, #23
 80026e6:	d508      	bpl.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e8:	4949      	ldr	r1, [pc, #292]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80026ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80026f4:	4302      	orrs	r2, r0
 80026f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026fa:	0498      	lsls	r0, r3, #18
 80026fc:	d50f      	bpl.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026fe:	4a44      	ldr	r2, [pc, #272]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002700:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002702:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002706:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800270a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800270c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002714:	d165      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002716:	68d3      	ldr	r3, [r2, #12]
 8002718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	0359      	lsls	r1, r3, #13
 8002722:	d50f      	bpl.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002724:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002726:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002728:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800272c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002730:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002732:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273a:	d15d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	68d3      	ldr	r3, [r2, #12]
 800273e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002742:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	045a      	lsls	r2, r3, #17
 8002748:	d512      	bpl.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800274a:	4931      	ldr	r1, [pc, #196]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800274c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800274e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002752:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002756:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002758:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002760:	d106      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002762:	2102      	movs	r1, #2
 8002764:	1d20      	adds	r0, r4, #4
 8002766:	f7ff fe8b 	bl	8002480 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800276a:	2800      	cmp	r0, #0
 800276c:	bf18      	it	ne
 800276e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	d508      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002778:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800277a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800277e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002782:	430b      	orrs	r3, r1
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002788:	4628      	mov	r0, r5
 800278a:	b003      	add	sp, #12
 800278c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002790:	4293      	cmp	r3, r2
 8002792:	f43f af36 	beq.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x72>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002796:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800279a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027aa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b2:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80027b8:	f8c6 1090 	str.w	r1, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027bc:	f57f af21 	bpl.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x72>
        tickstart = HAL_GetTick();
 80027c0:	f7fe f9f6 	bl	8000bb0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80027c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80027ce:	079b      	lsls	r3, r3, #30
 80027d0:	f53f af17 	bmi.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe f9ec 	bl	8000bb0 <HAL_GetTick>
 80027d8:	eba0 0008 	sub.w	r0, r0, r8
 80027dc:	4548      	cmp	r0, r9
 80027de:	d9f4      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x23a>
 80027e0:	e737      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027e2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027e6:	d19a      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e8:	2101      	movs	r1, #1
 80027ea:	1d20      	adds	r0, r4, #4
 80027ec:	f7ff fe48 	bl	8002480 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80027f0:	2800      	cmp	r0, #0
 80027f2:	bf18      	it	ne
 80027f4:	4605      	movne	r5, r0
 80027f6:	e792      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027fc:	d1a2      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fe:	2101      	movs	r1, #1
 8002800:	1d20      	adds	r0, r4, #4
 8002802:	f7ff fe3d 	bl	8002480 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002806:	2800      	cmp	r0, #0
 8002808:	bf18      	it	ne
 800280a:	4605      	movne	r5, r0
 800280c:	e79a      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000

08002818 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002818:	4a02      	ldr	r2, [pc, #8]	; (8002824 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6013      	str	r3, [r2, #0]
}
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000

08002828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002828:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800282a:	4604      	mov	r4, r0
 800282c:	2800      	cmp	r0, #0
 800282e:	d05f      	beq.n	80028f0 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d158      	bne.n	80028e8 <HAL_SPI_Init+0xc0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002836:	6842      	ldr	r2, [r0, #4]
 8002838:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800283c:	d000      	beq.n	8002840 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800283e:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002844:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002848:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800284c:	b923      	cbnz	r3, 8002858 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800284e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002852:	4620      	mov	r0, r4
 8002854:	f7fe f814 	bl	8000880 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002858:	6825      	ldr	r5, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800285a:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002862:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002864:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	d83f      	bhi.n	80028f4 <HAL_SPI_Init+0xcc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002874:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002878:	d000      	beq.n	800287c <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287a:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	68a6      	ldr	r6, [r4, #8]
 8002880:	69a2      	ldr	r2, [r4, #24]
 8002882:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8002886:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800288a:	4333      	orrs	r3, r6
 800288c:	6926      	ldr	r6, [r4, #16]
 800288e:	f006 0602 	and.w	r6, r6, #2
 8002892:	4333      	orrs	r3, r6
 8002894:	6966      	ldr	r6, [r4, #20]
 8002896:	f006 0601 	and.w	r6, r6, #1
 800289a:	4333      	orrs	r3, r6
 800289c:	f402 7600 	and.w	r6, r2, #512	; 0x200
 80028a0:	4333      	orrs	r3, r6
 80028a2:	69e6      	ldr	r6, [r4, #28]
 80028a4:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80028a8:	4333      	orrs	r3, r6
 80028aa:	6a26      	ldr	r6, [r4, #32]
 80028ac:	f006 0680 	and.w	r6, r6, #128	; 0x80
 80028b0:	4333      	orrs	r3, r6
 80028b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028b4:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 80028b8:	4333      	orrs	r3, r6
 80028ba:	602b      	str	r3, [r5, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028bc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80028be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c0:	f006 0608 	and.w	r6, r6, #8
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	4333      	orrs	r3, r6
 80028ca:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80028ce:	0c12      	lsrs	r2, r2, #16
 80028d0:	430b      	orrs	r3, r1
 80028d2:	f002 0204 	and.w	r2, r2, #4
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4303      	orrs	r3, r0
 80028da:	606b      	str	r3, [r5, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028dc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80028de:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ee:	e7a7      	b.n	8002840 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
 80028f2:	e7f8      	b.n	80028e6 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028f4:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028f6:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80028fa:	e7bd      	b.n	8002878 <HAL_SPI_Init+0x50>

080028fc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002900:	2b01      	cmp	r3, #1
 8002902:	d11f      	bne.n	8002944 <HAL_TIM_Base_Start_IT+0x48>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800290a:	6803      	ldr	r3, [r0, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_TIM_Base_Start_IT+0x4c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d006      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x2c>
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d003      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x2c>
 8002920:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002924:	4293      	cmp	r3, r2
 8002926:	d107      	bne.n	8002938 <HAL_TIM_Base_Start_IT+0x3c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_TIM_Base_Start_IT+0x50>)
 800292c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	2a06      	cmp	r2, #6
 8002930:	d006      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x44>
 8002932:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002936:	d003      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002940:	2000      	movs	r0, #0
}
 8002942:	4770      	bx	lr
    return HAL_ERROR;
 8002944:	2001      	movs	r0, #1
 8002946:	4770      	bx	lr
 8002948:	40012c00 	.word	0x40012c00
 800294c:	00010007 	.word	0x00010007

08002950 <HAL_TIM_OC_DelayElapsedCallback>:
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_IC_CaptureCallback>:
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_TriggerCallback>:
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8002958:	6803      	ldr	r3, [r0, #0]
{
 800295a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800295c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800295e:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002960:	07b2      	lsls	r2, r6, #30
{
 8002962:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002964:	d50d      	bpl.n	8002982 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002966:	07a9      	lsls	r1, r5, #30
 8002968:	d50b      	bpl.n	8002982 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296a:	f06f 0202 	mvn.w	r2, #2
 800296e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002970:	2201      	movs	r2, #1
 8002972:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	079a      	lsls	r2, r3, #30
 8002978:	d074      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x10c>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297a:	f7ff ffea 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	2300      	movs	r3, #0
 8002980:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002982:	0773      	lsls	r3, r6, #29
 8002984:	d510      	bpl.n	80029a8 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002986:	0768      	lsls	r0, r5, #29
 8002988:	d50e      	bpl.n	80029a8 <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f06f 0204 	mvn.w	r2, #4
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002992:	2202      	movs	r2, #2
 8002994:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800299e:	d067      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a0:	f7ff ffd7 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a4:	2300      	movs	r3, #0
 80029a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a8:	0731      	lsls	r1, r6, #28
 80029aa:	d50f      	bpl.n	80029cc <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ac:	072a      	lsls	r2, r5, #28
 80029ae:	d50d      	bpl.n	80029cc <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f06f 0208 	mvn.w	r2, #8
 80029b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b8:	2204      	movs	r2, #4
 80029ba:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c2:	d05b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80029c4:	f7ff ffc5 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c8:	2300      	movs	r3, #0
 80029ca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029cc:	06f0      	lsls	r0, r6, #27
 80029ce:	d510      	bpl.n	80029f2 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029d0:	06e9      	lsls	r1, r5, #27
 80029d2:	d50e      	bpl.n	80029f2 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f06f 0210 	mvn.w	r2, #16
 80029da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029dc:	2208      	movs	r2, #8
 80029de:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e8:	d04e      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	f7ff ffb2 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	2300      	movs	r3, #0
 80029f0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029f2:	07f2      	lsls	r2, r6, #31
 80029f4:	d508      	bpl.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029f6:	07eb      	lsls	r3, r5, #31
 80029f8:	d506      	bpl.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f06f 0201 	mvn.w	r2, #1
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7fd fedc 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a08:	0630      	lsls	r0, r6, #24
 8002a0a:	d508      	bpl.n	8002a1e <HAL_TIM_IRQHandler+0xc6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a0c:	0629      	lsls	r1, r5, #24
 8002a0e:	d506      	bpl.n	8002a1e <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f000 f97e 	bl	8002d1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a1e:	05f2      	lsls	r2, r6, #23
 8002a20:	d508      	bpl.n	8002a34 <HAL_TIM_IRQHandler+0xdc>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a22:	062b      	lsls	r3, r5, #24
 8002a24:	d506      	bpl.n	8002a34 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f000 f974 	bl	8002d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a34:	0670      	lsls	r0, r6, #25
 8002a36:	d508      	bpl.n	8002a4a <HAL_TIM_IRQHandler+0xf2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a38:	0669      	lsls	r1, r5, #25
 8002a3a:	d506      	bpl.n	8002a4a <HAL_TIM_IRQHandler+0xf2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff ff86 	bl	8002956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a4a:	06b2      	lsls	r2, r6, #26
 8002a4c:	d522      	bpl.n	8002a94 <HAL_TIM_IRQHandler+0x13c>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a4e:	06ab      	lsls	r3, r5, #26
 8002a50:	d520      	bpl.n	8002a94 <HAL_TIM_IRQHandler+0x13c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002a60:	f000 b95a 	b.w	8002d18 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a64:	f7ff ff74 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff ff73 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a6e:	e786      	b.n	800297e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a70:	f7ff ff6e 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ff6d 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a7a:	e793      	b.n	80029a4 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7c:	f7ff ff68 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff ff67 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a86:	e79f      	b.n	80029c8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	f7ff ff62 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7ff ff61 	bl	8002954 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a92:	e7ac      	b.n	80029ee <HAL_TIM_IRQHandler+0x96>
}
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a98 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002a9a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	4290      	cmp	r0, r2
{
 8002a9e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	d002      	beq.n	8002aa8 <TIM_Base_SetConfig+0x10>
 8002aa2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aa6:	d109      	bne.n	8002abc <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002aa8:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002ab0:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab4:	d009      	beq.n	8002aca <TIM_Base_SetConfig+0x32>
 8002ab6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aba:	d006      	beq.n	8002aca <TIM_Base_SetConfig+0x32>
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <TIM_Base_SetConfig+0x70>)
 8002abe:	4290      	cmp	r0, r2
 8002ac0:	d003      	beq.n	8002aca <TIM_Base_SetConfig+0x32>
 8002ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ac6:	4290      	cmp	r0, r2
 8002ac8:	d103      	bne.n	8002ad2 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad2:	694a      	ldr	r2, [r1, #20]
 8002ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ada:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	688b      	ldr	r3, [r1, #8]
 8002ade:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae0:	680b      	ldr	r3, [r1, #0]
 8002ae2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <TIM_Base_SetConfig+0x6c>)
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0x62>
 8002aea:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002aee:	4298      	cmp	r0, r3
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0x62>
 8002af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af6:	4298      	cmp	r0, r3
 8002af8:	d101      	bne.n	8002afe <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002afa:	690b      	ldr	r3, [r1, #16]
 8002afc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afe:	2301      	movs	r3, #1
 8002b00:	6143      	str	r3, [r0, #20]
}
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40014000 	.word	0x40014000

08002b0c <HAL_TIM_Base_Init>:
{
 8002b0c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002b0e:	4604      	mov	r4, r0
 8002b10:	b350      	cbz	r0, 8002b68 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b1a:	b91b      	cbnz	r3, 8002b24 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b20:	f7fd ff50 	bl	80009c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b26:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	1d21      	adds	r1, r4, #4
 8002b2e:	f7ff ffb3 	bl	8002a98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8002b38:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002b5e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002b66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
 8002b6a:	e7fc      	b.n	8002b66 <HAL_TIM_Base_Init+0x5a>

08002b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b6c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b6e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b70:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b72:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b76:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002b7a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7c:	6083      	str	r3, [r0, #8]
}
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <HAL_TIM_ConfigClockSource>:
{
 8002b80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
{
 8002b88:	4604      	mov	r4, r0
 8002b8a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002b8e:	f000 808c 	beq.w	8002caa <HAL_TIM_ConfigClockSource+0x12a>
 8002b92:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002b98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b9c:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002ba4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ba6:	680b      	ldr	r3, [r1, #0]
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d04f      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0xcc>
 8002bac:	d832      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x94>
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d064      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0xfc>
 8002bb2:	d816      	bhi.n	8002be2 <HAL_TIM_ConfigClockSource+0x62>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0x54>
 8002bb8:	d80a      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x50>
 8002bba:	f033 0110 	bics.w	r1, r3, #16
 8002bbe:	d009      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002bcc:	4610      	mov	r0, r2
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d1f5      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8002bd4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f043 0307 	orr.w	r3, r3, #7
 8002be0:	e028      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8002be2:	2b50      	cmp	r3, #80	; 0x50
 8002be4:	d1ec      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8002be6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002be8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002bea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bec:	6a03      	ldr	r3, [r0, #32]
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bfe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c02:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c04:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c06:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002c12:	e00f      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	d00d      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xb6>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d00c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xba>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d1cd      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	68cb      	ldr	r3, [r1, #12]
 8002c26:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002c2a:	f7ff ff9f 	bl	8002b6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c2e:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8002c34:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2200      	movs	r2, #0
 8002c38:	e7c2      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8002c3a:	68cb      	ldr	r3, [r1, #12]
 8002c3c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002c40:	f7ff ff94 	bl	8002b6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	6883      	ldr	r3, [r0, #8]
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4a:	e7f3      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8002c4c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4e:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002c50:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002c52:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c54:	f022 0210 	bic.w	r2, r2, #16
 8002c58:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c60:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c68:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c6e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c70:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c76:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002c7a:	e7db      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8002c7c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c80:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	6a03      	ldr	r3, [r0, #32]
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c98:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c9a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c9c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c9e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002ca8:	e7c4      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8002caa:	461a      	mov	r2, r3
 8002cac:	e78e      	b.n	8002bcc <HAL_TIM_ConfigClockSource+0x4c>
 8002cae:	bf00      	nop
 8002cb0:	fffe0088 	.word	0xfffe0088

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f04f 0302 	mov.w	r3, #2
 8002cc0:	d023      	beq.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cc4:	4d12      	ldr	r5, [pc, #72]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002cca:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cce:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd0:	bf02      	ittt	eq
 8002cd2:	684e      	ldreq	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cd4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd8:	4333      	orreq	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cda:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce0:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce2:	42aa      	cmp	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8002ce4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce6:	d005      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002ce8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002cec:	d002      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf6:	f024 0380 	bic.w	r3, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cfa:	430b      	orrs	r3, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cfc:	6093      	str	r3, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	2300      	movs	r3, #0
 8002d06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d0a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40014000 	.word	0x40014000

08002d18 <HAL_TIMEx_CommutCallback>:
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIMEx_BreakCallback>:
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_Break2Callback>:
 8002d1c:	4770      	bx	lr

08002d1e <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	e852 3f00 	ldrex	r3, [r2]
 8002d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002d2c:	6802      	ldr	r2, [r0, #0]
 8002d2e:	2900      	cmp	r1, #0
 8002d30:	d1f5      	bne.n	8002d1e <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	f102 0308 	add.w	r3, r2, #8
 8002d36:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	f102 0c08 	add.w	ip, r2, #8
 8002d42:	e84c 3100 	strex	r1, r3, [ip]
 8002d46:	2900      	cmp	r1, #0
 8002d48:	d1f3      	bne.n	8002d32 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d58:	e842 3100 	strex	r1, r3, [r2]
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	d1f7      	bne.n	8002d50 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	2320      	movs	r3, #32
 8002d62:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	2300      	movs	r3, #0
 8002d68:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d6a:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002d6c:	4770      	bx	lr
	...

08002d70 <UART_SetConfig>:
{
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d74:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d76:	6921      	ldr	r1, [r4, #16]
 8002d78:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d7c:	69c0      	ldr	r0, [r0, #28]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	6961      	ldr	r1, [r4, #20]
 8002d82:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d84:	4967      	ldr	r1, [pc, #412]	; (8002f24 <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	4029      	ands	r1, r5
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68e1      	ldr	r1, [r4, #12]
 8002d92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d9a:	4a63      	ldr	r2, [pc, #396]	; (8002f28 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d9c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d9e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002da0:	bf1c      	itt	ne
 8002da2:	6a22      	ldrne	r2, [r4, #32]
 8002da4:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db0:	4a5e      	ldr	r2, [pc, #376]	; (8002f2c <UART_SetConfig+0x1bc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d116      	bne.n	8002de4 <UART_SetConfig+0x74>
 8002db6:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <UART_SetConfig+0x1c0>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	f200 80a7 	bhi.w	8002f16 <UART_SetConfig+0x1a6>
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <UART_SetConfig+0x1c4>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002dd0:	d170      	bne.n	8002eb4 <UART_SetConfig+0x144>
    switch (clocksource)
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d820      	bhi.n	8002e18 <UART_SetConfig+0xa8>
 8002dd6:	e8df f003 	tbb	[pc, r3]
 8002dda:	a14f      	.short	0xa14f
 8002ddc:	1f681f6b 	.word	0x1f681f6b
 8002de0:	1f1f      	.short	0x1f1f
 8002de2:	53          	.byte	0x53
 8002de3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de4:	4a54      	ldr	r2, [pc, #336]	; (8002f38 <UART_SetConfig+0x1c8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d106      	bne.n	8002df8 <UART_SetConfig+0x88>
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <UART_SetConfig+0x1c0>)
 8002dec:	4a53      	ldr	r2, [pc, #332]	; (8002f3c <UART_SetConfig+0x1cc>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	e7e8      	b.n	8002dca <UART_SetConfig+0x5a>
 8002df8:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <UART_SetConfig+0x1b8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10c      	bne.n	8002e18 <UART_SetConfig+0xa8>
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <UART_SetConfig+0x1c0>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0c:	d017      	beq.n	8002e3e <UART_SetConfig+0xce>
 8002e0e:	d805      	bhi.n	8002e1c <UART_SetConfig+0xac>
 8002e10:	b153      	cbz	r3, 8002e28 <UART_SetConfig+0xb8>
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e16:	d00f      	beq.n	8002e38 <UART_SetConfig+0xc8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e009      	b.n	8002e30 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e20:	d1fa      	bne.n	8002e18 <UART_SetConfig+0xa8>
        pclk = (uint32_t) LSE_VALUE;
 8002e22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e26:	e00b      	b.n	8002e40 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e28:	f7ff fb06 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e2c:	b940      	cbnz	r0, 8002e40 <UART_SetConfig+0xd0>
 8002e2e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002e30:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002e32:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8002e38:	f7fe ff62 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
        break;
 8002e3c:	e7f6      	b.n	8002e2c <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3e:	4840      	ldr	r0, [pc, #256]	; (8002f40 <UART_SetConfig+0x1d0>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002e46:	4283      	cmp	r3, r0
 8002e48:	d8e6      	bhi.n	8002e18 <UART_SetConfig+0xa8>
 8002e4a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002e4e:	d8e3      	bhi.n	8002e18 <UART_SetConfig+0xa8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e50:	0851      	lsrs	r1, r2, #1
 8002e52:	2500      	movs	r5, #0
 8002e54:	468c      	mov	ip, r1
 8002e56:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002e60:	462b      	mov	r3, r5
 8002e62:	4660      	mov	r0, ip
 8002e64:	f7fd f9ba 	bl	80001dc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <UART_SetConfig+0x1d4>)
 8002e6a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d8d2      	bhi.n	8002e18 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	60d8      	str	r0, [r3, #12]
 8002e76:	e7da      	b.n	8002e2e <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e78:	f7ff fade 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0d6      	beq.n	8002e2e <UART_SetConfig+0xbe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e80:	6862      	ldr	r2, [r4, #4]
 8002e82:	0853      	lsrs	r3, r2, #1
 8002e84:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002e88:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002e90:	f1a3 0110 	sub.w	r1, r3, #16
 8002e94:	4291      	cmp	r1, r2
 8002e96:	d8bf      	bhi.n	8002e18 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e98:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002e9c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e9e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ea0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
 8002ea8:	e7c1      	b.n	8002e2e <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002eaa:	f7fe ff29 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
        break;
 8002eae:	e7e5      	b.n	8002e7c <UART_SetConfig+0x10c>
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4823      	ldr	r0, [pc, #140]	; (8002f40 <UART_SetConfig+0x1d0>)
 8002eb2:	e7e5      	b.n	8002e80 <UART_SetConfig+0x110>
    switch (clocksource)
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d8af      	bhi.n	8002e18 <UART_SetConfig+0xa8>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <UART_SetConfig+0x150>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002f07 	.word	0x08002f07
 8002ec8:	08002f13 	.word	0x08002f13
 8002ecc:	08002e19 	.word	0x08002e19
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002e19 	.word	0x08002e19
 8002ed8:	08002e19 	.word	0x08002e19
 8002edc:	08002e19 	.word	0x08002e19
 8002ee0:	08002ee5 	.word	0x08002ee5
 8002ee4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002eee:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002ef6:	f1a0 0210 	sub.w	r2, r0, #16
 8002efa:	e7b8      	b.n	8002e6e <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7ff fa9c 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d094      	beq.n	8002e2e <UART_SetConfig+0xbe>
 8002f04:	e7f0      	b.n	8002ee8 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f06:	f7ff faa9 	bl	800245c <HAL_RCC_GetPCLK2Freq>
        break;
 8002f0a:	e7f9      	b.n	8002f00 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0c:	f7fe fef8 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
        break;
 8002f10:	e7f6      	b.n	8002f00 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 8002f12:	480b      	ldr	r0, [pc, #44]	; (8002f40 <UART_SetConfig+0x1d0>)
 8002f14:	e7e8      	b.n	8002ee8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f16:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f1a:	d1f4      	bne.n	8002f06 <UART_SetConfig+0x196>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f1c:	f7ff fa9e 	bl	800245c <HAL_RCC_GetPCLK2Freq>
        break;
 8002f20:	e7ac      	b.n	8002e7c <UART_SetConfig+0x10c>
 8002f22:	bf00      	nop
 8002f24:	efff69f3 	.word	0xefff69f3
 8002f28:	40008000 	.word	0x40008000
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08004d94 	.word	0x08004d94
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	08004d97 	.word	0x08004d97
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	000ffcff 	.word	0x000ffcff

08002f48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f4a:	071a      	lsls	r2, r3, #28
{
 8002f4c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4e:	d506      	bpl.n	8002f5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f50:	6801      	ldr	r1, [r0, #0]
 8002f52:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f54:	684a      	ldr	r2, [r1, #4]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5a:	4322      	orrs	r2, r4
 8002f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5e:	07dc      	lsls	r4, r3, #31
 8002f60:	d506      	bpl.n	8002f70 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002f66:	684a      	ldr	r2, [r1, #4]
 8002f68:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f6c:	4322      	orrs	r2, r4
 8002f6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f70:	0799      	lsls	r1, r3, #30
 8002f72:	d506      	bpl.n	8002f82 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f74:	6801      	ldr	r1, [r0, #0]
 8002f76:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f78:	684a      	ldr	r2, [r1, #4]
 8002f7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f7e:	4322      	orrs	r2, r4
 8002f80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f82:	075a      	lsls	r2, r3, #29
 8002f84:	d506      	bpl.n	8002f94 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f8a:	684a      	ldr	r2, [r1, #4]
 8002f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f90:	4322      	orrs	r2, r4
 8002f92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f94:	06dc      	lsls	r4, r3, #27
 8002f96:	d506      	bpl.n	8002fa6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f98:	6801      	ldr	r1, [r0, #0]
 8002f9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f9c:	688a      	ldr	r2, [r1, #8]
 8002f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa2:	4322      	orrs	r2, r4
 8002fa4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fa6:	0699      	lsls	r1, r3, #26
 8002fa8:	d506      	bpl.n	8002fb8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002faa:	6801      	ldr	r1, [r0, #0]
 8002fac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002fae:	688a      	ldr	r2, [r1, #8]
 8002fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb4:	4322      	orrs	r2, r4
 8002fb6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb8:	065a      	lsls	r2, r3, #25
 8002fba:	d50f      	bpl.n	8002fdc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fbc:	6801      	ldr	r1, [r0, #0]
 8002fbe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002fc0:	684a      	ldr	r2, [r1, #4]
 8002fc2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002fc6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fcc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fce:	d105      	bne.n	8002fdc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd0:	684a      	ldr	r2, [r1, #4]
 8002fd2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002fd4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002fd8:	4322      	orrs	r2, r4
 8002fda:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	d506      	bpl.n	8002fee <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe0:	6802      	ldr	r2, [r0, #0]
 8002fe2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002fe4:	6853      	ldr	r3, [r2, #4]
 8002fe6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6053      	str	r3, [r2, #4]
}
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <UART_WaitOnFlagUntilTimeout>:
{
 8002ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460f      	mov	r7, r1
 8002ffc:	4616      	mov	r6, r2
 8002ffe:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	6822      	ldr	r2, [r4, #0]
 8003002:	69d3      	ldr	r3, [r2, #28]
 8003004:	ea37 0303 	bics.w	r3, r7, r3
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	42b3      	cmp	r3, r6
 8003010:	d001      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003012:	2000      	movs	r0, #0
 8003014:	e01e      	b.n	8003054 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003016:	f1b9 3fff 	cmp.w	r9, #4294967295
 800301a:	d0f2      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fd fdc8 	bl	8000bb0 <HAL_GetTick>
 8003020:	eba0 0008 	sub.w	r0, r0, r8
 8003024:	4548      	cmp	r0, r9
 8003026:	d825      	bhi.n	8003074 <UART_WaitOnFlagUntilTimeout+0x84>
 8003028:	f1b9 0f00 	cmp.w	r9, #0
 800302c:	d022      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	075a      	lsls	r2, r3, #29
 8003034:	d5e4      	bpl.n	8003000 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003036:	69c5      	ldr	r5, [r0, #28]
 8003038:	f015 0508 	ands.w	r5, r5, #8
 800303c:	d00c      	beq.n	8003058 <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800303e:	2508      	movs	r5, #8
 8003040:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fe6b 	bl	8002d1e <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003048:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800304a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800304e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 8003052:	2001      	movs	r0, #1
}
 8003054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003058:	69c3      	ldr	r3, [r0, #28]
 800305a:	051b      	lsls	r3, r3, #20
 800305c:	d5d0      	bpl.n	8003000 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003062:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff fe5a 	bl	8002d1e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800306a:	2320      	movs	r3, #32
 800306c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003070:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8003074:	2003      	movs	r0, #3
 8003076:	e7ed      	b.n	8003054 <UART_WaitOnFlagUntilTimeout+0x64>

08003078 <UART_CheckIdleState>:
{
 8003078:	b530      	push	{r4, r5, lr}
 800307a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	2500      	movs	r5, #0
{
 800307e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8003084:	f7fd fd94 	bl	8000bb0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003088:	6822      	ldr	r2, [r4, #0]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800308e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003090:	d51c      	bpl.n	80030cc <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003092:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	9003      	str	r0, [sp, #12]
 800309a:	462a      	mov	r2, r5
 800309c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ffa5 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	b180      	cbz	r0, 80030cc <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	e852 3f00 	ldrex	r3, [r2]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	e842 3100 	strex	r1, r3, [r2]
 80030b8:	2900      	cmp	r1, #0
 80030ba:	d1f6      	bne.n	80030aa <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 80030bc:	2320      	movs	r3, #32
 80030be:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80030c2:	2300      	movs	r3, #0
 80030c4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80030c8:	b005      	add	sp, #20
 80030ca:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	0752      	lsls	r2, r2, #29
 80030d2:	d523      	bpl.n	800311c <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80030d8:	9200      	str	r2, [sp, #0]
 80030da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030de:	2200      	movs	r2, #0
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff ff85 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 80030e6:	b1c8      	cbz	r0, 800311c <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	e852 3f00 	ldrex	r3, [r2]
 80030ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d1f5      	bne.n	80030e8 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	f102 0308 	add.w	r3, r2, #8
 8003100:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003104:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	f102 0008 	add.w	r0, r2, #8
 800310c:	e840 3100 	strex	r1, r3, [r0]
 8003110:	2900      	cmp	r1, #0
 8003112:	d1f3      	bne.n	80030fc <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8003114:	2320      	movs	r3, #32
 8003116:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800311a:	e7d1      	b.n	80030c0 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 800311c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003120:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003126:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003128:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 800312a:	e7ca      	b.n	80030c2 <UART_CheckIdleState+0x4a>

0800312c <HAL_UART_Init>:
{
 800312c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800312e:	4604      	mov	r4, r0
 8003130:	b340      	cbz	r0, 8003184 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003134:	b91b      	cbnz	r3, 800313e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003136:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800313a:	f7fd fc7f 	bl	8000a3c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800313e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	2324      	movs	r3, #36	; 0x24
 8003142:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314e:	b113      	cbz	r3, 8003156 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff fef9 	bl	8002f48 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff fe0a 	bl	8002d70 <UART_SetConfig>
 800315c:	2801      	cmp	r0, #1
 800315e:	d011      	beq.n	8003184 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003168:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003170:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003178:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003180:	f7ff bf7a 	b.w	8003078 <UART_CheckIdleState>
}
 8003184:	2001      	movs	r0, #1
 8003186:	bd10      	pop	{r4, pc}

08003188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003188:	b084      	sub	sp, #16
 800318a:	a801      	add	r0, sp, #4
 800318c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003190:	b004      	add	sp, #16
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr

08003196 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003196:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003198:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 800319c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80031a0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	4770      	bx	lr

080031a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80031a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80031ac:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80031b0:	045b      	lsls	r3, r3, #17
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80031b8:	2000      	movs	r0, #0
 80031ba:	4770      	bx	lr

080031bc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80031bc:	2000      	movs	r0, #0
 80031be:	4770      	bx	lr

080031c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031c0:	b084      	sub	sp, #16
 80031c2:	b510      	push	{r4, lr}
 80031c4:	ac03      	add	r4, sp, #12
 80031c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80031ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80031da:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 80031dc:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80031e0:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	4770      	bx	lr

080031e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031ea:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80031ec:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031ee:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80031f2:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80031f6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80031fa:	0424      	lsls	r4, r4, #16
{
 80031fc:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031fe:	462a      	mov	r2, r5
 8003200:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8003202:	2e03      	cmp	r6, #3
 8003204:	d853      	bhi.n	80032ae <USB_ActivateEndpoint+0xc6>
 8003206:	e8df f006 	tbb	[pc, r6]
 800320a:	4f02      	.short	0x4f02
 800320c:	4b4d      	.short	0x4b4d
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800320e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003212:	4630      	mov	r0, r6
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003214:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003218:	ea44 040c 	orr.w	r4, r4, ip
 800321c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003220:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003224:	f8df e284 	ldr.w	lr, [pc, #644]	; 80034ac <USB_ActivateEndpoint+0x2c4>
 8003228:	b2a4      	uxth	r4, r4
 800322a:	ea04 040e 	and.w	r4, r4, lr
 800322e:	432c      	orrs	r4, r5
 8003230:	ea4c 0404 	orr.w	r4, ip, r4
 8003234:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8003238:	7b0c      	ldrb	r4, [r1, #12]
 800323a:	eb03 07c5 	add.w	r7, r3, r5, lsl #3
 800323e:	2c00      	cmp	r4, #0
 8003240:	f040 8087 	bne.w	8003352 <USB_ActivateEndpoint+0x16a>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003244:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8003246:	f891 c001 	ldrb.w	ip, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800324a:	0864      	lsrs	r4, r4, #1
 800324c:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800324e:	f1bc 0f00 	cmp.w	ip, #0
 8003252:	d02e      	beq.n	80032b2 <USB_ActivateEndpoint+0xca>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003254:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003258:	fa17 f181 	uxtah	r1, r7, r1
 800325c:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003260:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003264:	0649      	lsls	r1, r1, #25
 8003266:	d50a      	bpl.n	800327e <USB_ActivateEndpoint+0x96>
 8003268:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800326c:	b289      	uxth	r1, r1
 800326e:	ea01 010e 	and.w	r1, r1, lr
 8003272:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003276:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800327a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800327e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003282:	4c88      	ldr	r4, [pc, #544]	; (80034a4 <USB_ActivateEndpoint+0x2bc>)
 8003284:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003286:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003288:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800328c:	d001      	beq.n	8003292 <USB_ActivateEndpoint+0xaa>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800328e:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003292:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003296:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800329a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800329e:	e0b8      	b.n	8003412 <USB_ActivateEndpoint+0x22a>
      wEpRegVal |= USB_EP_INTERRUPT;
 80032a0:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80032a4:	2000      	movs	r0, #0
      break;
 80032a6:	e7b5      	b.n	8003214 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80032a8:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 80032ac:	e7fa      	b.n	80032a4 <USB_ActivateEndpoint+0xbc>
  switch (ep->type)
 80032ae:	2001      	movs	r0, #1
 80032b0:	e7b0      	b.n	8003214 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032b2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80032b6:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032b8:	fa17 f686 	uxtah	r6, r7, r6
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80032bc:	293e      	cmp	r1, #62	; 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032be:	f8a6 4404 	strh.w	r4, [r6, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80032c2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80032c6:	fa17 f484 	uxtah	r4, r7, r4
 80032ca:	f8b4 6406 	ldrh.w	r6, [r4, #1030]	; 0x406
 80032ce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80032d2:	f8a4 6406 	strh.w	r6, [r4, #1030]	; 0x406
 80032d6:	d92b      	bls.n	8003330 <USB_ActivateEndpoint+0x148>
 80032d8:	094e      	lsrs	r6, r1, #5
 80032da:	06cf      	lsls	r7, r1, #27
 80032dc:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 80032e0:	bf08      	it	eq
 80032e2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80032e6:	b289      	uxth	r1, r1
 80032e8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80032ec:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80032f0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80032f4:	b289      	uxth	r1, r1
 80032f6:	f8a4 1406 	strh.w	r1, [r4, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80032fe:	044f      	lsls	r7, r1, #17
 8003300:	d50d      	bpl.n	800331e <USB_ActivateEndpoint+0x136>
 8003302:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003306:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800330a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800330e:	0409      	lsls	r1, r1, #16
 8003310:	0c09      	lsrs	r1, r1, #16
 8003312:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003316:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800331a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800331e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003322:	4c61      	ldr	r4, [pc, #388]	; (80034a8 <USB_ActivateEndpoint+0x2c0>)
 8003324:	b289      	uxth	r1, r1
 8003326:	4021      	ands	r1, r4
      if (ep->num == 0U)
 8003328:	b985      	cbnz	r5, 800334c <USB_ActivateEndpoint+0x164>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800332a:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800332e:	e7b0      	b.n	8003292 <USB_ActivateEndpoint+0xaa>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003330:	b911      	cbnz	r1, 8003338 <USB_ActivateEndpoint+0x150>
 8003332:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003336:	e7d9      	b.n	80032ec <USB_ActivateEndpoint+0x104>
 8003338:	084e      	lsrs	r6, r1, #1
 800333a:	07c9      	lsls	r1, r1, #31
 800333c:	f8b4 1406 	ldrh.w	r1, [r4, #1030]	; 0x406
 8003340:	bf48      	it	mi
 8003342:	3601      	addmi	r6, #1
 8003344:	b289      	uxth	r1, r1
 8003346:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800334a:	e7d3      	b.n	80032f4 <USB_ActivateEndpoint+0x10c>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800334c:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003350:	e79f      	b.n	8003292 <USB_ActivateEndpoint+0xaa>
    if (ep->type == EP_TYPE_BULK)
 8003352:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003354:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8003358:	d15c      	bne.n	8003414 <USB_ActivateEndpoint+0x22c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800335a:	b2a4      	uxth	r4, r4
 800335c:	ea04 040e 	and.w	r4, r4, lr
 8003360:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003364:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003368:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800336c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003370:	890c      	ldrh	r4, [r1, #8]
 8003372:	fa17 f585 	uxtah	r5, r7, r5
 8003376:	0864      	lsrs	r4, r4, #1
 8003378:	0064      	lsls	r4, r4, #1
 800337a:	f8a5 4400 	strh.w	r4, [r5, #1024]	; 0x400
 800337e:	894c      	ldrh	r4, [r1, #10]
 8003380:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003384:	0864      	lsrs	r4, r4, #1
 8003386:	fa17 f585 	uxtah	r5, r7, r5
 800338a:	0064      	lsls	r4, r4, #1
 800338c:	f8a5 4404 	strh.w	r4, [r5, #1028]	; 0x404
    if (ep->is_in == 0U)
 8003390:	7849      	ldrb	r1, [r1, #1]
 8003392:	2900      	cmp	r1, #0
 8003394:	d149      	bne.n	800342a <USB_ActivateEndpoint+0x242>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003396:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800339a:	044e      	lsls	r6, r1, #17
 800339c:	d50d      	bpl.n	80033ba <USB_ActivateEndpoint+0x1d2>
 800339e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80033a2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80033a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80033aa:	0409      	lsls	r1, r1, #16
 80033ac:	0c09      	lsrs	r1, r1, #16
 80033ae:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80033b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80033b6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80033be:	064d      	lsls	r5, r1, #25
 80033c0:	d50d      	bpl.n	80033de <USB_ActivateEndpoint+0x1f6>
 80033c2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80033c6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80033ca:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80033ce:	0409      	lsls	r1, r1, #16
 80033d0:	0c09      	lsrs	r1, r1, #16
 80033d2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80033d6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80033da:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80033e2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80033e6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80033ea:	0409      	lsls	r1, r1, #16
 80033ec:	0c09      	lsrs	r1, r1, #16
 80033ee:	f248 0480 	movw	r4, #32896	; 0x8080
 80033f2:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80033f6:	4321      	orrs	r1, r4
 80033f8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033fc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003400:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003404:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003408:	0409      	lsls	r1, r1, #16
 800340a:	0c09      	lsrs	r1, r1, #16
 800340c:	430c      	orrs	r4, r1
 800340e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003414:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 8003418:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800341c:	0424      	lsls	r4, r4, #16
 800341e:	0c24      	lsrs	r4, r4, #16
 8003420:	ea4c 0c04 	orr.w	ip, ip, r4
 8003424:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 8003428:	e7a0      	b.n	800336c <USB_ActivateEndpoint+0x184>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800342e:	044c      	lsls	r4, r1, #17
 8003430:	d50d      	bpl.n	800344e <USB_ActivateEndpoint+0x266>
 8003432:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003436:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800343a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800343e:	0409      	lsls	r1, r1, #16
 8003440:	0c09      	lsrs	r1, r1, #16
 8003442:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003446:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800344a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800344e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003452:	0649      	lsls	r1, r1, #25
 8003454:	d50d      	bpl.n	8003472 <USB_ActivateEndpoint+0x28a>
 8003456:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800345a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800345e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003462:	0409      	lsls	r1, r1, #16
 8003464:	0c09      	lsrs	r1, r1, #16
 8003466:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800346a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800346e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003472:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003476:	4c0b      	ldr	r4, [pc, #44]	; (80034a4 <USB_ActivateEndpoint+0x2bc>)
 8003478:	b289      	uxth	r1, r1
 800347a:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800347c:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800347e:	bf18      	it	ne
 8003480:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003484:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003488:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800348c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003490:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003494:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003498:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800349c:	0409      	lsls	r1, r1, #16
 800349e:	0c09      	lsrs	r1, r1, #16
 80034a0:	e6f7      	b.n	8003292 <USB_ActivateEndpoint+0xaa>
 80034a2:	bf00      	nop
 80034a4:	ffff8fbf 	.word	0xffff8fbf
 80034a8:	ffffbf8f 	.word	0xffffbf8f
 80034ac:	ffff8f8f 	.word	0xffff8f8f

080034b0 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80034b0:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034b2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80034b4:	7b09      	ldrb	r1, [r1, #12]
 80034b6:	bbd9      	cbnz	r1, 8003530 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80034b8:	b30a      	cbz	r2, 80034fe <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80034be:	0651      	lsls	r1, r2, #25
 80034c0:	d50d      	bpl.n	80034de <USB_DeactivateEndpoint+0x2e>
 80034c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80034c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80034ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034ce:	0412      	lsls	r2, r2, #16
 80034d0:	0c12      	lsrs	r2, r2, #16
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80034da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80034e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80034e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034ea:	0412      	lsls	r2, r2, #16
 80034ec:	0c12      	lsrs	r2, r2, #16
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80034fa:	2000      	movs	r0, #0
 80034fc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003502:	0452      	lsls	r2, r2, #17
 8003504:	d50d      	bpl.n	8003522 <USB_DeactivateEndpoint+0x72>
 8003506:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800350a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800350e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003512:	0412      	lsls	r2, r2, #16
 8003514:	0c12      	lsrs	r2, r2, #16
 8003516:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800351a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800351e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003522:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003526:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800352a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800352e:	e7dc      	b.n	80034ea <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003530:	2a00      	cmp	r2, #0
 8003532:	d14a      	bne.n	80035ca <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003534:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003538:	0451      	lsls	r1, r2, #17
 800353a:	d50d      	bpl.n	8003558 <USB_DeactivateEndpoint+0xa8>
 800353c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003540:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003544:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003548:	0412      	lsls	r2, r2, #16
 800354a:	0c12      	lsrs	r2, r2, #16
 800354c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003554:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003558:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800355c:	0652      	lsls	r2, r2, #25
 800355e:	d50d      	bpl.n	800357c <USB_DeactivateEndpoint+0xcc>
 8003560:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003564:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003568:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800356c:	0412      	lsls	r2, r2, #16
 800356e:	0c12      	lsrs	r2, r2, #16
 8003570:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003574:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003578:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800357c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003580:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003588:	0412      	lsls	r2, r2, #16
 800358a:	0c12      	lsrs	r2, r2, #16
 800358c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003590:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003594:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003598:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800359c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035a4:	0412      	lsls	r2, r2, #16
 80035a6:	0c12      	lsrs	r2, r2, #16
 80035a8:	f248 0180 	movw	r1, #32896	; 0x8080
 80035ac:	430a      	orrs	r2, r1
 80035ae:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035be:	0412      	lsls	r2, r2, #16
 80035c0:	0c12      	lsrs	r2, r2, #16
 80035c2:	4311      	orrs	r1, r2
 80035c4:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80035c8:	e797      	b.n	80034fa <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035ce:	0451      	lsls	r1, r2, #17
 80035d0:	d50d      	bpl.n	80035ee <USB_DeactivateEndpoint+0x13e>
 80035d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035de:	0412      	lsls	r2, r2, #16
 80035e0:	0c12      	lsrs	r2, r2, #16
 80035e2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	d50d      	bpl.n	8003612 <USB_DeactivateEndpoint+0x162>
 80035f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003602:	0412      	lsls	r2, r2, #16
 8003604:	0c12      	lsrs	r2, r2, #16
 8003606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800360e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003612:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003616:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800361a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800361e:	0412      	lsls	r2, r2, #16
 8003620:	0c12      	lsrs	r2, r2, #16
 8003622:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800362a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800362e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003632:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363a:	0412      	lsls	r2, r2, #16
 800363c:	0c12      	lsrs	r2, r2, #16
 800363e:	f248 0180 	movw	r1, #32896	; 0x8080
 8003642:	430a      	orrs	r2, r1
 8003644:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003648:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800364c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003654:	e7b3      	b.n	80035be <USB_DeactivateEndpoint+0x10e>

08003656 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003656:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003658:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800365a:	b18b      	cbz	r3, 8003680 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800365c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003678:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800367c:	2000      	movs	r0, #0
 800367e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003694:	e7ec      	b.n	8003670 <USB_EPSetStall+0x1a>

08003696 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003696:	7b0b      	ldrb	r3, [r1, #12]
 8003698:	bb3b      	cbnz	r3, 80036ea <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800369a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800369c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800369e:	b333      	cbz	r3, 80036ee <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036a4:	065b      	lsls	r3, r3, #25
 80036a6:	d50d      	bpl.n	80036c4 <USB_EPClearStall+0x2e>
 80036a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80036c4:	78cb      	ldrb	r3, [r1, #3]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00f      	beq.n	80036ea <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80036ea:	2000      	movs	r0, #0
 80036ec:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036f2:	045b      	lsls	r3, r3, #17
 80036f4:	d50d      	bpl.n	8003712 <USB_EPClearStall+0x7c>
 80036f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003712:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003726:	e7da      	b.n	80036de <USB_EPClearStall+0x48>

08003728 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003728:	b911      	cbnz	r1, 8003730 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003730:	2000      	movs	r0, #0
 8003732:	4770      	bx	lr

08003734 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8003734:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003740:	b29b      	uxth	r3, r3
 8003742:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003746:	2000      	movs	r0, #0
 8003748:	4770      	bx	lr

0800374a <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800374a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800374e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003752:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003756:	2000      	movs	r0, #0
 8003758:	4770      	bx	lr

0800375a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800375a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800375e:	b280      	uxth	r0, r0
 8003760:	4770      	bx	lr

08003762 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003762:	2000      	movs	r0, #0
 8003764:	4770      	bx	lr

08003766 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800376a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800376c:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003774:	1a40      	subs	r0, r0, r1

  for (count = n; count != 0U; count--)
 8003776:	428b      	cmp	r3, r1
 8003778:	d100      	bne.n	800377c <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800377a:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800377c:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800377e:	520a      	strh	r2, [r1, r0]
    pBuf++;
 8003780:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8003782:	e7f8      	b.n	8003776 <USB_WritePMA+0x10>

08003784 <USB_EPStartXfer>:
{
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8003788:	784a      	ldrb	r2, [r1, #1]
    if (ep->doublebuffer == 0U)
 800378a:	7b0e      	ldrb	r6, [r1, #12]
  if (ep->is_in == 1U)
 800378c:	2a01      	cmp	r2, #1
{
 800378e:	4605      	mov	r5, r0
 8003790:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003792:	f040 811c 	bne.w	80039ce <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8003796:	f8d1 a010 	ldr.w	sl, [r1, #16]
 800379a:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800379c:	6949      	ldr	r1, [r1, #20]
 800379e:	4557      	cmp	r7, sl
 80037a0:	bf28      	it	cs
 80037a2:	4657      	movcs	r7, sl
    if (ep->doublebuffer == 0U)
 80037a4:	bb16      	cbnz	r6, 80037ec <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037a6:	b2bf      	uxth	r7, r7
 80037a8:	88e2      	ldrh	r2, [r4, #6]
 80037aa:	463b      	mov	r3, r7
 80037ac:	f7ff ffdb 	bl	8003766 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037b0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80037b4:	7823      	ldrb	r3, [r4, #0]
 80037b6:	f205 4102 	addw	r1, r5, #1026	; 0x402
 80037ba:	fa11 f282 	uxtah	r2, r1, r2
 80037be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80037c2:	8017      	strh	r7, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80037c4:	7822      	ldrb	r2, [r4, #0]
 80037c6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
}
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 80037ec:	78e3      	ldrb	r3, [r4, #3]
        if (ep->xfer_len_db > ep->maxpacket)
 80037ee:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037f0:	f894 c000 	ldrb.w	ip, [r4]
      if (ep->type == EP_TYPE_BULK)
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f040 80d3 	bne.w	80039a0 <USB_EPStartXfer+0x21c>
        if (ep->xfer_len_db > ep->maxpacket)
 80037fa:	45b2      	cmp	sl, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037fc:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8003800:	f080 80b7 	bcs.w	8003972 <USB_EPStartXfer+0x1ee>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003804:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003808:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800380c:	0412      	lsls	r2, r2, #16
 800380e:	0c12      	lsrs	r2, r2, #16
 8003810:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003818:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800381c:	f830 802c 	ldrh.w	r8, [r0, ip, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003820:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003824:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003826:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800382a:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 800382c:	eb01 0907 	add.w	r9, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003830:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003832:	d051      	beq.n	80038d8 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003834:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 8003838:	fa1e f282 	uxtah	r2, lr, r2
 800383c:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003840:	8962      	ldrh	r2, [r4, #10]
 8003842:	f7ff ff90 	bl	8003766 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003846:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003848:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 800384a:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 800384e:	bf36      	itet	cc
 8003850:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8003852:	2300      	movcs	r3, #0
 8003854:	463e      	movcc	r6, r7
 8003856:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003858:	b2b3      	uxth	r3, r6
 800385a:	bb82      	cbnz	r2, 80038be <USB_EPStartXfer+0x13a>
 800385c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003860:	7821      	ldrb	r1, [r4, #0]
 8003862:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8003866:	fa10 f282 	uxtah	r2, r0, r2
 800386a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800386e:	2e3e      	cmp	r6, #62	; 0x3e
 8003870:	8811      	ldrh	r1, [r2, #0]
 8003872:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003876:	8011      	strh	r1, [r2, #0]
 8003878:	d914      	bls.n	80038a4 <USB_EPStartXfer+0x120>
 800387a:	8811      	ldrh	r1, [r2, #0]
 800387c:	0970      	lsrs	r0, r6, #5
 800387e:	06f6      	lsls	r6, r6, #27
 8003880:	bf08      	it	eq
 8003882:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003886:	b289      	uxth	r1, r1
 8003888:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800388c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003890:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003894:	b289      	uxth	r1, r1
 8003896:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003898:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800389a:	4649      	mov	r1, r9
 800389c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800389e:	f7ff ff62 	bl	8003766 <USB_WritePMA>
 80038a2:	e78f      	b.n	80037c4 <USB_EPStartXfer+0x40>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038a4:	b90e      	cbnz	r6, 80038aa <USB_EPStartXfer+0x126>
 80038a6:	8811      	ldrh	r1, [r2, #0]
 80038a8:	e7f0      	b.n	800388c <USB_EPStartXfer+0x108>
 80038aa:	07f1      	lsls	r1, r6, #31
 80038ac:	8811      	ldrh	r1, [r2, #0]
 80038ae:	ea4f 0056 	mov.w	r0, r6, lsr #1
 80038b2:	bf48      	it	mi
 80038b4:	3001      	addmi	r0, #1
 80038b6:	b289      	uxth	r1, r1
 80038b8:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80038bc:	e7ea      	b.n	8003894 <USB_EPStartXfer+0x110>
 80038be:	2a01      	cmp	r2, #1
 80038c0:	d1ea      	bne.n	8003898 <USB_EPStartXfer+0x114>
 80038c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80038c6:	7821      	ldrb	r1, [r4, #0]
 80038c8:	f205 4002 	addw	r0, r5, #1026	; 0x402
 80038cc:	fa10 f282 	uxtah	r2, r0, r2
 80038d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80038d4:	8013      	strh	r3, [r2, #0]
 80038d6:	e7df      	b.n	8003898 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038d8:	f200 4e02 	addw	lr, r0, #1026	; 0x402
 80038dc:	fa1e f282 	uxtah	r2, lr, r2
 80038e0:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038e4:	8922      	ldrh	r2, [r4, #8]
 80038e6:	f7ff ff3e 	bl	8003766 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80038ea:	45b2      	cmp	sl, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038ec:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 80038ee:	f8c4 9014 	str.w	r9, [r4, #20]
              ep->xfer_len_db -= len;
 80038f2:	bf36      	itet	cc
 80038f4:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80038f6:	4643      	movcs	r3, r8
 80038f8:	463e      	movcc	r6, r7
 80038fa:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038fc:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038fe:	bb5a      	cbnz	r2, 8003958 <USB_EPStartXfer+0x1d4>
 8003900:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003904:	7821      	ldrb	r1, [r4, #0]
 8003906:	f205 4006 	addw	r0, r5, #1030	; 0x406
 800390a:	fa10 f282 	uxtah	r2, r0, r2
 800390e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003912:	2e3e      	cmp	r6, #62	; 0x3e
 8003914:	8811      	ldrh	r1, [r2, #0]
 8003916:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800391a:	8011      	strh	r1, [r2, #0]
 800391c:	d910      	bls.n	8003940 <USB_EPStartXfer+0x1bc>
 800391e:	8811      	ldrh	r1, [r2, #0]
 8003920:	0970      	lsrs	r0, r6, #5
 8003922:	06f7      	lsls	r7, r6, #27
 8003924:	bf08      	it	eq
 8003926:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800392a:	b289      	uxth	r1, r1
 800392c:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003930:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003934:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003938:	b289      	uxth	r1, r1
 800393a:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800393c:	8962      	ldrh	r2, [r4, #10]
 800393e:	e7ac      	b.n	800389a <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003940:	b90e      	cbnz	r6, 8003946 <USB_EPStartXfer+0x1c2>
 8003942:	8811      	ldrh	r1, [r2, #0]
 8003944:	e7f4      	b.n	8003930 <USB_EPStartXfer+0x1ac>
 8003946:	8811      	ldrh	r1, [r2, #0]
 8003948:	0870      	lsrs	r0, r6, #1
 800394a:	07f6      	lsls	r6, r6, #31
 800394c:	bf48      	it	mi
 800394e:	3001      	addmi	r0, #1
 8003950:	b289      	uxth	r1, r1
 8003952:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003956:	e7ef      	b.n	8003938 <USB_EPStartXfer+0x1b4>
 8003958:	2a01      	cmp	r2, #1
 800395a:	d1ef      	bne.n	800393c <USB_EPStartXfer+0x1b8>
 800395c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003960:	7821      	ldrb	r1, [r4, #0]
 8003962:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003966:	fa10 f282 	uxtah	r2, r0, r2
 800396a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800396e:	8013      	strh	r3, [r2, #0]
 8003970:	e7e4      	b.n	800393c <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003972:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800397a:	0412      	lsls	r2, r2, #16
 800397c:	0c12      	lsrs	r2, r2, #16
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003986:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800398a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800398e:	f200 4302 	addw	r3, r0, #1026	; 0x402
 8003992:	fa13 f282 	uxtah	r2, r3, r2
 8003996:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003998:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800399c:	8922      	ldrh	r2, [r4, #8]
 800399e:	e77e      	b.n	800389e <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039a0:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
        ep->xfer_len_db -= len;
 80039a4:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039a6:	f012 0f40 	tst.w	r2, #64	; 0x40
        ep->xfer_len_db -= len;
 80039aa:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80039b0:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039b2:	d007      	beq.n	80039c4 <USB_EPStartXfer+0x240>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039b4:	f200 4606 	addw	r6, r0, #1030	; 0x406
 80039b8:	fa16 f282 	uxtah	r2, r6, r2
 80039bc:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039c0:	8962      	ldrh	r2, [r4, #10]
 80039c2:	e76c      	b.n	800389e <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039c4:	f200 4602 	addw	r6, r0, #1026	; 0x402
 80039c8:	fa16 f282 	uxtah	r2, r6, r2
 80039cc:	e7e4      	b.n	8003998 <USB_EPStartXfer+0x214>
    if (ep->doublebuffer == 0U)
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d13c      	bne.n	8003a4c <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 80039d2:	698a      	ldr	r2, [r1, #24]
 80039d4:	690b      	ldr	r3, [r1, #16]
 80039d6:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 80039d8:	bf84      	itt	hi
 80039da:	1ad6      	subhi	r6, r2, r3
 80039dc:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80039de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80039e2:	618e      	str	r6, [r1, #24]
 80039e4:	f200 4006 	addw	r0, r0, #1030	; 0x406
 80039e8:	7809      	ldrb	r1, [r1, #0]
 80039ea:	fa10 f383 	uxtah	r3, r0, r3
 80039ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80039f2:	2a3e      	cmp	r2, #62	; 0x3e
 80039f4:	8819      	ldrh	r1, [r3, #0]
 80039f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80039fa:	8019      	strh	r1, [r3, #0]
 80039fc:	d91a      	bls.n	8003a34 <USB_EPStartXfer+0x2b0>
 80039fe:	0951      	lsrs	r1, r2, #5
 8003a00:	06d0      	lsls	r0, r2, #27
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	bf08      	it	eq
 8003a06:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003a10:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003a14:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a1c:	7822      	ldrb	r2, [r4, #0]
 8003a1e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003a32:	e6d2      	b.n	80037da <USB_EPStartXfer+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003a34:	b90a      	cbnz	r2, 8003a3a <USB_EPStartXfer+0x2b6>
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	e7ea      	b.n	8003a10 <USB_EPStartXfer+0x28c>
 8003a3a:	0851      	lsrs	r1, r2, #1
 8003a3c:	07d2      	lsls	r2, r2, #31
 8003a3e:	881a      	ldrh	r2, [r3, #0]
 8003a40:	bf48      	it	mi
 8003a42:	3101      	addmi	r1, #1
 8003a44:	b292      	uxth	r2, r2
 8003a46:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003a4a:	e7e5      	b.n	8003a18 <USB_EPStartXfer+0x294>
      if (ep->type == EP_TYPE_BULK)
 8003a4c:	78cb      	ldrb	r3, [r1, #3]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d174      	bne.n	8003b3c <USB_EPStartXfer+0x3b8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d14c      	bne.n	8003af0 <USB_EPStartXfer+0x36c>
 8003a56:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003a5a:	780b      	ldrb	r3, [r1, #0]
 8003a5c:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8003a60:	fa11 f282 	uxtah	r2, r1, r2
 8003a64:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003a68:	8813      	ldrh	r3, [r2, #0]
 8003a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a6e:	8013      	strh	r3, [r2, #0]
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	2b3e      	cmp	r3, #62	; 0x3e
 8003a74:	d921      	bls.n	8003aba <USB_EPStartXfer+0x336>
 8003a76:	8811      	ldrh	r1, [r2, #0]
 8003a78:	0958      	lsrs	r0, r3, #5
 8003a7a:	06df      	lsls	r7, r3, #27
 8003a7c:	bf08      	it	eq
 8003a7e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003a82:	b289      	uxth	r1, r1
 8003a84:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003a88:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003a8c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003a90:	b289      	uxth	r1, r1
 8003a92:	8011      	strh	r1, [r2, #0]
 8003a94:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003a98:	7821      	ldrb	r1, [r4, #0]
 8003a9a:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003a9e:	fa10 f282 	uxtah	r2, r0, r2
 8003aa2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa8:	8811      	ldrh	r1, [r2, #0]
 8003aaa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003aae:	8011      	strh	r1, [r2, #0]
 8003ab0:	d80f      	bhi.n	8003ad2 <USB_EPStartXfer+0x34e>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d139      	bne.n	8003b2a <USB_EPStartXfer+0x3a6>
 8003ab6:	8813      	ldrh	r3, [r2, #0]
 8003ab8:	e014      	b.n	8003ae4 <USB_EPStartXfer+0x360>
 8003aba:	b90b      	cbnz	r3, 8003ac0 <USB_EPStartXfer+0x33c>
 8003abc:	8811      	ldrh	r1, [r2, #0]
 8003abe:	e7e3      	b.n	8003a88 <USB_EPStartXfer+0x304>
 8003ac0:	8811      	ldrh	r1, [r2, #0]
 8003ac2:	0858      	lsrs	r0, r3, #1
 8003ac4:	07de      	lsls	r6, r3, #31
 8003ac6:	bf48      	it	mi
 8003ac8:	3001      	addmi	r0, #1
 8003aca:	b289      	uxth	r1, r1
 8003acc:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003ad0:	e7de      	b.n	8003a90 <USB_EPStartXfer+0x30c>
 8003ad2:	0959      	lsrs	r1, r3, #5
 8003ad4:	06d8      	lsls	r0, r3, #27
 8003ad6:	8813      	ldrh	r3, [r2, #0]
 8003ad8:	bf08      	it	eq
 8003ada:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8003af0:	69e3      	ldr	r3, [r4, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d092      	beq.n	8003a1c <USB_EPStartXfer+0x298>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003af6:	7822      	ldrb	r2, [r4, #0]
 8003af8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003afc:	f244 0340 	movw	r3, #16448	; 0x4040
 8003b00:	ea03 0001 	and.w	r0, r3, r1
 8003b04:	438b      	bics	r3, r1
 8003b06:	d001      	beq.n	8003b0c <USB_EPStartXfer+0x388>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d187      	bne.n	8003a1c <USB_EPStartXfer+0x298>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003b0c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b24:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003b28:	e778      	b.n	8003a1c <USB_EPStartXfer+0x298>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003b2a:	0859      	lsrs	r1, r3, #1
 8003b2c:	07db      	lsls	r3, r3, #31
 8003b2e:	8813      	ldrh	r3, [r2, #0]
 8003b30:	bf48      	it	mi
 8003b32:	3101      	addmi	r1, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003b3a:	e7d7      	b.n	8003aec <USB_EPStartXfer+0x368>
      else if (ep->type == EP_TYPE_ISOC)
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d15f      	bne.n	8003c00 <USB_EPStartXfer+0x47c>
        if (ep->xfer_len > ep->maxpacket)
 8003b40:	698b      	ldr	r3, [r1, #24]
 8003b42:	6909      	ldr	r1, [r1, #16]
 8003b44:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 8003b46:	bf8a      	itet	hi
 8003b48:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8003b4a:	2000      	movls	r0, #0
 8003b4c:	460b      	movhi	r3, r1
 8003b4e:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	f47f af63 	bne.w	8003a1c <USB_EPStartXfer+0x298>
 8003b56:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003b5a:	7821      	ldrb	r1, [r4, #0]
 8003b5c:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8003b60:	fa10 f282 	uxtah	r2, r0, r2
 8003b64:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003b68:	2b3e      	cmp	r3, #62	; 0x3e
 8003b6a:	8811      	ldrh	r1, [r2, #0]
 8003b6c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b70:	8011      	strh	r1, [r2, #0]
 8003b72:	d920      	bls.n	8003bb6 <USB_EPStartXfer+0x432>
 8003b74:	8811      	ldrh	r1, [r2, #0]
 8003b76:	0958      	lsrs	r0, r3, #5
 8003b78:	06df      	lsls	r7, r3, #27
 8003b7a:	bf08      	it	eq
 8003b7c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003b80:	b289      	uxth	r1, r1
 8003b82:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003b86:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003b8a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003b8e:	b289      	uxth	r1, r1
 8003b90:	8011      	strh	r1, [r2, #0]
 8003b92:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003b96:	7821      	ldrb	r1, [r4, #0]
 8003b98:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003b9c:	fa10 f282 	uxtah	r2, r0, r2
 8003ba0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ba6:	8811      	ldrh	r1, [r2, #0]
 8003ba8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003bac:	8011      	strh	r1, [r2, #0]
 8003bae:	d80e      	bhi.n	8003bce <USB_EPStartXfer+0x44a>
 8003bb0:	b9eb      	cbnz	r3, 8003bee <USB_EPStartXfer+0x46a>
 8003bb2:	8813      	ldrh	r3, [r2, #0]
 8003bb4:	e014      	b.n	8003be0 <USB_EPStartXfer+0x45c>
 8003bb6:	b90b      	cbnz	r3, 8003bbc <USB_EPStartXfer+0x438>
 8003bb8:	8811      	ldrh	r1, [r2, #0]
 8003bba:	e7e4      	b.n	8003b86 <USB_EPStartXfer+0x402>
 8003bbc:	8811      	ldrh	r1, [r2, #0]
 8003bbe:	0858      	lsrs	r0, r3, #1
 8003bc0:	07de      	lsls	r6, r3, #31
 8003bc2:	bf48      	it	mi
 8003bc4:	3001      	addmi	r0, #1
 8003bc6:	b289      	uxth	r1, r1
 8003bc8:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8003bcc:	e7df      	b.n	8003b8e <USB_EPStartXfer+0x40a>
 8003bce:	0959      	lsrs	r1, r3, #5
 8003bd0:	06d8      	lsls	r0, r3, #27
 8003bd2:	8813      	ldrh	r3, [r2, #0]
 8003bd4:	bf08      	it	eq
 8003bd6:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	8013      	strh	r3, [r2, #0]
 8003bec:	e716      	b.n	8003a1c <USB_EPStartXfer+0x298>
 8003bee:	0859      	lsrs	r1, r3, #1
 8003bf0:	07db      	lsls	r3, r3, #31
 8003bf2:	8813      	ldrh	r3, [r2, #0]
 8003bf4:	bf48      	it	mi
 8003bf6:	3101      	addmi	r1, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003bfe:	e7f3      	b.n	8003be8 <USB_EPStartXfer+0x464>
        return HAL_ERROR;
 8003c00:	2001      	movs	r0, #1
 8003c02:	e5f1      	b.n	80037e8 <USB_EPStartXfer+0x64>

08003c04 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003c08:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c0a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003c0c:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8003c0e:	460c      	mov	r4, r1
 8003c10:	462e      	mov	r6, r5
 8003c12:	1a47      	subs	r7, r0, r1
 8003c14:	193a      	adds	r2, r7, r4
 8003c16:	3402      	adds	r4, #2
 8003c18:	b936      	cbnz	r6, 8003c28 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8003c1a:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8003c1c:	bf44      	itt	mi
 8003c1e:	f830 3015 	ldrhmi.w	r3, [r0, r5, lsl #1]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003c22:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8003c28:	8812      	ldrh	r2, [r2, #0]
 8003c2a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003c2c:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003c30:	0a12      	lsrs	r2, r2, #8
 8003c32:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8003c36:	3e01      	subs	r6, #1
 8003c38:	e7ec      	b.n	8003c14 <USB_ReadPMA+0x10>

08003c3a <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8003c3a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c3e:	33b0      	adds	r3, #176	; 0xb0
 8003c40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c44:	2000      	movs	r0, #0
 8003c46:	f883 0020 	strb.w	r0, [r3, #32]

  return (uint8_t)USBD_OK;
}
 8003c4a:	4770      	bx	lr

08003c4c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003c4c:	b508      	push	{r3, lr}
 8003c4e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003c56:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8003c5a:	b13b      	cbz	r3, 8003c6c <USBD_CUSTOM_HID_DataOut+0x20>

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8003c5c:	f8d0 22c4 	ldr.w	r2, [r0, #708]	; 0x2c4
 8003c60:	7859      	ldrb	r1, [r3, #1]
 8003c62:	68d2      	ldr	r2, [r2, #12]
 8003c64:	7818      	ldrb	r0, [r3, #0]
 8003c66:	4790      	blx	r2
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8003c68:	2000      	movs	r0, #0
}
 8003c6a:	bd08      	pop	{r3, pc}
    return (uint8_t)USBD_FAIL;
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	e7fc      	b.n	8003c6a <USBD_CUSTOM_HID_DataOut+0x1e>

08003c70 <USBD_CUSTOM_HID_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c70:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8003c78:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003c7a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hhid == NULL)
 8003c7e:	b15c      	cbz	r4, 8003c98 <USBD_CUSTOM_HID_EP0_RxReady+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hhid->IsReportAvailable == 1U)
 8003c80:	69e3      	ldr	r3, [r4, #28]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10a      	bne.n	8003c9c <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8003c86:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8003c8a:	7861      	ldrb	r1, [r4, #1]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	7820      	ldrb	r0, [r4, #0]
 8003c90:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8003c92:	2000      	movs	r0, #0
 8003c94:	61e0      	str	r0, [r4, #28]
  }

  return (uint8_t)USBD_OK;
}
 8003c96:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8003c98:	2003      	movs	r0, #3
 8003c9a:	e7fc      	b.n	8003c96 <USBD_CUSTOM_HID_EP0_RxReady+0x26>
  return (uint8_t)USBD_OK;
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7fa      	b.n	8003c96 <USBD_CUSTOM_HID_EP0_RxReady+0x26>

08003ca0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003ca0:	230a      	movs	r3, #10
 8003ca2:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8003ca4:	4800      	ldr	r0, [pc, #0]	; (8003ca8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8003ca6:	4770      	bx	lr
 8003ca8:	2000007c 	.word	0x2000007c

08003cac <USBD_CUSTOM_HID_GetFSCfgDesc>:
{
 8003cac:	b538      	push	{r3, r4, r5, lr}
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8003cae:	2181      	movs	r1, #129	; 0x81
{
 8003cb0:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8003cb2:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x3c>)
 8003cb4:	f000 faaf 	bl	8004216 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8003cb8:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8003cba:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8003cbc:	480a      	ldr	r0, [pc, #40]	; (8003ce8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x3c>)
 8003cbe:	f000 faaa 	bl	8004216 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 8003cc2:	b12c      	cbz	r4, 8003cd0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x24>
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	7122      	strb	r2, [r4, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	7162      	strb	r2, [r4, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8003ccc:	2205      	movs	r2, #5
 8003cce:	71a2      	strb	r2, [r4, #6]
  if (pEpOutDesc != NULL)
 8003cd0:	b128      	cbz	r0, 8003cde <USBD_CUSTOM_HID_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	7102      	strb	r2, [r0, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	7142      	strb	r2, [r0, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8003cda:	2205      	movs	r2, #5
 8003cdc:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8003cde:	2329      	movs	r3, #41	; 0x29
}
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x3c>)
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8003ce2:	802b      	strh	r3, [r5, #0]
}
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000044 	.word	0x20000044

08003cec <USBD_CUSTOM_HID_GetHSCfgDesc>:
 8003cec:	f7ff bfde 	b.w	8003cac <USBD_CUSTOM_HID_GetFSCfgDesc>

08003cf0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
 8003cf0:	f7ff bfdc 	b.w	8003cac <USBD_CUSTOM_HID_GetFSCfgDesc>

08003cf4 <USBD_CUSTOM_HID_Setup>:
{
 8003cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cf6:	f8d0 52d4 	ldr.w	r5, [r0, #724]	; 0x2d4
 8003cfa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  uint16_t status_info = 0U;
 8003cfe:	2200      	movs	r2, #0
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003d00:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  uint16_t status_info = 0U;
 8003d04:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d05a      	beq.n	8003dc2 <USBD_CUSTOM_HID_Setup+0xce>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d0c:	780c      	ldrb	r4, [r1, #0]
 8003d0e:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8003d12:	d02a      	beq.n	8003d6a <USBD_CUSTOM_HID_Setup+0x76>
 8003d14:	2c20      	cmp	r4, #32
 8003d16:	d152      	bne.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
      switch (req->bRequest)
 8003d18:	784a      	ldrb	r2, [r1, #1]
 8003d1a:	3a02      	subs	r2, #2
 8003d1c:	2a09      	cmp	r2, #9
 8003d1e:	d84e      	bhi.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
 8003d20:	e8df f002 	tbb	[pc, r2]
 8003d24:	4d4d0b15 	.word	0x4d4d0b15
 8003d28:	194d4d4d 	.word	0x194d4d4d
 8003d2c:	0511      	.short	0x0511
          hhid->Protocol = (uint8_t)(req->wValue);
 8003d2e:	788a      	ldrb	r2, [r1, #2]
 8003d30:	611a      	str	r2, [r3, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8003d32:	2400      	movs	r4, #0
}
 8003d34:	4620      	mov	r0, r4
 8003d36:	b002      	add	sp, #8
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f103 0110 	add.w	r1, r3, #16
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8003d40:	f000 fcdf 	bl	8004702 <USBD_CtlSendData>
          break;
 8003d44:	e7f5      	b.n	8003d32 <USBD_CUSTOM_HID_Setup+0x3e>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003d46:	884a      	ldrh	r2, [r1, #2]
 8003d48:	0a12      	lsrs	r2, r2, #8
 8003d4a:	615a      	str	r2, [r3, #20]
          break;
 8003d4c:	e7f1      	b.n	8003d32 <USBD_CUSTOM_HID_Setup+0x3e>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f103 0114 	add.w	r1, r3, #20
 8003d54:	e7f4      	b.n	8003d40 <USBD_CUSTOM_HID_Setup+0x4c>
          hhid->IsReportAvailable = 1U;
 8003d56:	2201      	movs	r2, #1
 8003d58:	61da      	str	r2, [r3, #28]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8003d5a:	88ca      	ldrh	r2, [r1, #6]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8003d5c:	2a0f      	cmp	r2, #15
 8003d5e:	bf28      	it	cs
 8003d60:	220f      	movcs	r2, #15
 8003d62:	4619      	mov	r1, r3
 8003d64:	f000 fce2 	bl	800472c <USBD_CtlPrepareRx>
 8003d68:	e7e3      	b.n	8003d32 <USBD_CUSTOM_HID_Setup+0x3e>
      switch (req->bRequest)
 8003d6a:	784e      	ldrb	r6, [r1, #1]
 8003d6c:	2e0b      	cmp	r6, #11
 8003d6e:	d826      	bhi.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <USBD_CUSTOM_HID_Setup+0x84>)
 8003d72:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003da9 	.word	0x08003da9
 8003d7c:	08003d35 	.word	0x08003d35
 8003d80:	08003dbf 	.word	0x08003dbf
 8003d84:	08003dbf 	.word	0x08003dbf
 8003d88:	08003dbf 	.word	0x08003dbf
 8003d8c:	08003dbf 	.word	0x08003dbf
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dbf 	.word	0x08003dbf
 8003d9c:	08003dbf 	.word	0x08003dbf
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003e09 	.word	0x08003e09
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003da8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d106      	bne.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003db0:	2202      	movs	r2, #2
 8003db2:	f10d 0106 	add.w	r1, sp, #6
 8003db6:	f000 fca4 	bl	8004702 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003dba:	4634      	mov	r4, r6
 8003dbc:	e7ba      	b.n	8003d34 <USBD_CUSTOM_HID_Setup+0x40>
            USBD_CtlError(pdev, req);
 8003dbe:	f000 fc79 	bl	80046b4 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8003dc2:	2403      	movs	r4, #3
 8003dc4:	e7b6      	b.n	8003d34 <USBD_CUSTOM_HID_Setup+0x40>
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8003dc6:	884b      	ldrh	r3, [r1, #2]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	2b22      	cmp	r3, #34	; 0x22
 8003dcc:	d109      	bne.n	8003de2 <USBD_CUSTOM_HID_Setup+0xee>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003dce:	88ca      	ldrh	r2, [r1, #6]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8003dd0:	f8d5 32c4 	ldr.w	r3, [r5, #708]	; 0x2c4
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003dd4:	2a49      	cmp	r2, #73	; 0x49
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8003dd6:	6819      	ldr	r1, [r3, #0]
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003dd8:	bf28      	it	cs
 8003dda:	2249      	movcs	r2, #73	; 0x49
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8003ddc:	f000 fc91 	bl	8004702 <USBD_CtlSendData>
 8003de0:	e7a8      	b.n	8003d34 <USBD_CUSTOM_HID_Setup+0x40>
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8003de2:	2b21      	cmp	r3, #33	; 0x21
 8003de4:	d105      	bne.n	8003df2 <USBD_CUSTOM_HID_Setup+0xfe>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8003de6:	88ca      	ldrh	r2, [r1, #6]
              pbuf = USBD_CUSTOM_HID_Desc;
 8003de8:	490b      	ldr	r1, [pc, #44]	; (8003e18 <USBD_CUSTOM_HID_Setup+0x124>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8003dea:	2a09      	cmp	r2, #9
 8003dec:	bf28      	it	cs
 8003dee:	2209      	movcs	r2, #9
 8003df0:	e7f4      	b.n	8003ddc <USBD_CUSTOM_HID_Setup+0xe8>
  uint8_t  *pbuf = NULL;
 8003df2:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8003df4:	460a      	mov	r2, r1
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8003df6:	e7f1      	b.n	8003ddc <USBD_CUSTOM_HID_Setup+0xe8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003df8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003dfc:	2a03      	cmp	r2, #3
 8003dfe:	d1de      	bne.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8003e00:	2201      	movs	r2, #1
 8003e02:	f103 0118 	add.w	r1, r3, #24
 8003e06:	e7e9      	b.n	8003ddc <USBD_CUSTOM_HID_Setup+0xe8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e08:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003e0c:	2a03      	cmp	r2, #3
 8003e0e:	d1d6      	bne.n	8003dbe <USBD_CUSTOM_HID_Setup+0xca>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8003e10:	788a      	ldrb	r2, [r1, #2]
 8003e12:	619a      	str	r2, [r3, #24]
 8003e14:	e78e      	b.n	8003d34 <USBD_CUSTOM_HID_Setup+0x40>
 8003e16:	bf00      	nop
 8003e18:	20000070 	.word	0x20000070

08003e1c <USBD_CUSTOM_HID_DeInit>:
{
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8003e20:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8003e22:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8003e24:	f000 fe4a 	bl	8004abc <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8003e28:	63a5      	str	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 fe45 	bl	8004abc <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8003e32:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8003e36:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8003e3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e3e:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8003e42:	b18a      	cbz	r2, 8003e68 <USBD_CUSTOM_HID_DeInit+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8003e4c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003e50:	33b0      	adds	r3, #176	; 0xb0
 8003e52:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003e56:	f000 fec1 	bl	8004bdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e5a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003e5e:	33b0      	adds	r3, #176	; 0xb0
 8003e60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8003e64:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8003e68:	2000      	movs	r0, #0
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}

08003e6c <USBD_CUSTOM_HID_Init>:
{
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	4604      	mov	r4, r0
  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8003e70:	2024      	movs	r0, #36	; 0x24
 8003e72:	f000 feaf 	bl	8004bd4 <USBD_static_malloc>
  if (hhid == NULL)
 8003e76:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e7a:	33b0      	adds	r3, #176	; 0xb0
  if (hhid == NULL)
 8003e7c:	4605      	mov	r5, r0
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e7e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  if (hhid == NULL)
 8003e82:	b908      	cbnz	r0, 8003e88 <USBD_CUSTOM_HID_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 8003e84:	2002      	movs	r0, #2
}
 8003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8003e88:	2305      	movs	r3, #5
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8003e8a:	2701      	movs	r7, #1
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003e8c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8003e90:	8763      	strh	r3, [r4, #58]	; 0x3a
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8003e92:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8003e96:	2203      	movs	r2, #3
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2181      	movs	r1, #129	; 0x81
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f000 fdfd 	bl	8004a9c <USBD_LL_OpenEP>
  hhid->state = CUSTOM_HID_IDLE;
 8003ea2:	2600      	movs	r6, #0
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4639      	mov	r1, r7
 8003ea8:	2302      	movs	r3, #2
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8003eaa:	8727      	strh	r7, [r4, #56]	; 0x38
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 fdf5 	bl	8004a9c <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8003eb2:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
  hhid->state = CUSTOM_HID_IDLE;
 8003eb6:	f885 6020 	strb.w	r6, [r5, #32]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003eba:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003ebe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8003eca:	230f      	movs	r3, #15
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4639      	mov	r1, r7
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 fe4d 	bl	8004b70 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	e7d5      	b.n	8003e86 <USBD_CUSTOM_HID_Init+0x1a>

08003eda <USBD_CUSTOM_HID_SendReport>:
{
 8003eda:	b538      	push	{r3, r4, r5, lr}
 8003edc:	4613      	mov	r3, r2
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003ede:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8003ee2:	32b0      	adds	r2, #176	; 0xb0
 8003ee4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  if (hhid == NULL)
 8003ee8:	b17a      	cbz	r2, 8003f0a <USBD_CUSTOM_HID_SendReport+0x30>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003eea:	f890 429c 	ldrb.w	r4, [r0, #668]	; 0x29c
 8003eee:	2c03      	cmp	r4, #3
 8003ef0:	d10d      	bne.n	8003f0e <USBD_CUSTOM_HID_SendReport+0x34>
    if (hhid->state == CUSTOM_HID_IDLE)
 8003ef2:	f892 4020 	ldrb.w	r4, [r2, #32]
 8003ef6:	2501      	movs	r5, #1
 8003ef8:	b95c      	cbnz	r4, 8003f12 <USBD_CUSTOM_HID_SendReport+0x38>
      hhid->state = CUSTOM_HID_BUSY;
 8003efa:	f882 5020 	strb.w	r5, [r2, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8003efe:	460a      	mov	r2, r1
 8003f00:	2181      	movs	r1, #129	; 0x81
 8003f02:	f000 fe27 	bl	8004b54 <USBD_LL_Transmit>
}
 8003f06:	4620      	mov	r0, r4
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8003f0a:	2403      	movs	r4, #3
 8003f0c:	e7fb      	b.n	8003f06 <USBD_CUSTOM_HID_SendReport+0x2c>
  return (uint8_t)USBD_OK;
 8003f0e:	2400      	movs	r4, #0
 8003f10:	e7f9      	b.n	8003f06 <USBD_CUSTOM_HID_SendReport+0x2c>
      return (uint8_t)USBD_BUSY;
 8003f12:	462c      	mov	r4, r5
 8003f14:	e7f7      	b.n	8003f06 <USBD_CUSTOM_HID_SendReport+0x2c>
	...

08003f18 <USBD_CUSTOM_HID_ReceivePacket>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003f18:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 8003f1c:	32b0      	adds	r2, #176	; 0xb0
{
 8003f1e:	b510      	push	{r4, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003f20:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003f24:	b174      	cbz	r4, 8003f44 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8003f26:	230f      	movs	r3, #15
 8003f28:	4622      	mov	r2, r4
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f000 fe20 	bl	8004b70 <USBD_LL_PrepareReceive>
  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8003f30:	7820      	ldrb	r0, [r4, #0]
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <USBD_CUSTOM_HID_ReceivePacket+0x34>)
 8003f34:	7018      	strb	r0, [r3, #0]
 8003f36:	f010 0002 	ands.w	r0, r0, #2
 8003f3a:	d105      	bne.n	8003f48 <USBD_CUSTOM_HID_ReceivePacket+0x30>
	  InterruptFlag = 1;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <USBD_CUSTOM_HID_ReceivePacket+0x38>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8003f44:	2003      	movs	r0, #3
 8003f46:	e7fc      	b.n	8003f42 <USBD_CUSTOM_HID_ReceivePacket+0x2a>
  return (uint8_t)USBD_OK;
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e7fa      	b.n	8003f42 <USBD_CUSTOM_HID_ReceivePacket+0x2a>
 8003f4c:	20000170 	.word	0x20000170
 8003f50:	20000164 	.word	0x20000164

08003f54 <USBD_CUSTOM_HID_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  if (fops == NULL)
 8003f54:	b139      	cbz	r1, 8003f66 <USBD_CUSTOM_HID_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8003f56:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003f5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003f5e:	f8c0 12c4 	str.w	r1, [r0, #708]	; 0x2c4

  return (uint8_t)USBD_OK;
 8003f62:	2000      	movs	r0, #0
 8003f64:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003f66:	2003      	movs	r0, #3
}
 8003f68:	4770      	bx	lr

08003f6a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f6a:	b178      	cbz	r0, 8003f8c <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8003f72:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003f76:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003f7a:	b109      	cbz	r1, 8003f80 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003f7c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8003f86:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003f88:	f000 bd3e 	b.w	8004a08 <USBD_LL_Init>

  return ret;
}
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	4770      	bx	lr

08003f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003f90:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 8003f92:	2300      	movs	r3, #0
{
 8003f94:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8003f96:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003f9a:	b181      	cbz	r1, 8003fbe <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003f9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass[0] = pclass;
 8003f9e:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003fa2:	b123      	cbz	r3, 8003fae <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8003fa4:	f10d 0006 	add.w	r0, sp, #6
 8003fa8:	4798      	blx	r3
 8003faa:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8003fae:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8003fb8:	2000      	movs	r0, #0
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	e7fb      	b.n	8003fba <USBD_RegisterClass+0x2a>

08003fc2 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003fc2:	f000 bd5d 	b.w	8004a80 <USBD_LL_Start>

08003fc6 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003fc6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003fca:	b10b      	cbz	r3, 8003fd0 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	4770      	bx	lr

08003fd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fd4:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8003fd6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8003fde:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8003fe0:	bf18      	it	ne
 8003fe2:	2003      	movne	r0, #3
 8003fe4:	bd08      	pop	{r3, pc}

08003fe6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003fe6:	b538      	push	{r3, r4, r5, lr}
 8003fe8:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003fea:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fb55 	bl	800469e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003ff4:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003ff6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8003ffa:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003ffe:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004002:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004006:	f001 031f 	and.w	r3, r1, #31
 800400a:	2b01      	cmp	r3, #1
 800400c:	d008      	beq.n	8004020 <USBD_LL_SetupStage+0x3a>
 800400e:	2b02      	cmp	r3, #2
 8004010:	d00c      	beq.n	800402c <USBD_LL_SetupStage+0x46>
 8004012:	b98b      	cbnz	r3, 8004038 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004014:	4629      	mov	r1, r5
 8004016:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800401c:	f000 b918 	b.w	8004250 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004020:	4629      	mov	r1, r5
 8004022:	4620      	mov	r0, r4
}
 8004024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004028:	f000 ba6e 	b.w	8004508 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800402c:	4629      	mov	r1, r5
 800402e:	4620      	mov	r0, r4
}
 8004030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004034:	f000 ba97 	b.w	8004566 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004038:	4620      	mov	r0, r4
 800403a:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800403e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004042:	f000 bd49 	b.w	8004ad8 <USBD_LL_StallEP>

08004046 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004046:	b570      	push	{r4, r5, r6, lr}
 8004048:	4604      	mov	r4, r0
 800404a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800404c:	bb09      	cbnz	r1, 8004092 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800404e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004052:	2b03      	cmp	r3, #3
 8004054:	d10c      	bne.n	8004070 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004056:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 800405a:	4293      	cmp	r3, r2
 800405c:	d90a      	bls.n	8004074 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800405e:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004060:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004062:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004066:	bf28      	it	cs
 8004068:	461a      	movcs	r2, r3
 800406a:	4631      	mov	r1, r6
 800406c:	f000 fb6b 	bl	8004746 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 8004070:	2000      	movs	r0, #0
 8004072:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004074:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004078:	2b03      	cmp	r3, #3
 800407a:	d106      	bne.n	800408a <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800407c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	b113      	cbz	r3, 800408a <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 8004084:	f8c0 12d4 	str.w	r1, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004088:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800408a:	4620      	mov	r0, r4
 800408c:	f000 fb63 	bl	8004756 <USBD_CtlSendStatus>
 8004090:	e7ee      	b.n	8004070 <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004092:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004096:	2b03      	cmp	r3, #3
 8004098:	d1ea      	bne.n	8004070 <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 800409a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0e5      	beq.n	8004070 <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 80040a4:	2200      	movs	r2, #0
}
 80040a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80040aa:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80040ae:	4718      	bx	r3

080040b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80040b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d141      	bne.n	800413e <USBD_LL_DataInStage+0x8e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80040ba:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80040be:	2a02      	cmp	r2, #2
 80040c0:	d10f      	bne.n	80040e2 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80040c2:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 80040c6:	4295      	cmp	r5, r2
 80040c8:	d914      	bls.n	80040f4 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80040ca:	1aaa      	subs	r2, r5, r2
 80040cc:	9101      	str	r1, [sp, #4]
 80040ce:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80040d0:	4631      	mov	r1, r6
 80040d2:	f000 fb23 	bl	800471c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040d6:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80040d8:	461a      	mov	r2, r3
 80040da:	4619      	mov	r1, r3
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 fd47 	bl	8004b70 <USBD_LL_PrepareReceive>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80040e2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80040e6:	b113      	cbz	r3, 80040ee <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 80040ee:	2000      	movs	r0, #0
 80040f0:	b002      	add	sp, #8
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 80040f4:	d10e      	bne.n	8004114 <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 80040f6:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80040f8:	4295      	cmp	r5, r2
 80040fa:	d80b      	bhi.n	8004114 <USBD_LL_DataInStage+0x64>
            (pep->total_length >= pep->maxpacket) &&
 80040fc:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004100:	42aa      	cmp	r2, r5
 8004102:	d207      	bcs.n	8004114 <USBD_LL_DataInStage+0x64>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004104:	460a      	mov	r2, r1
 8004106:	9101      	str	r1, [sp, #4]
 8004108:	f000 fb08 	bl	800471c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800410c:	9b01      	ldr	r3, [sp, #4]
 800410e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004112:	e7e1      	b.n	80040d8 <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004114:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004118:	2b03      	cmp	r3, #3
 800411a:	d108      	bne.n	800412e <USBD_LL_DataInStage+0x7e>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800411c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	b123      	cbz	r3, 800412e <USBD_LL_DataInStage+0x7e>
              pdev->classId = 0U;
 8004124:	2200      	movs	r2, #0
 8004126:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800412a:	4620      	mov	r0, r4
 800412c:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	4620      	mov	r0, r4
 8004132:	f000 fcd1 	bl	8004ad8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004136:	4620      	mov	r0, r4
 8004138:	f000 fb18 	bl	800476c <USBD_CtlReceiveStatus>
 800413c:	e7d1      	b.n	80040e2 <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800413e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004142:	2b03      	cmp	r3, #3
 8004144:	d1d3      	bne.n	80040ee <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004146:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ce      	beq.n	80040ee <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 8004150:	2200      	movs	r2, #0
 8004152:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
}
 8004156:	b002      	add	sp, #8
 8004158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800415c:	4718      	bx	r3

0800415e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800415e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004160:	2301      	movs	r3, #1
 8004162:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004166:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800416a:	2100      	movs	r1, #0
{
 800416c:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 800416e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004172:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004174:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004178:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800417c:	b9b3      	cbnz	r3, 80041ac <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 800417e:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004180:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004182:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004184:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004186:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	4620      	mov	r0, r4
 800418c:	f000 fc86 	bl	8004a9c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004190:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004194:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004198:	462b      	mov	r3, r5
 800419a:	2200      	movs	r2, #0
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 fc7c 	bl	8004a9c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80041a4:	84a7      	strh	r7, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80041a6:	6225      	str	r5, [r4, #32]

  return ret;
}
 80041a8:	4630      	mov	r0, r6
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0e5      	beq.n	800417e <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80041b2:	4798      	blx	r3
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d0e2      	beq.n	800417e <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 80041b8:	2603      	movs	r6, #3
 80041ba:	e7e1      	b.n	8004180 <USBD_LL_Reset+0x22>

080041bc <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80041bc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80041be:	2000      	movs	r0, #0
 80041c0:	4770      	bx	lr

080041c2 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80041c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041c6:	2b04      	cmp	r3, #4
  {
    pdev->dev_old_state = pdev->dev_state;
 80041c8:	bf1e      	ittt	ne
 80041ca:	f890 329c 	ldrbne.w	r3, [r0, #668]	; 0x29c
 80041ce:	b2db      	uxtbne	r3, r3
 80041d0:	f880 329d 	strbne.w	r3, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80041d4:	2304      	movs	r3, #4
 80041d6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80041da:	2000      	movs	r0, #0
 80041dc:	4770      	bx	lr

080041de <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80041de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041e2:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80041e4:	bf02      	ittt	eq
 80041e6:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80041ea:	b2db      	uxtbeq	r3, r3
 80041ec:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80041f0:	2000      	movs	r0, #0
 80041f2:	4770      	bx	lr

080041f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80041f4:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041f6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80041fa:	2a03      	cmp	r2, #3
 80041fc:	d105      	bne.n	800420a <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80041fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004202:	b113      	cbz	r3, 800420a <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	b103      	cbz	r3, 800420a <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004208:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800420a:	2000      	movs	r0, #0
 800420c:	bd08      	pop	{r3, pc}

0800420e <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800420e:	2000      	movs	r0, #0
 8004210:	4770      	bx	lr

08004212 <USBD_CoreFindEP>:
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr

08004216 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004216:	b510      	push	{r4, lr}
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004218:	8842      	ldrh	r2, [r0, #2]
 800421a:	7803      	ldrb	r3, [r0, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d90a      	bls.n	8004236 <USBD_GetEpDesc+0x20>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004220:	7804      	ldrb	r4, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004222:	4420      	add	r0, r4
  *ptr += pnext->bLength;
 8004224:	4423      	add	r3, r4
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004226:	7844      	ldrb	r4, [r0, #1]
 8004228:	2c05      	cmp	r4, #5
  *ptr += pnext->bLength;
 800422a:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800422c:	d1f6      	bne.n	800421c <USBD_GetEpDesc+0x6>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800422e:	7884      	ldrb	r4, [r0, #2]
 8004230:	428c      	cmp	r4, r1
 8004232:	d1f3      	bne.n	800421c <USBD_GetEpDesc+0x6>
}
 8004234:	bd10      	pop	{r4, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004236:	2000      	movs	r0, #0
 8004238:	e7fc      	b.n	8004234 <USBD_GetEpDesc+0x1e>

0800423a <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800423a:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800423c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800423e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004240:	f000 fc4a 	bl	8004ad8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004244:	4620      	mov	r0, r4
 8004246:	2100      	movs	r1, #0
}
 8004248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800424c:	f000 bc44 	b.w	8004ad8 <USBD_LL_StallEP>

08004250 <USBD_StdDevReq>:
{
 8004250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004254:	780d      	ldrb	r5, [r1, #0]
 8004256:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800425a:	2d20      	cmp	r5, #32
{
 800425c:	4604      	mov	r4, r0
 800425e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004260:	d014      	beq.n	800428c <USBD_StdDevReq+0x3c>
 8004262:	2d40      	cmp	r5, #64	; 0x40
 8004264:	d012      	beq.n	800428c <USBD_StdDevReq+0x3c>
 8004266:	2d00      	cmp	r5, #0
 8004268:	f040 8112 	bne.w	8004490 <USBD_StdDevReq+0x240>
      switch (req->bRequest)
 800426c:	784f      	ldrb	r7, [r1, #1]
 800426e:	2f09      	cmp	r7, #9
 8004270:	f200 810e 	bhi.w	8004490 <USBD_StdDevReq+0x240>
 8004274:	e8df f017 	tbh	[pc, r7, lsl #1]
 8004278:	013a0113 	.word	0x013a0113
 800427c:	0129010c 	.word	0x0129010c
 8004280:	008e010c 	.word	0x008e010c
 8004284:	010c0016 	.word	0x010c0016
 8004288:	00aa00fb 	.word	0x00aa00fb
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800428c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8004290:	33ae      	adds	r3, #174	; 0xae
 8004292:	4631      	mov	r1, r6
 8004294:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4620      	mov	r0, r4
}
 800429c:	b002      	add	sp, #8
 800429e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80042a2:	4718      	bx	r3
  uint16_t len = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80042aa:	884b      	ldrh	r3, [r1, #2]
 80042ac:	0a1a      	lsrs	r2, r3, #8
 80042ae:	3a01      	subs	r2, #1
 80042b0:	2a0e      	cmp	r2, #14
 80042b2:	d80d      	bhi.n	80042d0 <USBD_StdDevReq+0x80>
 80042b4:	e8df f002 	tbb	[pc, r2]
 80042b8:	0c392c13 	.word	0x0c392c13
 80042bc:	0c63590c 	.word	0x0c63590c
 80042c0:	0c0c0c0c 	.word	0x0c0c0c0c
 80042c4:	0c0c      	.short	0x0c0c
 80042c6:	08          	.byte	0x08
 80042c7:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80042c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042cc:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80042ce:	b94b      	cbnz	r3, 80042e4 <USBD_StdDevReq+0x94>
      USBD_CtlError(pdev, req);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff ffb2 	bl	800423a <USBD_CtlError.constprop.0>
}
 80042d6:	4628      	mov	r0, r5
 80042d8:	b002      	add	sp, #8
 80042da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80042de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	7c20      	ldrb	r0, [r4, #16]
 80042e6:	f10d 0106 	add.w	r1, sp, #6
 80042ea:	4798      	blx	r3
  if (req->wLength != 0U)
 80042ec:	88f2      	ldrh	r2, [r6, #6]
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	f000 80f8 	beq.w	80044e4 <USBD_StdDevReq+0x294>
    if (len != 0U)
 80042f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0e9      	beq.n	80042d0 <USBD_StdDevReq+0x80>
      len = MIN(len, req->wLength);
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf28      	it	cs
 8004300:	461a      	movcs	r2, r3
 8004302:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004306:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f9fa 	bl	8004702 <USBD_CtlSendData>
        break;
 800430e:	e7e2      	b.n	80042d6 <USBD_StdDevReq+0x86>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004310:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004312:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004316:	b932      	cbnz	r2, 8004326 <USBD_StdDevReq+0xd6>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800431a:	f10d 0006 	add.w	r0, sp, #6
 800431e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004320:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004322:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004324:	e7e2      	b.n	80042ec <USBD_StdDevReq+0x9c>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	e7f7      	b.n	800431a <USBD_StdDevReq+0xca>
      switch ((uint8_t)(req->wValue))
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b05      	cmp	r3, #5
 800432e:	d8cf      	bhi.n	80042d0 <USBD_StdDevReq+0x80>
 8004330:	e8df f003 	tbb	[pc, r3]
 8004334:	0f0b0703 	.word	0x0f0b0703
 8004338:	1713      	.short	0x1713
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800433a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	e7c5      	b.n	80042ce <USBD_StdDevReq+0x7e>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004342:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	e7c1      	b.n	80042ce <USBD_StdDevReq+0x7e>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800434a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	e7bd      	b.n	80042ce <USBD_StdDevReq+0x7e>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004352:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	e7b9      	b.n	80042ce <USBD_StdDevReq+0x7e>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800435a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	e7b5      	b.n	80042ce <USBD_StdDevReq+0x7e>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004362:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	e7b1      	b.n	80042ce <USBD_StdDevReq+0x7e>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800436a:	7c03      	ldrb	r3, [r0, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1af      	bne.n	80042d0 <USBD_StdDevReq+0x80>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8004370:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004374:	f10d 0006 	add.w	r0, sp, #6
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	4798      	blx	r3
  if (err != 0U)
 800437c:	e7b6      	b.n	80042ec <USBD_StdDevReq+0x9c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800437e:	7c03      	ldrb	r3, [r0, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1a5      	bne.n	80042d0 <USBD_StdDevReq+0x80>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004384:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004388:	f10d 0006 	add.w	r0, sp, #6
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004390:	2307      	movs	r3, #7
 8004392:	e7c6      	b.n	8004322 <USBD_StdDevReq+0xd2>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004394:	888b      	ldrh	r3, [r1, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d19a      	bne.n	80042d0 <USBD_StdDevReq+0x80>
 800439a:	88cb      	ldrh	r3, [r1, #6]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d197      	bne.n	80042d0 <USBD_StdDevReq+0x80>
 80043a0:	884e      	ldrh	r6, [r1, #2]
 80043a2:	2e7f      	cmp	r6, #127	; 0x7f
 80043a4:	d894      	bhi.n	80042d0 <USBD_StdDevReq+0x80>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d090      	beq.n	80042d0 <USBD_StdDevReq+0x80>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80043ae:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80043b0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80043b4:	f000 fbc0 	bl	8004b38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 f9cc 	bl	8004756 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80043be:	b11e      	cbz	r6, 80043c8 <USBD_StdDevReq+0x178>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80043c0:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80043c2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80043c6:	e786      	b.n	80042d6 <USBD_StdDevReq+0x86>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e7fa      	b.n	80043c2 <USBD_StdDevReq+0x172>
  cfgidx = (uint8_t)(req->wValue);
 80043cc:	788e      	ldrb	r6, [r1, #2]
 80043ce:	4f4d      	ldr	r7, [pc, #308]	; (8004504 <USBD_StdDevReq+0x2b4>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80043d0:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 80043d2:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80043d4:	d903      	bls.n	80043de <USBD_StdDevReq+0x18e>
    USBD_CtlError(pdev, req);
 80043d6:	f7ff ff30 	bl	800423a <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 80043da:	2503      	movs	r5, #3
      break;
 80043dc:	e77b      	b.n	80042d6 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 80043de:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	fa5f f883 	uxtb.w	r8, r3
 80043e8:	d009      	beq.n	80043fe <USBD_StdDevReq+0x1ae>
 80043ea:	f1b8 0f03 	cmp.w	r8, #3
 80043ee:	d018      	beq.n	8004422 <USBD_StdDevReq+0x1d2>
      USBD_CtlError(pdev, req);
 80043f0:	f7ff ff23 	bl	800423a <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80043f4:	7839      	ldrb	r1, [r7, #0]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7ff fdec 	bl	8003fd4 <USBD_ClrClassConfig>
 80043fc:	e7ed      	b.n	80043da <USBD_StdDevReq+0x18a>
      if (cfgidx != 0U)
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d070      	beq.n	80044e4 <USBD_StdDevReq+0x294>
        pdev->dev_config = cfgidx;
 8004402:	2101      	movs	r1, #1
 8004404:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004406:	f7ff fdde 	bl	8003fc6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800440a:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 800440c:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 800440e:	b125      	cbz	r5, 800441a <USBD_StdDevReq+0x1ca>
          USBD_CtlError(pdev, req);
 8004410:	f7ff ff13 	bl	800423a <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004414:	f884 829c 	strb.w	r8, [r4, #668]	; 0x29c
 8004418:	e75d      	b.n	80042d6 <USBD_StdDevReq+0x86>
          (void)USBD_CtlSendStatus(pdev);
 800441a:	f000 f99c 	bl	8004756 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800441e:	2303      	movs	r3, #3
 8004420:	e7cf      	b.n	80043c2 <USBD_StdDevReq+0x172>
      if (cfgidx == 0U)
 8004422:	b95e      	cbnz	r6, 800443c <USBD_StdDevReq+0x1ec>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004424:	2302      	movs	r3, #2
 8004426:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800442a:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800442c:	4631      	mov	r1, r6
 800442e:	f7ff fdd1 	bl	8003fd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004432:	4620      	mov	r0, r4
 8004434:	f000 f98f 	bl	8004756 <USBD_CtlSendStatus>
 8004438:	4635      	mov	r5, r6
 800443a:	e74c      	b.n	80042d6 <USBD_StdDevReq+0x86>
      else if (cfgidx != pdev->dev_config)
 800443c:	6841      	ldr	r1, [r0, #4]
 800443e:	2901      	cmp	r1, #1
 8004440:	d050      	beq.n	80044e4 <USBD_StdDevReq+0x294>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004442:	b2c9      	uxtb	r1, r1
 8004444:	f7ff fdc6 	bl	8003fd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004448:	7839      	ldrb	r1, [r7, #0]
 800444a:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff fdba 	bl	8003fc6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004452:	4606      	mov	r6, r0
 8004454:	2800      	cmp	r0, #0
 8004456:	d045      	beq.n	80044e4 <USBD_StdDevReq+0x294>
          USBD_CtlError(pdev, req);
 8004458:	4620      	mov	r0, r4
 800445a:	f7ff feee 	bl	800423a <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800445e:	7921      	ldrb	r1, [r4, #4]
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff fdb7 	bl	8003fd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004466:	2302      	movs	r3, #2
 8004468:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800446c:	e7e4      	b.n	8004438 <USBD_StdDevReq+0x1e8>
  if (req->wLength != 1U)
 800446e:	88ca      	ldrh	r2, [r1, #6]
 8004470:	2a01      	cmp	r2, #1
 8004472:	f47f af2d 	bne.w	80042d0 <USBD_StdDevReq+0x80>
    switch (pdev->dev_state)
 8004476:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800447a:	2902      	cmp	r1, #2
 800447c:	b2cb      	uxtb	r3, r1
 800447e:	d805      	bhi.n	800448c <USBD_StdDevReq+0x23c>
 8004480:	b133      	cbz	r3, 8004490 <USBD_StdDevReq+0x240>
        pdev->dev_default_config = 0U;
 8004482:	4601      	mov	r1, r0
 8004484:	2300      	movs	r3, #0
 8004486:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800448a:	e73d      	b.n	8004308 <USBD_StdDevReq+0xb8>
    switch (pdev->dev_state)
 800448c:	2b03      	cmp	r3, #3
 800448e:	d004      	beq.n	800449a <USBD_StdDevReq+0x24a>
        USBD_CtlError(pdev, req);
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff fed2 	bl	800423a <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004496:	2500      	movs	r5, #0
        break;
 8004498:	e71d      	b.n	80042d6 <USBD_StdDevReq+0x86>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800449a:	1d01      	adds	r1, r0, #4
 800449c:	e734      	b.n	8004308 <USBD_StdDevReq+0xb8>
  switch (pdev->dev_state)
 800449e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044a2:	3b01      	subs	r3, #1
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d8f3      	bhi.n	8004490 <USBD_StdDevReq+0x240>
      if (req->wLength != 0x2U)
 80044a8:	88ca      	ldrh	r2, [r1, #6]
 80044aa:	2a02      	cmp	r2, #2
 80044ac:	f47f af10 	bne.w	80042d0 <USBD_StdDevReq+0x80>
      if (pdev->dev_remote_wakeup != 0U)
 80044b0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80044b4:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bf14      	ite	ne
 80044ba:	2303      	movne	r3, #3
 80044bc:	2301      	moveq	r3, #1
 80044be:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80044c2:	f000 f91e 	bl	8004702 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80044c6:	463d      	mov	r5, r7
      break;
 80044c8:	e705      	b.n	80042d6 <USBD_StdDevReq+0x86>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80044ca:	884b      	ldrh	r3, [r1, #2]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <USBD_StdDevReq+0x286>
        pdev->dev_remote_wakeup = 0U;
 80044d0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80044d4:	e006      	b.n	80044e4 <USBD_StdDevReq+0x294>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	f47f aefa 	bne.w	80042d0 <USBD_StdDevReq+0x80>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80044dc:	888b      	ldrh	r3, [r1, #4]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
        (void)USBD_CtlSendStatus(pdev);
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 f936 	bl	8004756 <USBD_CtlSendStatus>
 80044ea:	e6f4      	b.n	80042d6 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 80044ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044f0:	3b01      	subs	r3, #1
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d8cc      	bhi.n	8004490 <USBD_StdDevReq+0x240>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80044f6:	884b      	ldrh	r3, [r1, #2]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	f47f aeec 	bne.w	80042d6 <USBD_StdDevReq+0x86>
        pdev->dev_remote_wakeup = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	e7e6      	b.n	80044d0 <USBD_StdDevReq+0x280>
 8004502:	bf00      	nop
 8004504:	200002bc 	.word	0x200002bc

08004508 <USBD_StdItfReq>:
{
 8004508:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800450a:	780b      	ldrb	r3, [r1, #0]
 800450c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004510:	2a40      	cmp	r2, #64	; 0x40
{
 8004512:	4604      	mov	r4, r0
 8004514:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004516:	d001      	beq.n	800451c <USBD_StdItfReq+0x14>
 8004518:	065b      	lsls	r3, r3, #25
 800451a:	d41f      	bmi.n	800455c <USBD_StdItfReq+0x54>
      switch (pdev->dev_state)
 800451c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004520:	3b01      	subs	r3, #1
 8004522:	2b02      	cmp	r3, #2
 8004524:	d81a      	bhi.n	800455c <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004526:	7931      	ldrb	r1, [r6, #4]
 8004528:	2901      	cmp	r1, #1
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800452a:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800452c:	d817      	bhi.n	800455e <USBD_StdItfReq+0x56>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800452e:	f7ff fe6e 	bl	800420e <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004532:	b988      	cbnz	r0, 8004558 <USBD_StdItfReq+0x50>
              if (pdev->pClass[idx]->Setup != NULL)
 8004534:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	b16b      	cbz	r3, 8004558 <USBD_StdItfReq+0x50>
                pdev->classId = idx;
 800453c:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004540:	4631      	mov	r1, r6
 8004542:	4620      	mov	r0, r4
 8004544:	4798      	blx	r3
 8004546:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004548:	88f3      	ldrh	r3, [r6, #6]
 800454a:	b91b      	cbnz	r3, 8004554 <USBD_StdItfReq+0x4c>
 800454c:	b915      	cbnz	r5, 8004554 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 800454e:	4620      	mov	r0, r4
 8004550:	f000 f901 	bl	8004756 <USBD_CtlSendStatus>
}
 8004554:	4628      	mov	r0, r5
 8004556:	bd70      	pop	{r4, r5, r6, pc}
              ret = USBD_FAIL;
 8004558:	2503      	movs	r5, #3
 800455a:	e7f5      	b.n	8004548 <USBD_StdItfReq+0x40>
          USBD_CtlError(pdev, req);
 800455c:	4620      	mov	r0, r4
 800455e:	f7ff fe6c 	bl	800423a <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004562:	2500      	movs	r5, #0
          break;
 8004564:	e7f6      	b.n	8004554 <USBD_StdItfReq+0x4c>

08004566 <USBD_StdEPReq>:
{
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800456a:	888a      	ldrh	r2, [r1, #4]
 800456c:	790d      	ldrb	r5, [r1, #4]
 800456e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004572:	2b20      	cmp	r3, #32
{
 8004574:	4604      	mov	r4, r0
 8004576:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004578:	d05a      	beq.n	8004630 <USBD_StdEPReq+0xca>
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d058      	beq.n	8004630 <USBD_StdEPReq+0xca>
 800457e:	bb9b      	cbnz	r3, 80045e8 <USBD_StdEPReq+0x82>
      switch (req->bRequest)
 8004580:	784b      	ldrb	r3, [r1, #1]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d042      	beq.n	800460c <USBD_StdEPReq+0xa6>
 8004586:	2b03      	cmp	r3, #3
 8004588:	d027      	beq.n	80045da <USBD_StdEPReq+0x74>
 800458a:	bb6b      	cbnz	r3, 80045e8 <USBD_StdEPReq+0x82>
          switch (pdev->dev_state)
 800458c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004590:	2b02      	cmp	r3, #2
 8004592:	b2d9      	uxtb	r1, r3
 8004594:	d068      	beq.n	8004668 <USBD_StdEPReq+0x102>
 8004596:	2903      	cmp	r1, #3
 8004598:	d126      	bne.n	80045e8 <USBD_StdEPReq+0x82>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800459a:	f005 030f 	and.w	r3, r5, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800459e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045a2:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80045a6:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80045aa:	d06c      	beq.n	8004686 <USBD_StdEPReq+0x120>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80045ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045ae:	b1db      	cbz	r3, 80045e8 <USBD_StdEPReq+0x82>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80045b0:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 80045b4:	3601      	adds	r6, #1
 80045b6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80045ba:	eb00 0686 	add.w	r6, r0, r6, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80045be:	f015 007f 	ands.w	r0, r5, #127	; 0x7f
 80045c2:	d006      	beq.n	80045d2 <USBD_StdEPReq+0x6c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80045c4:	4629      	mov	r1, r5
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 faa2 	bl	8004b10 <USBD_LL_IsStallEP>
 80045cc:	3800      	subs	r0, #0
 80045ce:	bf18      	it	ne
 80045d0:	2001      	movne	r0, #1
                pep->status = 0x0000U;
 80045d2:	6030      	str	r0, [r6, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80045d4:	2202      	movs	r2, #2
 80045d6:	4631      	mov	r1, r6
 80045d8:	e051      	b.n	800467e <USBD_StdEPReq+0x118>
          switch (pdev->dev_state)
 80045da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045de:	2b02      	cmp	r3, #2
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	d037      	beq.n	8004654 <USBD_StdEPReq+0xee>
 80045e4:	2a03      	cmp	r2, #3
 80045e6:	d003      	beq.n	80045f0 <USBD_StdEPReq+0x8a>
              USBD_CtlError(pdev, req);
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff fe26 	bl	800423a <USBD_CtlError.constprop.0>
              break;
 80045ee:	e00b      	b.n	8004608 <USBD_StdEPReq+0xa2>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80045f0:	884b      	ldrh	r3, [r1, #2]
 80045f2:	b933      	cbnz	r3, 8004602 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80045f4:	0669      	lsls	r1, r5, #25
 80045f6:	d004      	beq.n	8004602 <USBD_StdEPReq+0x9c>
 80045f8:	88f3      	ldrh	r3, [r6, #6]
 80045fa:	b913      	cbnz	r3, 8004602 <USBD_StdEPReq+0x9c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80045fc:	4629      	mov	r1, r5
 80045fe:	f000 fa6b 	bl	8004ad8 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f8a7 	bl	8004756 <USBD_CtlSendStatus>
}
 8004608:	2000      	movs	r0, #0
 800460a:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800460c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004610:	2b02      	cmp	r3, #2
 8004612:	b2da      	uxtb	r2, r3
 8004614:	d01e      	beq.n	8004654 <USBD_StdEPReq+0xee>
 8004616:	2a03      	cmp	r2, #3
 8004618:	d1e6      	bne.n	80045e8 <USBD_StdEPReq+0x82>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800461a:	884b      	ldrh	r3, [r1, #2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f3      	bne.n	8004608 <USBD_StdEPReq+0xa2>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004620:	066b      	lsls	r3, r5, #25
 8004622:	d002      	beq.n	800462a <USBD_StdEPReq+0xc4>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004624:	4629      	mov	r1, r5
 8004626:	f000 fa65 	bl	8004af4 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f893 	bl	8004756 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004630:	4629      	mov	r1, r5
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff fded 	bl	8004212 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004638:	2800      	cmp	r0, #0
 800463a:	d1e5      	bne.n	8004608 <USBD_StdEPReq+0xa2>
                  if (pdev->pClass[idx]->Setup != NULL)
 800463c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
                  pdev->classId = idx;
 8004640:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0de      	beq.n	8004608 <USBD_StdEPReq+0xa2>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800464a:	4631      	mov	r1, r6
 800464c:	4620      	mov	r0, r4
}
 800464e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004652:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004654:	066a      	lsls	r2, r5, #25
 8004656:	d0c7      	beq.n	80045e8 <USBD_StdEPReq+0x82>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004658:	4629      	mov	r1, r5
 800465a:	f000 fa3d 	bl	8004ad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fa39 	bl	8004ad8 <USBD_LL_StallEP>
 8004666:	e7cf      	b.n	8004608 <USBD_StdEPReq+0xa2>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004668:	0669      	lsls	r1, r5, #25
 800466a:	d1bd      	bne.n	80045e8 <USBD_StdEPReq+0x82>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800466c:	0613      	lsls	r3, r2, #24
 800466e:	bf4c      	ite	mi
 8004670:	f100 0114 	addmi.w	r1, r0, #20
 8004674:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004678:	2300      	movs	r3, #0
 800467a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800467c:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800467e:	4620      	mov	r0, r4
 8004680:	f000 f83f 	bl	8004702 <USBD_CtlSendData>
              break;
 8004684:	e7c0      	b.n	8004608 <USBD_StdEPReq+0xa2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004686:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ac      	beq.n	80045e8 <USBD_StdEPReq+0x82>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800468e:	f005 067f 	and.w	r6, r5, #127	; 0x7f
 8004692:	2314      	movs	r3, #20
 8004694:	fb03 0606 	mla	r6, r3, r6, r0
 8004698:	f506 76aa 	add.w	r6, r6, #340	; 0x154
 800469c:	e78f      	b.n	80045be <USBD_StdEPReq+0x58>

0800469e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800469e:	780b      	ldrb	r3, [r1, #0]
 80046a0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80046a2:	784b      	ldrb	r3, [r1, #1]
 80046a4:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80046a6:	884b      	ldrh	r3, [r1, #2]
 80046a8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80046aa:	888b      	ldrh	r3, [r1, #4]
 80046ac:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80046ae:	88cb      	ldrh	r3, [r1, #6]
 80046b0:	80c3      	strh	r3, [r0, #6]
}
 80046b2:	4770      	bx	lr

080046b4 <USBD_CtlError>:
{
 80046b4:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80046b6:	2180      	movs	r1, #128	; 0x80
{
 80046b8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80046ba:	f000 fa0d 	bl	8004ad8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80046be:	4620      	mov	r0, r4
 80046c0:	2100      	movs	r1, #0
}
 80046c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80046c6:	f000 ba07 	b.w	8004ad8 <USBD_LL_StallEP>

080046ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80046ca:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80046cc:	b188      	cbz	r0, 80046f2 <USBD_GetString+0x28>
 80046ce:	2400      	movs	r4, #0
 80046d0:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80046d2:	4623      	mov	r3, r4
 80046d4:	3401      	adds	r4, #1
 80046d6:	5d05      	ldrb	r5, [r0, r4]
 80046d8:	2d00      	cmp	r5, #0
 80046da:	d1fa      	bne.n	80046d2 <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80046e4:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80046e6:	2303      	movs	r3, #3
 80046e8:	704b      	strb	r3, [r1, #1]
  idx++;
 80046ea:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80046ec:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80046f0:	b902      	cbnz	r2, 80046f4 <USBD_GetString+0x2a>
}
 80046f2:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 80046f4:	54ca      	strb	r2, [r1, r3]
    idx++;
 80046f6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80046f8:	b2d2      	uxtb	r2, r2
    idx++;
 80046fa:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80046fc:	548d      	strb	r5, [r1, r2]
    idx++;
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e7f4      	b.n	80046ec <USBD_GetString+0x22>

08004702 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004702:	b510      	push	{r4, lr}
 8004704:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004706:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004708:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800470c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004710:	460a      	mov	r2, r1
 8004712:	2100      	movs	r1, #0
 8004714:	f000 fa1e 	bl	8004b54 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004718:	2000      	movs	r0, #0
 800471a:	bd10      	pop	{r4, pc}

0800471c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800471c:	b508      	push	{r3, lr}
 800471e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004720:	460a      	mov	r2, r1
 8004722:	2100      	movs	r1, #0
 8004724:	f000 fa16 	bl	8004b54 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004728:	2000      	movs	r0, #0
 800472a:	bd08      	pop	{r3, pc}

0800472c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800472c:	b510      	push	{r4, lr}
 800472e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004730:	2203      	movs	r2, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004732:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004736:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800473a:	460a      	mov	r2, r1
 800473c:	2100      	movs	r1, #0
 800473e:	f000 fa17 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004742:	2000      	movs	r0, #0
 8004744:	bd10      	pop	{r4, pc}

08004746 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004746:	b508      	push	{r3, lr}
 8004748:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800474a:	460a      	mov	r2, r1
 800474c:	2100      	movs	r1, #0
 800474e:	f000 fa0f 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004752:	2000      	movs	r0, #0
 8004754:	bd08      	pop	{r3, pc}

08004756 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004756:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004758:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800475a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800475c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004760:	4619      	mov	r1, r3
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f9f6 	bl	8004b54 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004768:	2000      	movs	r0, #0
 800476a:	bd08      	pop	{r3, pc}

0800476c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800476c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800476e:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004770:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004772:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004776:	4619      	mov	r1, r3
 8004778:	461a      	mov	r2, r3
 800477a:	f000 f9f9 	bl	8004b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800477e:	2000      	movs	r0, #0
 8004780:	bd08      	pop	{r3, pc}
	...

08004784 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004786:	490f      	ldr	r1, [pc, #60]	; (80047c4 <MX_USB_DEVICE_Init+0x40>)
 8004788:	480f      	ldr	r0, [pc, #60]	; (80047c8 <MX_USB_DEVICE_Init+0x44>)
 800478a:	2200      	movs	r2, #0
 800478c:	f7ff fbed 	bl	8003f6a <USBD_Init>
 8004790:	b108      	cbz	r0, 8004796 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8004792:	f7fc f84b 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8004796:	490d      	ldr	r1, [pc, #52]	; (80047cc <MX_USB_DEVICE_Init+0x48>)
 8004798:	480b      	ldr	r0, [pc, #44]	; (80047c8 <MX_USB_DEVICE_Init+0x44>)
 800479a:	f7ff fbf9 	bl	8003f90 <USBD_RegisterClass>
 800479e:	b108      	cbz	r0, 80047a4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80047a0:	f7fc f844 	bl	800082c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80047a4:	490a      	ldr	r1, [pc, #40]	; (80047d0 <MX_USB_DEVICE_Init+0x4c>)
 80047a6:	4808      	ldr	r0, [pc, #32]	; (80047c8 <MX_USB_DEVICE_Init+0x44>)
 80047a8:	f7ff fbd4 	bl	8003f54 <USBD_CUSTOM_HID_RegisterInterface>
 80047ac:	b108      	cbz	r0, 80047b2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80047ae:	f7fc f83d 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80047b2:	4805      	ldr	r0, [pc, #20]	; (80047c8 <MX_USB_DEVICE_Init+0x44>)
 80047b4:	f7ff fc05 	bl	8003fc2 <USBD_Start>
 80047b8:	b118      	cbz	r0, 80047c2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80047ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80047be:	f7fc b835 	b.w	800082c <Error_Handler>
}
 80047c2:	bd08      	pop	{r3, pc}
 80047c4:	200000e4 	.word	0x200000e4
 80047c8:	200002c0 	.word	0x200002c0
 80047cc:	2000000c 	.word	0x2000000c
 80047d0:	200000d4 	.word	0x200000d4

080047d4 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr

080047d8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80047d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80047da:	4802      	ldr	r0, [pc, #8]	; (80047e4 <CUSTOM_HID_OutEvent_FS+0xc>)
 80047dc:	f7ff fb9c 	bl	8003f18 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
  /* USER CODE END 6 */
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	bd08      	pop	{r3, pc}
 80047e4:	200002c0 	.word	0x200002c0

080047e8 <CUSTOM_HID_DeInit_FS>:
 80047e8:	2000      	movs	r0, #0
 80047ea:	4770      	bx	lr

080047ec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80047ec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80047ee:	4801      	ldr	r0, [pc, #4]	; (80047f4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80047f0:	800b      	strh	r3, [r1, #0]
}
 80047f2:	4770      	bx	lr
 80047f4:	20000110 	.word	0x20000110

080047f8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80047f8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80047fa:	4801      	ldr	r0, [pc, #4]	; (8004800 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80047fc:	800b      	strh	r3, [r1, #0]
}
 80047fe:	4770      	bx	lr
 8004800:	20000124 	.word	0x20000124

08004804 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8004804:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8004806:	4801      	ldr	r0, [pc, #4]	; (800480c <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8004808:	800b      	strh	r3, [r1, #0]
}
 800480a:	4770      	bx	lr
 800480c:	20000104 	.word	0x20000104

08004810 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004810:	2300      	movs	r3, #0
 8004812:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004814:	1c4d      	adds	r5, r1, #1
 8004816:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 8004818:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800481a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800481e:	bf34      	ite	cc
 8004820:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004822:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004824:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004828:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800482c:	3301      	adds	r3, #1
 800482e:	b2dc      	uxtb	r4, r3
 8004830:	42a2      	cmp	r2, r4
    value = value << 4;
 8004832:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8004836:	d8ef      	bhi.n	8004818 <IntToUnicode+0x8>
  }
}
 8004838:	bd70      	pop	{r4, r5, r6, pc}
	...

0800483c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800483c:	231a      	movs	r3, #26
{
 800483e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004840:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <USBD_FS_SerialStrDescriptor+0x30>)
 8004844:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
  deviceserial0 += deviceserial2;
 8004848:	f8d3 2598 	ldr.w	r2, [r3, #1432]	; 0x598
  if (deviceserial0 != 0)
 800484c:	1880      	adds	r0, r0, r2
 800484e:	d00a      	beq.n	8004866 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004850:	f8d3 4594 	ldr.w	r4, [r3, #1428]	; 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004854:	4906      	ldr	r1, [pc, #24]	; (8004870 <USBD_FS_SerialStrDescriptor+0x34>)
 8004856:	2208      	movs	r2, #8
 8004858:	f7ff ffda 	bl	8004810 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800485c:	2204      	movs	r2, #4
 800485e:	3110      	adds	r1, #16
 8004860:	4620      	mov	r0, r4
 8004862:	f7ff ffd5 	bl	8004810 <IntToUnicode>
}
 8004866:	4803      	ldr	r0, [pc, #12]	; (8004874 <USBD_FS_SerialStrDescriptor+0x38>)
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	1fff7000 	.word	0x1fff7000
 8004870:	2000012a 	.word	0x2000012a
 8004874:	20000128 	.word	0x20000128

08004878 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004878:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800487a:	4c04      	ldr	r4, [pc, #16]	; (800488c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800487c:	4804      	ldr	r0, [pc, #16]	; (8004890 <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800487e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004880:	4621      	mov	r1, r4
 8004882:	f7ff ff22 	bl	80046ca <USBD_GetString>
}
 8004886:	4620      	mov	r0, r4
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	2000059c 	.word	0x2000059c
 8004890:	08004da4 	.word	0x08004da4

08004894 <USBD_FS_ProductStrDescriptor>:
{
 8004894:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004896:	4c04      	ldr	r4, [pc, #16]	; (80048a8 <USBD_FS_ProductStrDescriptor+0x14>)
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <USBD_FS_ProductStrDescriptor+0x18>)
{
 800489a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800489c:	4621      	mov	r1, r4
 800489e:	f7ff ff14 	bl	80046ca <USBD_GetString>
}
 80048a2:	4620      	mov	r0, r4
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	2000059c 	.word	0x2000059c
 80048ac:	08004da8 	.word	0x08004da8

080048b0 <USBD_FS_ConfigStrDescriptor>:
{
 80048b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80048b2:	4c04      	ldr	r4, [pc, #16]	; (80048c4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80048b4:	4804      	ldr	r0, [pc, #16]	; (80048c8 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 80048b6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80048b8:	4621      	mov	r1, r4
 80048ba:	f7ff ff06 	bl	80046ca <USBD_GetString>
}
 80048be:	4620      	mov	r0, r4
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	2000059c 	.word	0x2000059c
 80048c8:	08004dc5 	.word	0x08004dc5

080048cc <USBD_FS_InterfaceStrDescriptor>:
{
 80048cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80048ce:	4c04      	ldr	r4, [pc, #16]	; (80048e0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80048d0:	4804      	ldr	r0, [pc, #16]	; (80048e4 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80048d2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80048d4:	4621      	mov	r1, r4
 80048d6:	f7ff fef8 	bl	80046ca <USBD_GetString>
}
 80048da:	4620      	mov	r0, r4
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	2000059c 	.word	0x2000059c
 80048e4:	08004dd7 	.word	0x08004dd7

080048e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048ee:	2254      	movs	r2, #84	; 0x54
 80048f0:	2100      	movs	r1, #0
 80048f2:	a801      	add	r0, sp, #4
 80048f4:	f000 f973 	bl	8004bde <memset>
  if(pcdHandle->Instance==USB)
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	4b18      	ldr	r3, [pc, #96]	; (800495c <HAL_PCD_MspInit+0x74>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d12a      	bne.n	8004956 <HAL_PCD_MspInit+0x6e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004904:	9301      	str	r3, [sp, #4]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800490a:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800490c:	2301      	movs	r3, #1
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800490e:	2018      	movs	r0, #24
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004910:	e9cd 3302 	strd	r3, r3, [sp, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004914:	2307      	movs	r3, #7
 8004916:	e9cd 0304 	strd	r0, r3, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800491a:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800491c:	e9cd 3306 	strd	r3, r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004920:	a801      	add	r0, sp, #4
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004922:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004926:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004928:	f7fd fe32 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 800492c:	b108      	cbz	r0, 8004932 <HAL_PCD_MspInit+0x4a>
    {
      Error_Handler();
 800492e:	f7fb ff7d 	bl	800082c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_PCD_MspInit+0x78>)
 8004934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004936:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004944:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004946:	2043      	movs	r0, #67	; 0x43
 8004948:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800494a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800494c:	f7fc f95c 	bl	8000c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004950:	2043      	movs	r0, #67	; 0x43
 8004952:	f7fc f98b 	bl	8000c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004956:	b016      	add	sp, #88	; 0x58
 8004958:	bd10      	pop	{r4, pc}
 800495a:	bf00      	nop
 800495c:	40006800 	.word	0x40006800
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004964:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004968:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800496c:	f7ff bb3b 	b.w	8003fe6 <USBD_LL_SetupStage>

08004970 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004970:	2328      	movs	r3, #40	; 0x28
 8004972:	fb03 0301 	mla	r3, r3, r1, r0
 8004976:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800497a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800497e:	f7ff bb62 	b.w	8004046 <USBD_LL_DataOutStage>

08004982 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004982:	2328      	movs	r3, #40	; 0x28
 8004984:	fb03 0301 	mla	r3, r3, r1, r0
 8004988:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 800498c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498e:	f7ff bb8f 	b.w	80040b0 <USBD_LL_DataInStage>

08004992 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004992:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8004996:	f7ff bc2d 	b.w	80041f4 <USBD_LL_SOF>

0800499a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800499a:	6883      	ldr	r3, [r0, #8]
 800499c:	2b02      	cmp	r3, #2
{
 800499e:	b510      	push	{r4, lr}
 80049a0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80049a2:	d001      	beq.n	80049a8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80049a4:	f7fb ff42 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80049a8:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
 80049ac:	2101      	movs	r1, #1
 80049ae:	f7ff fc05 	bl	80041bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049b2:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
}
 80049b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049ba:	f7ff bbd0 	b.w	800415e <USBD_LL_Reset>
	...

080049c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80049c4:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 80049c8:	f7ff fbfb 	bl	80041c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80049cc:	69a3      	ldr	r3, [r4, #24]
 80049ce:	b123      	cbz	r3, 80049da <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80049d0:	4a02      	ldr	r2, [pc, #8]	; (80049dc <HAL_PCD_SuspendCallback+0x1c>)
 80049d2:	6913      	ldr	r3, [r2, #16]
 80049d4:	f043 0306 	orr.w	r3, r3, #6
 80049d8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80049e0:	6983      	ldr	r3, [r0, #24]
{
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80049e6:	b133      	cbz	r3, 80049f6 <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80049e8:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <HAL_PCD_ResumeCallback+0x24>)
 80049ea:	6913      	ldr	r3, [r2, #16]
 80049ec:	f023 0306 	bic.w	r3, r3, #6
 80049f0:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80049f2:	f7fb fdb1 	bl	8000558 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80049f6:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
}
 80049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80049fe:	f7ff bbee 	b.w	80041de <USBD_LL_Resume>
 8004a02:	bf00      	nop
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <USBD_LL_Init>:
{
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 8004a0c:	f7fd f92e 	bl	8001c6c <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8004a10:	4819      	ldr	r0, [pc, #100]	; (8004a78 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004a12:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <USBD_LL_Init+0x74>)
  hpcd_USB_FS.pData = pdev;
 8004a14:	f8c0 42f4 	str.w	r4, [r0, #756]	; 0x2f4
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004a18:	2308      	movs	r3, #8
 8004a1a:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004a22:	6103      	str	r3, [r0, #16]
  pdev->pData = &hpcd_USB_FS;
 8004a24:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004a28:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004a2a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004a2e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004a32:	f7fc f9fa 	bl	8000e2a <HAL_PCD_Init>
 8004a36:	b108      	cbz	r0, 8004a3c <USBD_LL_Init+0x34>
    Error_Handler( );
 8004a38:	f7fb fef8 	bl	800082c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4611      	mov	r1, r2
 8004a40:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8004a44:	2318      	movs	r3, #24
 8004a46:	f7fd f899 	bl	8001b7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004a4a:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8004a4e:	2358      	movs	r3, #88	; 0x58
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	f7fd f892 	bl	8001b7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8004a58:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8004a5c:	2398      	movs	r3, #152	; 0x98
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2181      	movs	r1, #129	; 0x81
 8004a62:	f7fd f88b 	bl	8001b7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8004a66:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
 8004a6a:	23d8      	movs	r3, #216	; 0xd8
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2101      	movs	r1, #1
 8004a70:	f7fd f884 	bl	8001b7c <HAL_PCDEx_PMAConfig>
}
 8004a74:	2000      	movs	r0, #0
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	2000079c 	.word	0x2000079c
 8004a7c:	40006800 	.word	0x40006800

08004a80 <USBD_LL_Start>:
{
 8004a80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004a82:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004a86:	f7fc fa4e 	bl	8000f26 <HAL_PCD_Start>
  switch (hal_status) {
 8004a8a:	2803      	cmp	r0, #3
 8004a8c:	bf96      	itet	ls
 8004a8e:	4b02      	ldrls	r3, [pc, #8]	; (8004a98 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8004a90:	2003      	movhi	r0, #3
 8004a92:	5c18      	ldrbls	r0, [r3, r0]
}
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop
 8004a98:	08004dec 	.word	0x08004dec

08004a9c <USBD_LL_OpenEP>:
{
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004aa0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8004aa4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	f7fc ff60 	bl	800196c <HAL_PCD_EP_Open>
  switch (hal_status) {
 8004aac:	2803      	cmp	r0, #3
 8004aae:	bf96      	itet	ls
 8004ab0:	4b01      	ldrls	r3, [pc, #4]	; (8004ab8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ab2:	2003      	movhi	r0, #3
 8004ab4:	5c18      	ldrbls	r0, [r3, r0]
}
 8004ab6:	bd10      	pop	{r4, pc}
 8004ab8:	08004dec 	.word	0x08004dec

08004abc <USBD_LL_CloseEP>:
{
 8004abc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004abe:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004ac2:	f7fc ff82 	bl	80019ca <HAL_PCD_EP_Close>
  switch (hal_status) {
 8004ac6:	2803      	cmp	r0, #3
 8004ac8:	bf96      	itet	ls
 8004aca:	4b02      	ldrls	r3, [pc, #8]	; (8004ad4 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004acc:	2003      	movhi	r0, #3
 8004ace:	5c18      	ldrbls	r0, [r3, r0]
}
 8004ad0:	bd08      	pop	{r3, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08004dec 	.word	0x08004dec

08004ad8 <USBD_LL_StallEP>:
{
 8004ad8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004ada:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004ade:	f7fc ffe5 	bl	8001aac <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8004ae2:	2803      	cmp	r0, #3
 8004ae4:	bf96      	itet	ls
 8004ae6:	4b02      	ldrls	r3, [pc, #8]	; (8004af0 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004ae8:	2003      	movhi	r0, #3
 8004aea:	5c18      	ldrbls	r0, [r3, r0]
}
 8004aec:	bd08      	pop	{r3, pc}
 8004aee:	bf00      	nop
 8004af0:	08004dec 	.word	0x08004dec

08004af4 <USBD_LL_ClearStallEP>:
{
 8004af4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004af6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004afa:	f7fd f80d 	bl	8001b18 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8004afe:	2803      	cmp	r0, #3
 8004b00:	bf96      	itet	ls
 8004b02:	4b02      	ldrls	r3, [pc, #8]	; (8004b0c <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b04:	2003      	movhi	r0, #3
 8004b06:	5c18      	ldrbls	r0, [r3, r0]
}
 8004b08:	bd08      	pop	{r3, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08004dec 	.word	0x08004dec

08004b10 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004b10:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b14:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8004b18:	f04f 0228 	mov.w	r2, #40	; 0x28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b1c:	bf1d      	ittte	ne
 8004b1e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004b22:	fb01 2202 	mlane	r2, r1, r2, r2
 8004b26:	189b      	addne	r3, r3, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b28:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b2c:	bf14      	ite	ne
 8004b2e:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b30:	f893 016a 	ldrbeq.w	r0, [r3, #362]	; 0x16a
}
 8004b34:	4770      	bx	lr
	...

08004b38 <USBD_LL_SetUSBAddress>:
{
 8004b38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004b3a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004b3e:	f7fc fa07 	bl	8000f50 <HAL_PCD_SetAddress>
  switch (hal_status) {
 8004b42:	2803      	cmp	r0, #3
 8004b44:	bf96      	itet	ls
 8004b46:	4b02      	ldrls	r3, [pc, #8]	; (8004b50 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004b48:	2003      	movhi	r0, #3
 8004b4a:	5c18      	ldrbls	r0, [r3, r0]
}
 8004b4c:	bd08      	pop	{r3, pc}
 8004b4e:	bf00      	nop
 8004b50:	08004dec 	.word	0x08004dec

08004b54 <USBD_LL_Transmit>:
{
 8004b54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004b56:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004b5a:	f7fc ff75 	bl	8001a48 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 8004b5e:	2803      	cmp	r0, #3
 8004b60:	bf96      	itet	ls
 8004b62:	4b02      	ldrls	r3, [pc, #8]	; (8004b6c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004b64:	2003      	movhi	r0, #3
 8004b66:	5c18      	ldrbls	r0, [r3, r0]
}
 8004b68:	bd08      	pop	{r3, pc}
 8004b6a:	bf00      	nop
 8004b6c:	08004dec 	.word	0x08004dec

08004b70 <USBD_LL_PrepareReceive>:
{
 8004b70:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004b72:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004b76:	f7fc ff51 	bl	8001a1c <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8004b7a:	2803      	cmp	r0, #3
 8004b7c:	bf96      	itet	ls
 8004b7e:	4b02      	ldrls	r3, [pc, #8]	; (8004b88 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004b80:	2003      	movhi	r0, #3
 8004b82:	5c18      	ldrbls	r0, [r3, r0]
}
 8004b84:	bd08      	pop	{r3, pc}
 8004b86:	bf00      	nop
 8004b88:	08004dec 	.word	0x08004dec

08004b8c <HAL_PCDEx_LPM_Callback>:
{
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	4604      	mov	r4, r0
  switch (msg)
 8004b90:	b111      	cbz	r1, 8004b98 <HAL_PCDEx_LPM_Callback+0xc>
 8004b92:	2901      	cmp	r1, #1
 8004b94:	d00f      	beq.n	8004bb6 <HAL_PCDEx_LPM_Callback+0x2a>
}
 8004b96:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8004b98:	6983      	ldr	r3, [r0, #24]
 8004b9a:	b133      	cbz	r3, 8004baa <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8004b9c:	f7fb fcdc 	bl	8000558 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <HAL_PCDEx_LPM_Callback+0x44>)
 8004ba2:	6913      	ldr	r3, [r2, #16]
 8004ba4:	f023 0306 	bic.w	r3, r3, #6
 8004ba8:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8004baa:	f8d4 02f4 	ldr.w	r0, [r4, #756]	; 0x2f4
}
 8004bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8004bb2:	f7ff bb14 	b.w	80041de <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8004bb6:	f8d0 02f4 	ldr.w	r0, [r0, #756]	; 0x2f4
 8004bba:	f7ff fb02 	bl	80041c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8004bbe:	69a3      	ldr	r3, [r4, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0e8      	beq.n	8004b96 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004bc4:	4a02      	ldr	r2, [pc, #8]	; (8004bd0 <HAL_PCDEx_LPM_Callback+0x44>)
 8004bc6:	6913      	ldr	r3, [r2, #16]
 8004bc8:	f043 0306 	orr.w	r3, r3, #6
 8004bcc:	6113      	str	r3, [r2, #16]
}
 8004bce:	e7e2      	b.n	8004b96 <HAL_PCDEx_LPM_Callback+0xa>
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <USBD_static_malloc>:
}
 8004bd4:	4800      	ldr	r0, [pc, #0]	; (8004bd8 <USBD_static_malloc+0x4>)
 8004bd6:	4770      	bx	lr
 8004bd8:	20000a94 	.word	0x20000a94

08004bdc <USBD_static_free>:
}
 8004bdc:	4770      	bx	lr

08004bde <memset>:
 8004bde:	4402      	add	r2, r0
 8004be0:	4603      	mov	r3, r0
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d100      	bne.n	8004be8 <memset+0xa>
 8004be6:	4770      	bx	lr
 8004be8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bec:	e7f9      	b.n	8004be2 <memset+0x4>
	...

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	; (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	; (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	; (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	; (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f82e 	bl	8004c64 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08004df8 	.word	0x08004df8
 8004c2c:	08004df8 	.word	0x08004df8
 8004c30:	08004df8 	.word	0x08004df8
 8004c34:	08004dfc 	.word	0x08004dfc

08004c38 <strcpy>:
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c3e:	f803 2b01 	strb.w	r2, [r3], #1
 8004c42:	2a00      	cmp	r2, #0
 8004c44:	d1f9      	bne.n	8004c3a <strcpy+0x2>
 8004c46:	4770      	bx	lr

08004c48 <memcpy>:
 8004c48:	440a      	add	r2, r1
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c50:	d100      	bne.n	8004c54 <memcpy+0xc>
 8004c52:	4770      	bx	lr
 8004c54:	b510      	push	{r4, lr}
 8004c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c5e:	4291      	cmp	r1, r2
 8004c60:	d1f9      	bne.n	8004c56 <memcpy+0xe>
 8004c62:	bd10      	pop	{r4, pc}

08004c64 <_init>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr

08004c70 <_fini>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr
