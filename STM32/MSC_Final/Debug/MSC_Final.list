
MSC_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800cecc  0800cecc  0001cecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfd0  0800cfd0  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfd0  0800cfd0  0001cfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfd8  0800cfd8  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfd8  0800cfd8  0001cfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfdc  0800cfdc  0001cfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800cfe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aac  20000194  0800d174  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00001600  20001c40  0800d174  00021c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019263  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ff  00000000  00000000  0003946a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f81  00000000  00000000  0003ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025590  00000000  00000000  0003fd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cfd7  00000000  00000000  00065329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c90dc  00000000  00000000  00082300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059a8  00000000  00000000  0014b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00150d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ceb4 	.word	0x0800ceb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0800ceb4 	.word	0x0800ceb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a23      	ldr	r2, [pc, #140]	; (8000614 <MX_GPIO_Init+0xa8>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_GPIO_Init+0xa8>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_GPIO_Init+0xa8>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MX_GPIO_Init+0xa8>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_GPIO_Init+0xa8>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_GPIO_Init+0xa8>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_GPIO_Init+0xa8>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_GPIO_Init+0xa8>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2109      	movs	r1, #9
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0xac>)
 80005d0:	f001 f878 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0xac>)
 80005ec:	f000 ff00 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80005f0:	2308      	movs	r3, #8
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0xac>)
 8000608:	f000 fef2 	bl	80013f0 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fd5f 	bl	80010e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f80c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f7ff ffa0 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f9fe 	bl	8000a2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 f86e 	bl	8000710 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000634:	f00a ff58 	bl	800b4e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  W25QXX_Init();
 8000638:	f000 fb00 	bl	8000c3c <W25QXX_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x20>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00b fe0f 	bl	800c272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f002 fe0f 	bl	8003288 <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 f848 	bl	8000704 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 fdea 	bl	800324c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <SystemClock_Config+0xc0>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xc0>)
 8000680:	f023 0318 	bic.w	r3, r3, #24
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000688:	2314      	movs	r3, #20
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a8:	2318      	movs	r3, #24
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fe49 	bl	8003354 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f81c 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fa49 	bl	8003b7c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f0:	f000 f808 	bl	8000704 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f4:	f003 fe5c 	bl	80043b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f8:	bf00      	nop
 80006fa:	3758      	adds	r7, #88	; 0x58
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_SPI1_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_SPI1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_SPI1_Init+0x74>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_SPI1_Init+0x74>)
 800072a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800072e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x74>)
 800073e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000742:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x74>)
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x74>)
 800075e:	2207      	movs	r2, #7
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x74>)
 800076a:	2208      	movs	r2, #8
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_SPI1_Init+0x74>)
 8000770:	f003 ff20 	bl	80045b4 <HAL_SPI_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800077a:	f7ff ffc3 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001b0 	.word	0x200001b0
 8000788:	40013000 	.word	0x40013000

0800078c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x7c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d128      	bne.n	8000800 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80007de:	23c2      	movs	r3, #194	; 0xc2
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ee:	2305      	movs	r3, #5
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fdf8 	bl	80013f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013000 	.word	0x40013000
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6613      	str	r3, [r2, #96]	; 0x60
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x44>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6593      	str	r3, [r2, #88]	; 0x58
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 fc72 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USB_IRQHandler+0x10>)
 80008b2:	f001 f847 	bl	8001944 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000784 	.word	0x20000784

080008c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
  }

  return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
  }
  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
  return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f00b fca0 	bl	800c310 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20010000 	.word	0x20010000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000214 	.word	0x20000214
 8000a04:	20001c40 	.word	0x20001c40

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a32:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <MX_USART2_UART_Init+0x5c>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a70:	f004 f9ca 	bl	8004e08 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f7ff fe43 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000218 	.word	0x20000218
 8000a88:	40004400 	.word	0x40004400

08000a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	; 0x78
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2254      	movs	r2, #84	; 0x54
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00b fbe0 	bl	800c272 <memset>
  if(uartHandle->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_UART_MspInit+0xcc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d148      	bne.n	8000b4e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fa7b 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff fe16 	bl	8000704 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xd0>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fc63 	bl	80013f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fc51 	bl	80013f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3778      	adds	r7, #120	; 0x78
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ff50 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f00b fbc5 	bl	800c31c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fd43 	bl	800061c <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8000ba4:	0800cfe0 	.word	0x0800cfe0
  ldr r2, =_sbss
 8000ba8:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8000bac:	20001c40 	.word	0x20001c40

08000bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_IRQHandler>
	...

08000bb4 <SPI2_ReadWriteByte>:

//SPI1 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
u8 SPI2_ReadWriteByte(u8 TxData)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 8000bbe:	f107 020f 	add.w	r2, r7, #15
 8000bc2:	1df9      	adds	r1, r7, #7
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <SPI2_ReadWriteByte+0x28>)
 8000bce:	f003 fd94 	bl	80046fa <HAL_SPI_TransmitReceive>
    return Rxdata;          		    //返回收到的数据
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001b0 	.word	0x200001b0

08000be0 <SPI2_SetSpeed>:

void SPI2_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
    __HAL_SPI_DISABLE(&hspi1);            //关闭SPI
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bf8:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8000c08:	400b      	ands	r3, r1
 8000c0a:	6013      	str	r3, [r2, #0]
    hspi1.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi1);             //使能SPI
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SPI2_SetSpeed+0x58>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c2a:	601a      	str	r2, [r3, #0]

}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	200001b0 	.word	0x200001b0

08000c3c <W25QXX_Init>:

//初始化SPI FLASH的IO口
void W25QXX_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
    u8 temp;
    GPIO_InitTypeDef GPIO_Initure;

//    __HAL_RCC_GPIOB_CLK_ENABLE();           //使能GPIOB时钟
     __HAL_RCC_GPIOA_CLK_ENABLE();           //使能GPIOB时钟
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <W25QXX_Init+0x9c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <W25QXX_Init+0x9c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <W25QXX_Init+0x9c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

    //SPI1_CS_Pin
    GPIO_Initure.Pin=SPI1_CS_Pin;          	//PA4
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&GPIO_Initure);     //初始化
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 fbbc 	bl	80013f0 <HAL_GPIO_Init>

    W25QXX_CS_1;			                //SPI FLASH不选中
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <W25QXX_Init+0xa0>)
 8000c7e:	f000 fd21 	bl	80016c4 <HAL_GPIO_WritePin>
//    SPI2_Init();		   			        //初始化SPI
    SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_2); //设置为42M时钟,高速模式
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff ffac 	bl	8000be0 <SPI2_SetSpeed>
    W25QXX_TYPE = W25QXX_ReadID();	        //读取FLASH ID.
 8000c88:	f000 f87c 	bl	8000d84 <W25QXX_ReadID>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <W25QXX_Init+0xa4>)
 8000c92:	801a      	strh	r2, [r3, #0]
		printf("flash_ID:%d \r\n",W25QXX_TYPE);
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <W25QXX_Init+0xa4>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <W25QXX_Init+0xa8>)
 8000c9c:	f00b fa94 	bl	800c1c8 <iprintf>
//    if(W25QXX_TYPE==W25Q64)                //SPI FLASH为W25Q32
//    {
        temp=W25QXX_ReadSR(3);              //读取状态寄存器3，判断地址模式
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f821 	bl	8000ce8 <W25QXX_ReadSR>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	77fb      	strb	r3, [r7, #31]
        if((temp&0X01)==0)			        //如果不是4字节地址模式,则进入4字节地址模式
 8000caa:	7ffb      	ldrb	r3, [r7, #31]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10c      	bne.n	8000cce <W25QXX_Init+0x92>
        {
            W25QXX_CS_0; 			        //选中
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <W25QXX_Init+0xa0>)
 8000cba:	f000 fd03 	bl	80016c4 <HAL_GPIO_WritePin>
            SPI2_ReadWriteByte(W25X_Enable4ByteAddr);//发送进入4字节地址模式指令
 8000cbe:	20b7      	movs	r0, #183	; 0xb7
 8000cc0:	f7ff ff78 	bl	8000bb4 <SPI2_ReadWriteByte>
            W25QXX_CS_1;       		        //取消片选
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <W25QXX_Init+0xa0>)
 8000cca:	f000 fcfb 	bl	80016c4 <HAL_GPIO_WritePin>
        }
//    }
}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	0800cecc 	.word	0x0800cecc

08000ce8 <W25QXX_ReadSR>:
//BIT7      6    5    4   3   2   1   0
//HOLD/RST  DRV1 DRV0 (R) (R) WPS ADP ADS
//regno:状态寄存器号，范:1~3
//返回值:状态寄存器值
u8 W25QXX_ReadSR(u8 regno)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
    u8 byte=0,command=0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73bb      	strb	r3, [r7, #14]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
    switch(regno)
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d00c      	beq.n	8000d1a <W25QXX_ReadSR+0x32>
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dc0d      	bgt.n	8000d20 <W25QXX_ReadSR+0x38>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <W25QXX_ReadSR+0x26>
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d003      	beq.n	8000d14 <W25QXX_ReadSR+0x2c>
 8000d0c:	e008      	b.n	8000d20 <W25QXX_ReadSR+0x38>
    {
        case 1:
            command=W25X_ReadStatusReg1;    //读状态寄存器1指令
 8000d0e:	2305      	movs	r3, #5
 8000d10:	73fb      	strb	r3, [r7, #15]
            break;
 8000d12:	e008      	b.n	8000d26 <W25QXX_ReadSR+0x3e>
        case 2:
            command=W25X_ReadStatusReg2;    //读状态寄存器2指令
 8000d14:	2335      	movs	r3, #53	; 0x35
 8000d16:	73fb      	strb	r3, [r7, #15]
            break;
 8000d18:	e005      	b.n	8000d26 <W25QXX_ReadSR+0x3e>
        case 3:
            command=W25X_ReadStatusReg3;    //读状态寄存器3指令
 8000d1a:	2315      	movs	r3, #21
 8000d1c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d1e:	e002      	b.n	8000d26 <W25QXX_ReadSR+0x3e>
        default:
            command=W25X_ReadStatusReg1;
 8000d20:	2305      	movs	r3, #5
 8000d22:	73fb      	strb	r3, [r7, #15]
            break;
 8000d24:	bf00      	nop
    }
    W25QXX_CS_0;                            //使能器件
 8000d26:	2200      	movs	r2, #0
 8000d28:	2101      	movs	r1, #1
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <W25QXX_ReadSR+0x70>)
 8000d2c:	f000 fcca 	bl	80016c4 <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(command);            //发送读取状态寄存器命令
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff3e 	bl	8000bb4 <SPI2_ReadWriteByte>
    byte=SPI2_ReadWriteByte(0Xff);          //读取一个字节
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	f7ff ff3b 	bl	8000bb4 <SPI2_ReadWriteByte>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73bb      	strb	r3, [r7, #14]
    W25QXX_CS_1;                            //取消片选
 8000d42:	2201      	movs	r2, #1
 8000d44:	2101      	movs	r1, #1
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <W25QXX_ReadSR+0x70>)
 8000d48:	f000 fcbc 	bl	80016c4 <HAL_GPIO_WritePin>
    return byte;
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	48000400 	.word	0x48000400

08000d5c <W25QXX_Write_Enable>:
    W25QXX_CS_1;                            //取消片选
}
//W25QXX写使能
//将WEL置位
void W25QXX_Write_Enable(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    W25QXX_CS_0;                            //使能器件
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <W25QXX_Write_Enable+0x24>)
 8000d66:	f000 fcad 	bl	80016c4 <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(W25X_WriteEnable);   //发送写使能
 8000d6a:	2006      	movs	r0, #6
 8000d6c:	f7ff ff22 	bl	8000bb4 <SPI2_ReadWriteByte>
    W25QXX_CS_1;                            //取消片选
 8000d70:	2201      	movs	r2, #1
 8000d72:	2101      	movs	r1, #1
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <W25QXX_Write_Enable+0x24>)
 8000d76:	f000 fca5 	bl	80016c4 <HAL_GPIO_WritePin>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	48000400 	.word	0x48000400

08000d84 <W25QXX_ReadID>:
//0XEF15,表示芯片型号为W25Q32
//0XEF16,表示芯片型号为W25Q64
//0XEF17,表示芯片型号为W25Q128
//0XEF18,表示芯片型号为W25Q256
u16 W25QXX_ReadID(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
    u16 Temp = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	80fb      	strh	r3, [r7, #6]
    W25QXX_CS_0;
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2101      	movs	r1, #1
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <W25QXX_ReadID+0x68>)
 8000d94:	f000 fc96 	bl	80016c4 <HAL_GPIO_WritePin>
    SPI2_ReadWriteByte(0x90);//发送读取ID命令
 8000d98:	2090      	movs	r0, #144	; 0x90
 8000d9a:	f7ff ff0b 	bl	8000bb4 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff ff08 	bl	8000bb4 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff05 	bl	8000bb4 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff02 	bl	8000bb4 <SPI2_ReadWriteByte>
    Temp|=SPI2_ReadWriteByte(0xFF)<<8;
 8000db0:	20ff      	movs	r0, #255	; 0xff
 8000db2:	f7ff feff 	bl	8000bb4 <SPI2_ReadWriteByte>
 8000db6:	4603      	mov	r3, r0
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	80fb      	strh	r3, [r7, #6]
    Temp|=SPI2_ReadWriteByte(0xFF);
 8000dc6:	20ff      	movs	r0, #255	; 0xff
 8000dc8:	f7ff fef4 	bl	8000bb4 <SPI2_ReadWriteByte>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	80fb      	strh	r3, [r7, #6]
    W25QXX_CS_1;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <W25QXX_ReadID+0x68>)
 8000ddc:	f000 fc72 	bl	80016c4 <HAL_GPIO_WritePin>
    return Temp;
 8000de0:	88fb      	ldrh	r3, [r7, #6]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	48000400 	.word	0x48000400

08000df0 <SPI_FLASH_BufferRead>:
* @param   ReadAddr，读取地址
* @param   NumByteToRead，读取数据长度
* @retval 无
*/
void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	80fb      	strh	r3, [r7, #6]
    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <SPI_FLASH_BufferRead+0x74>)
 8000e04:	f000 fc5e 	bl	80016c4 <HAL_GPIO_WritePin>

    /* 发送 读 指令 */
    SPI2_ReadWriteByte(W25X_ReadData);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f7ff fed3 	bl	8000bb4 <SPI2_ReadWriteByte>

    /* 发送 读 地址高位 */
    SPI2_ReadWriteByte((ReadAddr & 0xFF0000) >> 16);
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fecd 	bl	8000bb4 <SPI2_ReadWriteByte>
    /* 发送 读 地址中位 */
    SPI2_ReadWriteByte((ReadAddr& 0xFF00) >> 8);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fec7 	bl	8000bb4 <SPI2_ReadWriteByte>
    /* 发送 读 地址低位 */
    SPI2_ReadWriteByte(ReadAddr & 0xFF);
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fec2 	bl	8000bb4 <SPI2_ReadWriteByte>

    /* 读取数据 */
    while (NumByteToRead--) /* while there is data to be read */
 8000e30:	e009      	b.n	8000e46 <SPI_FLASH_BufferRead+0x56>
    {
        /* 读取一个字节*/
        *pBuffer = SPI2_ReadWriteByte(0xFF);
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	f7ff febe 	bl	8000bb4 <SPI2_ReadWriteByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	701a      	strb	r2, [r3, #0]
        /* 指向下一个字节缓冲区 */
        pBuffer++;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
    while (NumByteToRead--) /* while there is data to be read */
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	80fa      	strh	r2, [r7, #6]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f0      	bne.n	8000e32 <SPI_FLASH_BufferRead+0x42>
    }

    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SPI_FLASH_BufferRead+0x74>)
 8000e56:	f000 fc35 	bl	80016c4 <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	48000400 	.word	0x48000400

08000e68 <SPI_FLASH_WaitForWriteEnd>:
 * @brief  等待WIP(BUSY)标志被置0，即等待到FLASH内部数据写入完毕
 * @param  none
 * @retval none
 */
void SPI_FLASH_WaitForWriteEnd(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
    u8 FLASH_Status = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]

    /* 选择 FLASH: CS 低 */
    W25QXX_CS_0;
 8000e72:	2200      	movs	r2, #0
 8000e74:	2101      	movs	r1, #1
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <SPI_FLASH_WaitForWriteEnd+0x40>)
 8000e78:	f000 fc24 	bl	80016c4 <HAL_GPIO_WritePin>

    /* 发送 读状态寄存器 命令 */
    SPI2_ReadWriteByte(W25X_ReadStatusReg1);
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f7ff fe99 	bl	8000bb4 <SPI2_ReadWriteByte>

    /* 若FLASH忙碌，则等待 */
    do
    {
        /* 读取FLASH芯片的状态寄存器 */
        FLASH_Status = SPI2_ReadWriteByte(0xFF);
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	f7ff fe96 	bl	8000bb4 <SPI2_ReadWriteByte>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
    }
    while ((FLASH_Status & WIP_Flag) == SET);  /* 正在写入标志 */
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f5      	bne.n	8000e82 <SPI_FLASH_WaitForWriteEnd+0x1a>

    /* 停止信号  FLASH: CS 高 */
    W25QXX_CS_1;
 8000e96:	2201      	movs	r2, #1
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <SPI_FLASH_WaitForWriteEnd+0x40>)
 8000e9c:	f000 fc12 	bl	80016c4 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	48000400 	.word	0x48000400

08000eac <SPI_FLASH_SectorErase>:
 * @brief  擦除FLASH扇区
 * @param  SectorAddr：要擦除的扇区地址
 * @retval 无
 */
void SPI_FLASH_SectorErase(u32 SectorAddr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

    /* 发送FLASH写使能命令 */
    W25QXX_Write_Enable();
 8000eb4:	f7ff ff52 	bl	8000d5c <W25QXX_Write_Enable>
    SPI_FLASH_WaitForWriteEnd();
 8000eb8:	f7ff ffd6 	bl	8000e68 <SPI_FLASH_WaitForWriteEnd>
    /* 擦除扇区 */
    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <SPI_FLASH_SectorErase+0x58>)
 8000ec2:	f000 fbff 	bl	80016c4 <HAL_GPIO_WritePin>
    /* 发送扇区擦除指令*/
    SPI2_ReadWriteByte(W25X_SectorErase);
 8000ec6:	2020      	movs	r0, #32
 8000ec8:	f7ff fe74 	bl	8000bb4 <SPI2_ReadWriteByte>
    /*发送擦除扇区地址的高位*/
    SPI2_ReadWriteByte((u8)((SectorAddr)>>16));   //发送24bit地址
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe6e 	bl	8000bb4 <SPI2_ReadWriteByte>
    SPI2_ReadWriteByte((u8)((SectorAddr)>>8));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe68 	bl	8000bb4 <SPI2_ReadWriteByte>
    /* 发送擦除扇区地址的低位 */
    SPI2_ReadWriteByte(SectorAddr & 0xFF);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe63 	bl	8000bb4 <SPI2_ReadWriteByte>
    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <SPI_FLASH_SectorErase+0x58>)
 8000ef4:	f000 fbe6 	bl	80016c4 <HAL_GPIO_WritePin>
    /* 等待擦除完毕*/
    SPI_FLASH_WaitForWriteEnd();
 8000ef8:	f7ff ffb6 	bl	8000e68 <SPI_FLASH_WaitForWriteEnd>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	48000400 	.word	0x48000400

08000f08 <SPI_FLASH_PageWrite>:
 * @param WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度，必须小于等于SPI_FLASH_PerWritePageSize
 * @retval 无
 */
void SPI_FLASH_PageWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
    /* 发送FLASH写使能命令 */
    W25QXX_Write_Enable();
 8000f16:	f7ff ff21 	bl	8000d5c <W25QXX_Write_Enable>

    /* 选择FLASH: CS低电平 */
    W25QXX_CS_0;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	481b      	ldr	r0, [pc, #108]	; (8000f8c <SPI_FLASH_PageWrite+0x84>)
 8000f20:	f000 fbd0 	bl	80016c4 <HAL_GPIO_WritePin>
    /* 写页写指令*/
    SPI2_ReadWriteByte(W25X_PageProgram);
 8000f24:	2002      	movs	r0, #2
 8000f26:	f7ff fe45 	bl	8000bb4 <SPI2_ReadWriteByte>
    /*发送写地址的高位*/
    SPI2_ReadWriteByte((WriteAddr & 0xFF0000) >> 16);
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe3f 	bl	8000bb4 <SPI2_ReadWriteByte>
    /*发送写地址的中位*/
    SPI2_ReadWriteByte((WriteAddr & 0xFF00) >> 8);
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe39 	bl	8000bb4 <SPI2_ReadWriteByte>
    /*发送写地址的低位*/
    SPI2_ReadWriteByte(WriteAddr & 0xFF);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe34 	bl	8000bb4 <SPI2_ReadWriteByte>

    if(NumByteToWrite > SPI_FLASH_PageSize)
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f52:	d90b      	bls.n	8000f6c <SPI_FLASH_PageWrite+0x64>
    {
        NumByteToWrite = SPI_FLASH_PerWritePageSize;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	80fb      	strh	r3, [r7, #6]
        //FLASH_ERROR("SPI_FLASH_PageWrite too large!");
    }

    /* 写入数据*/
    while (NumByteToWrite--)
 8000f5a:	e007      	b.n	8000f6c <SPI_FLASH_PageWrite+0x64>
    {
        /* 发送当前要写入的字节数据 */
        SPI2_ReadWriteByte(*pBuffer);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe27 	bl	8000bb4 <SPI2_ReadWriteByte>
        /* 指向下一字节数据 */
        pBuffer++;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
    while (NumByteToWrite--)
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	80fa      	strh	r2, [r7, #6]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f2      	bne.n	8000f5c <SPI_FLASH_PageWrite+0x54>
    }

    /* 停止信号 FLASH: CS 高电平 */
    W25QXX_CS_1;
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <SPI_FLASH_PageWrite+0x84>)
 8000f7c:	f000 fba2 	bl	80016c4 <HAL_GPIO_WritePin>

    /* 等待写入完毕*/
    SPI_FLASH_WaitForWriteEnd();
 8000f80:	f7ff ff72 	bl	8000e68 <SPI_FLASH_WaitForWriteEnd>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	48000400 	.word	0x48000400

08000f90 <SPI_FLASH_BufferWrite>:
 * @param  WriteAddr，写入地址
 * @param  NumByteToWrite，写入数据长度
 * @retval 无
 */
void SPI_FLASH_BufferWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80fb      	strh	r3, [r7, #6]
    u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75bb      	strb	r3, [r7, #22]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	757b      	strb	r3, [r7, #21]
 8000faa:	2300      	movs	r3, #0
 8000fac:	753b      	strb	r3, [r7, #20]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	74fb      	strb	r3, [r7, #19]

    /*mod运算求余，若writeAddr是SPI_FLASH_PageSize整数倍，运算结果Addr值为0*/
    Addr = WriteAddr % SPI_FLASH_PageSize;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	757b      	strb	r3, [r7, #21]

    /*差count个数据值，刚好可以对齐到页地址*/
    count = SPI_FLASH_PageSize - Addr;
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	425b      	negs	r3, r3
 8000fba:	753b      	strb	r3, [r7, #20]
    /*计算出要写多少整数页*/
    NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	75fb      	strb	r3, [r7, #23]
    /*mod运算求余，计算出剩余不满一页的字节数*/
    NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	75bb      	strb	r3, [r7, #22]

    /* Addr=0,则WriteAddr 刚好按页对齐 aligned  */
    if (Addr == 0)
 8000fc8:	7d7b      	ldrb	r3, [r7, #21]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d124      	bne.n	8001018 <SPI_FLASH_BufferWrite+0x88>
    {
        /* NumByteToWrite < SPI_FLASH_PageSize */
        if (NumOfPage == 0)
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d114      	bne.n	8000ffe <SPI_FLASH_BufferWrite+0x6e>
        {
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff ff94 	bl	8000f08 <SPI_FLASH_PageWrite>
            {
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
            }
        }
    }
}
 8000fe0:	e07b      	b.n	80010da <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff ff8d 	bl	8000f08 <SPI_FLASH_PageWrite>
                WriteAddr +=  SPI_FLASH_PageSize;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ff4:	60bb      	str	r3, [r7, #8]
                pBuffer += SPI_FLASH_PageSize;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ffc:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	75fa      	strb	r2, [r7, #23]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ec      	bne.n	8000fe2 <SPI_FLASH_BufferWrite+0x52>
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
 8001008:	7dbb      	ldrb	r3, [r7, #22]
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff ff79 	bl	8000f08 <SPI_FLASH_PageWrite>
}
 8001016:	e060      	b.n	80010da <SPI_FLASH_BufferWrite+0x14a>
        if (NumOfPage == 0)
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d125      	bne.n	800106a <SPI_FLASH_BufferWrite+0xda>
            if (NumOfSingle > count)
 800101e:	7dba      	ldrb	r2, [r7, #22]
 8001020:	7d3b      	ldrb	r3, [r7, #20]
 8001022:	429a      	cmp	r2, r3
 8001024:	d91a      	bls.n	800105c <SPI_FLASH_BufferWrite+0xcc>
                temp = NumOfSingle - count;
 8001026:	7dba      	ldrb	r2, [r7, #22]
 8001028:	7d3b      	ldrb	r3, [r7, #20]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	74fb      	strb	r3, [r7, #19]
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
 800102e:	7d3b      	ldrb	r3, [r7, #20]
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ff66 	bl	8000f08 <SPI_FLASH_PageWrite>
                WriteAddr +=  count;
 800103c:	7d3b      	ldrb	r3, [r7, #20]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	4413      	add	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
                pBuffer += count;
 8001044:	7d3b      	ldrb	r3, [r7, #20]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, temp);
 800104c:	7cfb      	ldrb	r3, [r7, #19]
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff ff57 	bl	8000f08 <SPI_FLASH_PageWrite>
}
 800105a:	e03e      	b.n	80010da <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	461a      	mov	r2, r3
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff50 	bl	8000f08 <SPI_FLASH_PageWrite>
}
 8001068:	e037      	b.n	80010da <SPI_FLASH_BufferWrite+0x14a>
            NumByteToWrite -= count;
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	b29b      	uxth	r3, r3
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	80fb      	strh	r3, [r7, #6]
            NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	75fb      	strb	r3, [r7, #23]
            NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	75bb      	strb	r3, [r7, #22]
            SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ff3d 	bl	8000f08 <SPI_FLASH_PageWrite>
            WriteAddr +=  count;
 800108e:	7d3b      	ldrb	r3, [r7, #20]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
            pBuffer += count;
 8001096:	7d3b      	ldrb	r3, [r7, #20]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 800109e:	e00d      	b.n	80010bc <SPI_FLASH_BufferWrite+0x12c>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ff2e 	bl	8000f08 <SPI_FLASH_PageWrite>
                WriteAddr +=  SPI_FLASH_PageSize;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010b2:	60bb      	str	r3, [r7, #8]
                pBuffer += SPI_FLASH_PageSize;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
            while (NumOfPage--)
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	75fa      	strb	r2, [r7, #23]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ec      	bne.n	80010a0 <SPI_FLASH_BufferWrite+0x110>
            if (NumOfSingle != 0)
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <SPI_FLASH_BufferWrite+0x14a>
                SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff ff17 	bl	8000f08 <SPI_FLASH_PageWrite>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f93d 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f80e 	bl	8001114 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	e001      	b.n	8001108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001104:	f7ff fb84 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_InitTick+0x70>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f949 	bl	80013d6 <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d809      	bhi.n	8001164 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f913 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0x74>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e007      	b.n	8001174 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e004      	b.n	8001174 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	200002a0 	.word	0x200002a0

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200002a0 	.word	0x200002a0

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e148      	b.n	8001692 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 813a 	beq.w	800168c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x40>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8094 	beq.w	800168c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <HAL_GPIO_Init+0x2c0>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x2c0>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6613      	str	r3, [r2, #96]	; 0x60
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_GPIO_Init+0x2c0>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800157c:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x2c4>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1d4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <HAL_GPIO_Init+0x2c8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1d0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a42      	ldr	r2, [pc, #264]	; (80016bc <HAL_GPIO_Init+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1cc>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e004      	b.n	80015c6 <HAL_GPIO_Init+0x1d6>
 80015bc:	2307      	movs	r3, #7
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x1d6>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_Init+0x1d6>
 80015c4:	2300      	movs	r3, #0
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d6:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_GPIO_Init+0x2c4>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001608:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	f47f aeaf 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000800 	.word	0x48000800
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b08b      	sub	sp, #44	; 0x2c
 80016f8:	af06      	add	r7, sp, #24
 80016fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0f8      	b.n	80018f8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f00a f8c0 	bl	800b8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2203      	movs	r2, #3
 8001724:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f004 f822 	bl	8005776 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	1d33      	adds	r3, r6, #4
 800174a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f003 ffea 	bl	8005726 <USB_CoreInit>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0c9      	b.n	80018f8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f004 f81e 	bl	80057ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e040      	b.n	80017f8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	3301      	adds	r3, #1
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3303      	adds	r3, #3
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3338      	adds	r3, #56	; 0x38
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	333c      	adds	r3, #60	; 0x3c
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3340      	adds	r3, #64	; 0x40
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	3301      	adds	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3b9      	bcc.n	8001776 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e044      	b.n	8001892 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	f203 1369 	addw	r3, r3, #361	; 0x169
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	3301      	adds	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d3b5      	bcc.n	8001808 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	687e      	ldr	r6, [r7, #4]
 80018a4:	466d      	mov	r5, sp
 80018a6:	f106 0410 	add.w	r4, r6, #16
 80018aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	602b      	str	r3, [r5, #0]
 80018b2:	1d33      	adds	r3, r6, #4
 80018b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b6:	6838      	ldr	r0, [r7, #0]
 80018b8:	f003 ff85 	bl	80057c6 <USB_DevInit>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e014      	b.n	80018f8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f001 fc85 	bl	80031f6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f006 fa2d 	bl	8007d50 <USB_DevDisconnect>

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001900 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_PCD_Start+0x16>
 8001912:	2302      	movs	r3, #2
 8001914:	e012      	b.n	800193c <HAL_PCD_Start+0x3c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f003 ff10 	bl	8005748 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f006 f9f8 	bl	8007d22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fa12 	bl	8007d7a <USB_ReadInterrupts>
 8001956:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fb40 	bl	8001fe8 <PCD_EP_ISR_Handler>

    return;
 8001968:	e110      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001986:	b292      	uxth	r2, r2
 8001988:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f00a f828 	bl	800b9e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f8fc 	bl	8001b92 <HAL_PCD_SetAddress>

    return;
 800199a:	e0f7      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019b8:	b292      	uxth	r2, r2
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019be:	e0e5      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00c      	beq.n	80019e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019e2:	e0d3      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d034      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0204 	bic.w	r2, r2, #4
 8001a00:	b292      	uxth	r2, r2
 8001a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0208 	bic.w	r2, r2, #8
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f00a fab2 	bl	800bf9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f00a f80b 	bl	800ba54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a50:	b292      	uxth	r2, r2
 8001a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a56:	e099      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d027      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0208 	orr.w	r2, r2, #8
 8001a74:	b292      	uxth	r2, r2
 8001a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0204 	orr.w	r2, r2, #4
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f009 ffb8 	bl	800ba20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ab0:	e06c      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d040      	beq.n	8001b3e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d12b      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0204 	orr.w	r2, r2, #4
 8001af0:	b292      	uxth	r2, r2
 8001af2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0208 	orr.w	r2, r2, #8
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f00a fa34 	bl	800bf9c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001b34:	e02a      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f009 ff72 	bl	800ba20 <HAL_PCD_SuspendCallback>
    return;
 8001b3c:	e026      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f009 ff30 	bl	800b9c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b66:	e011      	b.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b84:	b292      	uxth	r2, r2
 8001b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b8a:	bf00      	nop
  }
}
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_PCD_SetAddress+0x1a>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e013      	b.n	8001bd4 <HAL_PCD_SetAddress+0x42>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 f898 	bl	8007cfa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	70fb      	strb	r3, [r7, #3]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	803b      	strh	r3, [r7, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0e      	bge.n	8001c20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	705a      	strb	r2, [r3, #1]
 8001c1e:	e00e      	b.n	8001c3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 0207 	and.w	r2, r3, #7
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	78ba      	ldrb	r2, [r7, #2]
 8001c54:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c56:	78bb      	ldrb	r3, [r7, #2]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_PCD_EP_Open+0x94>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e00e      	b.n	8001c8e <HAL_PCD_EP_Open+0xb2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fdda 	bl	8005838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da0e      	bge.n	8001cc8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	e00e      	b.n	8001ce6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 0207 	and.w	r2, r3, #7
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_EP_Close+0x6a>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00e      	b.n	8001d1e <HAL_PCD_EP_Close+0x88>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 f956 	bl	8005fc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 fb0e 	bl	800639a <USB_EPStartXfer>

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 0207 	and.w	r2, r3, #7
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2201      	movs	r2, #1
 8001e02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 fabf 	bl	800639a <USB_EPStartXfer>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0207 	and.w	r2, r3, #7
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d901      	bls.n	8001e44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04c      	b.n	8001ede <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da0e      	bge.n	8001e6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	705a      	strb	r2, [r3, #1]
 8001e68:	e00c      	b.n	8001e84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_PCD_EP_SetStall+0x7e>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e01c      	b.n	8001ede <HAL_PCD_EP_SetStall+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 fe22 	bl	8007afc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d108      	bne.n	8001ed4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f005 ff63 	bl	8007d9a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d901      	bls.n	8001f04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e040      	b.n	8001f86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da0e      	bge.n	8001f2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	705a      	strb	r2, [r3, #1]
 8001f28:	e00e      	b.n	8001f48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 0207 	and.w	r2, r3, #7
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_PCD_EP_ClrStall+0x82>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e00e      	b.n	8001f86 <HAL_PCD_EP_ClrStall+0xa0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f005 fe11 	bl	8007b9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Flush+0x1a>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e01b      	b.n	8001fe0 <HAL_PCD_EP_Flush+0x52>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da09      	bge.n	8001fcc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f003 fc1f 	bl	8005808 <USB_FlushTxFifo>
 8001fca:	e004      	b.n	8001fd6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fc25 	bl	8005820 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b096      	sub	sp, #88	; 0x58
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ff0:	e3b1      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800200c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8173 	bne.w	80022fc <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d150      	bne.n	80020c4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	81fb      	strh	r3, [r7, #14]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002042:	b29b      	uxth	r3, r3
 8002044:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3328      	adds	r3, #40	; 0x28
 800204a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	4413      	add	r3, r2
 8002066:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	441a      	add	r2, r3
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f009 fc84 	bl	800b992 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 835f 	beq.w	8002756 <PCD_EP_ISR_Handler+0x76e>
 8002098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 835a 	bne.w	8002756 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b292      	uxth	r2, r2
 80020b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020c2:	e348      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ca:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d032      	beq.n	8002148 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002108:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800211c:	b29b      	uxth	r3, r3
 800211e:	f005 fe8a 	bl	8007e36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800212e:	4013      	ands	r3, r2
 8002130:	823b      	strh	r3, [r7, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	8a3a      	ldrh	r2, [r7, #16]
 8002138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f009 fbf9 	bl	800b938 <HAL_PCD_SetupStageCallback>
 8002146:	e306      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002148:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800214c:	2b00      	cmp	r3, #0
 800214e:	f280 8302 	bge.w	8002756 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29a      	uxth	r2, r3
 800215a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800215e:	4013      	ands	r3, r2
 8002160:	83fb      	strh	r3, [r7, #30]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	8bfa      	ldrh	r2, [r7, #30]
 8002168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4413      	add	r3, r2
 800218a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002196:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x1ec>
 80021a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	6959      	ldr	r1, [r3, #20]
 80021b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f005 fe3c 	bl	8007e36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	441a      	add	r2, r3
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f009 fbc4 	bl	800b95c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80021de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 82b5 	bne.w	8002756 <PCD_EP_ISR_Handler+0x76e>
 80021ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80021f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021f8:	f000 82ad 	beq.w	8002756 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002226:	b29a      	uxth	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b3e      	cmp	r3, #62	; 0x3e
 8002232:	d91d      	bls.n	8002270 <PCD_EP_ISR_Handler+0x288>
 8002234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <PCD_EP_ISR_Handler+0x266>
 8002248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224a:	3b01      	subs	r3, #1
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29a      	uxth	r2, r3
 8002254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002256:	b29b      	uxth	r3, r3
 8002258:	029b      	lsls	r3, r3, #10
 800225a:	b29b      	uxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002268:	b29a      	uxth	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e026      	b.n	80022be <PCD_EP_ISR_Handler+0x2d6>
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <PCD_EP_ISR_Handler+0x2a6>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002286:	b29a      	uxth	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	e017      	b.n	80022be <PCD_EP_ISR_Handler+0x2d6>
 800228e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <PCD_EP_ISR_Handler+0x2c0>
 80022a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a4:	3301      	adds	r3, #1
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	827b      	strh	r3, [r7, #18]
 80022d0:	8a7b      	ldrh	r3, [r7, #18]
 80022d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022d6:	827b      	strh	r3, [r7, #18]
 80022d8:	8a7b      	ldrh	r3, [r7, #18]
 80022da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022de:	827b      	strh	r3, [r7, #18]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	8a7b      	ldrh	r3, [r7, #18]
 80022e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8013      	strh	r3, [r2, #0]
 80022fa:	e22c      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002310:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002314:	2b00      	cmp	r3, #0
 8002316:	f280 80f6 	bge.w	8002506 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29a      	uxth	r2, r3
 800232c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002330:	4013      	ands	r3, r2
 8002332:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800234c:	b292      	uxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002350:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	7b1b      	ldrb	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d123      	bne.n	80023b6 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4413      	add	r3, r2
 8002388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002392:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 808e 	beq.w	80024bc <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a6:	6959      	ldr	r1, [r3, #20]
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	88da      	ldrh	r2, [r3, #6]
 80023ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80023b0:	f005 fd41 	bl	8007e36 <USB_ReadPMA>
 80023b4:	e082      	b.n	80024bc <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d10a      	bne.n	80023d4 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023c2:	461a      	mov	r2, r3
 80023c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9d3 	bl	8002772 <HAL_PCD_EP_DB_Receive>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80023d2:	e073      	b.n	80024bc <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002414:	b29b      	uxth	r3, r3
 8002416:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d022      	beq.n	8002478 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4413      	add	r3, r2
 800244c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800245a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02c      	beq.n	80024bc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246c:	891a      	ldrh	r2, [r3, #8]
 800246e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002472:	f005 fce0 	bl	8007e36 <USB_ReadPMA>
 8002476:	e021      	b.n	80024bc <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	4413      	add	r3, r2
 8002492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80024a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	895a      	ldrh	r2, [r3, #10]
 80024b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024b8:	f005 fcbd 	bl	8007e36 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024c4:	441a      	add	r2, r3
 80024c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024d2:	441a      	add	r2, r3
 80024d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <PCD_EP_ISR_Handler+0x504>
 80024e0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d206      	bcs.n	80024fa <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f009 fa32 	bl	800b95c <HAL_PCD_DataOutStageCallback>
 80024f8:	e005      	b.n	8002506 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002500:	4618      	mov	r0, r3
 8002502:	f003 ff4a 	bl	800639a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002506:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8121 	beq.w	8002756 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002514:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800253e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002542:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	441a      	add	r2, r3
 8002554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002560:	b29b      	uxth	r3, r3
 8002562:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	78db      	ldrb	r3, [r3, #3]
 8002568:	2b01      	cmp	r3, #1
 800256a:	f040 80a2 	bne.w	80026b2 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002576:	7b1b      	ldrb	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8093 	beq.w	80026a4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800257e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d046      	beq.n	8002618 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x5f8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	4413      	add	r3, r2
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025b8:	623b      	str	r3, [r7, #32]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	e061      	b.n	80026a4 <PCD_EP_ISR_Handler+0x6bc>
 80025e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d15d      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x6bc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	4413      	add	r3, r2
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	00da      	lsls	r2, r3, #3
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	4413      	add	r3, r2
 800260a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	2200      	movs	r2, #0
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	e045      	b.n	80026a4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d126      	bne.n	8002674 <PCD_EP_ISR_Handler+0x68c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	4413      	add	r3, r2
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	4413      	add	r3, r2
 8002648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	b29a      	uxth	r2, r3
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266c:	b29a      	uxth	r2, r3
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	e017      	b.n	80026a4 <PCD_EP_ISR_Handler+0x6bc>
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d113      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x6bc>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	4413      	add	r3, r2
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	00da      	lsls	r2, r3, #3
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	4413      	add	r3, r2
 8002698:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2200      	movs	r2, #0
 80026a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f009 f971 	bl	800b992 <HAL_PCD_DataInStageCallback>
 80026b0:	e051      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d144      	bne.n	8002748 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d907      	bls.n	8002702 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	619a      	str	r2, [r3, #24]
 8002700:	e002      	b.n	8002708 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f009 f93b 	bl	800b992 <HAL_PCD_DataInStageCallback>
 800271c:	e01b      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002726:	441a      	add	r2, r3
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002734:	441a      	add	r2, r3
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fe2a 	bl	800639a <USB_EPStartXfer>
 8002746:	e006      	b.n	8002756 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002748:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800274c:	461a      	mov	r2, r3
 800274e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f917 	bl	8002984 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800275e:	b29b      	uxth	r3, r3
 8002760:	b21b      	sxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f6ff ac45 	blt.w	8001ff2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3758      	adds	r7, #88	; 0x58
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b088      	sub	sp, #32
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	4613      	mov	r3, r2
 800277e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d07c      	beq.n	8002884 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	8b7b      	ldrh	r3, [r7, #26]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d306      	bcc.n	80027c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	8b7b      	ldrh	r3, [r7, #26]
 80027c0:	1ad2      	subs	r2, r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	619a      	str	r2, [r3, #24]
 80027c6:	e002      	b.n	80027ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d123      	bne.n	800281e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	833b      	strh	r3, [r7, #24]
 80027f2:	8b3b      	ldrh	r3, [r7, #24]
 80027f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027f8:	833b      	strh	r3, [r7, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	441a      	add	r2, r3
 8002808:	8b3b      	ldrh	r3, [r7, #24]
 800280a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01f      	beq.n	8002868 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	82fb      	strh	r3, [r7, #22]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	8afb      	ldrh	r3, [r7, #22]
 8002854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800285c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002860:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002864:	b29b      	uxth	r3, r3
 8002866:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002868:	8b7b      	ldrh	r3, [r7, #26]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8085 	beq.w	800297a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6959      	ldr	r1, [r3, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	891a      	ldrh	r2, [r3, #8]
 800287c:	8b7b      	ldrh	r3, [r7, #26]
 800287e:	f005 fada 	bl	8007e36 <USB_ReadPMA>
 8002882:	e07a      	b.n	800297a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	4413      	add	r3, r2
 800289e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	8b7b      	ldrh	r3, [r7, #26]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d306      	bcc.n	80028c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	8b7b      	ldrh	r3, [r7, #26]
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	619a      	str	r2, [r3, #24]
 80028c0:	e002      	b.n	80028c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d123      	bne.n	8002918 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	83fb      	strh	r3, [r7, #30]
 80028ec:	8bfb      	ldrh	r3, [r7, #30]
 80028ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028f2:	83fb      	strh	r3, [r7, #30]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	8bfb      	ldrh	r3, [r7, #30]
 8002904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	b29b      	uxth	r3, r3
 8002916:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11f      	bne.n	8002962 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	83bb      	strh	r3, [r7, #28]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	441a      	add	r2, r3
 800294c:	8bbb      	ldrh	r3, [r7, #28]
 800294e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002962:	8b7b      	ldrh	r3, [r7, #26]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6959      	ldr	r1, [r3, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	895a      	ldrh	r2, [r3, #10]
 8002974:	8b7b      	ldrh	r3, [r7, #26]
 8002976:	f005 fa5e 	bl	8007e36 <USB_ReadPMA>
    }
  }

  return count;
 800297a:	8b7b      	ldrh	r3, [r7, #26]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0a4      	sub	sp, #144	; 0x90
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 81db 	beq.w	8002d54 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d907      	bls.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	e002      	b.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 80b9 	bne.w	8002b64 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0xc4>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	4413      	add	r3, r2
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	00da      	lsls	r2, r3, #3
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e01a      	b.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d116      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	4413      	add	r3, r2
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00da      	lsls	r2, r3, #3
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d126      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x156>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	00da      	lsls	r2, r3, #3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	e017      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x186>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d113      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x186>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	00da      	lsls	r2, r3, #3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f008 ff3e 	bl	800b992 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 82fa 	beq.w	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3c:	82fb      	strh	r3, [r7, #22]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	8013      	strh	r3, [r2, #0]
 8002b62:	e2d8      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d021      	beq.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 82ac 	bne.w	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d30b      	bcc.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	e017      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002c06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c16:	e00a      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d165      	bne.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	00da      	lsls	r2, r3, #3
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c72:	2b3e      	cmp	r3, #62	; 0x3e
 8002c74:	d91d      	bls.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	e044      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e035      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_PCD_EP_DB_Transmit+0x366>
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	e01c      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d118      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1e:	4413      	add	r3, r2
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	891a      	ldrh	r2, [r3, #8]
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f005 f830 	bl	8007db2 <USB_WritePMA>
 8002d52:	e1e0      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d78:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d307      	bcc.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	619a      	str	r2, [r3, #24]
 8002d96:	e002      	b.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80c0 	bne.w	8002f28 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d126      	bne.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x47a>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dc4:	4413      	add	r3, r2
 8002dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00da      	lsls	r2, r3, #3
 8002dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	e01a      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d116      	bne.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e1a:	4413      	add	r3, r2
 8002e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	00da      	lsls	r2, r3, #3
 8002e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e26:	4413      	add	r3, r2
 8002e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e30:	2200      	movs	r2, #0
 8002e32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d12b      	bne.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x516>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	4413      	add	r3, r2
 8002e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	00da      	lsls	r2, r3, #3
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	4413      	add	r3, r2
 8002e64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e017      	b.n	8002eca <HAL_PCD_EP_DB_Transmit+0x546>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d113      	bne.n	8002eca <HAL_PCD_EP_DB_Transmit+0x546>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb0:	4413      	add	r3, r2
 8002eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00da      	lsls	r2, r3, #3
 8002eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f008 fd5e 	bl	800b992 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 811a 	bne.w	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]
 8002f26:	e0f6      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 80ca 	bne.w	8003116 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f8a:	441a      	add	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f98:	441a      	add	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d30b      	bcc.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	621a      	str	r2, [r3, #32]
 8002fc0:	e017      	b.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002fca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fda:	e00a      	b.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d165      	bne.n	80030cc <HAL_PCD_EP_DB_Transmit+0x748>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003014:	4413      	add	r3, r2
 8003016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	4413      	add	r3, r2
 8003022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
 8003028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003032:	b29a      	uxth	r2, r3
 8003034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303c:	2b3e      	cmp	r3, #62	; 0x3e
 800303e:	d91d      	bls.n	800307c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	66bb      	str	r3, [r7, #104]	; 0x68
 8003048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003056:	3b01      	subs	r3, #1
 8003058:	66bb      	str	r3, [r7, #104]	; 0x68
 800305a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29a      	uxth	r2, r3
 8003060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003062:	b29b      	uxth	r3, r3
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	b29b      	uxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003074:	b29a      	uxth	r2, r3
 8003076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e041      	b.n	8003100 <HAL_PCD_EP_DB_Transmit+0x77c>
 800307c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x716>
 8003084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29a      	uxth	r2, r3
 8003094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e032      	b.n	8003100 <HAL_PCD_EP_DB_Transmit+0x77c>
 800309a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x730>
 80030ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b0:	3301      	adds	r3, #1
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030bc:	b29b      	uxth	r3, r3
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e019      	b.n	8003100 <HAL_PCD_EP_DB_Transmit+0x77c>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d115      	bne.n	8003100 <HAL_PCD_EP_DB_Transmit+0x77c>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	4413      	add	r3, r2
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	00da      	lsls	r2, r3, #3
 80030ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f4:	653b      	str	r3, [r7, #80]	; 0x50
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6959      	ldr	r1, [r3, #20]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	895a      	ldrh	r2, [r3, #10]
 800310c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003110:	b29b      	uxth	r3, r3
 8003112:	f004 fe4e 	bl	8007db2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003130:	82bb      	strh	r3, [r7, #20]
 8003132:	8abb      	ldrh	r3, [r7, #20]
 8003134:	f083 0310 	eor.w	r3, r3, #16
 8003138:	82bb      	strh	r3, [r7, #20]
 800313a:	8abb      	ldrh	r3, [r7, #20]
 800313c:	f083 0320 	eor.w	r3, r3, #32
 8003140:	82bb      	strh	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	8abb      	ldrh	r3, [r7, #20]
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3790      	adds	r7, #144	; 0x90
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	4613      	mov	r3, r2
 8003180:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e009      	b.n	80031ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a6:	897a      	ldrh	r2, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	80da      	strh	r2, [r3, #6]
 80031ce:	e00b      	b.n	80031e8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2201      	movs	r2, #1
 80031d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800321a:	b29b      	uxth	r3, r3
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800322e:	b29b      	uxth	r3, r3
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_PWREx_GetVoltageRange+0x18>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40007000 	.word	0x40007000

08003288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003296:	d130      	bne.n	80032fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d038      	beq.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2232      	movs	r2, #50	; 0x32
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0c9b      	lsrs	r3, r3, #18
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032cc:	e002      	b.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d102      	bne.n	80032e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f2      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d110      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e00f      	b.n	800331a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d007      	beq.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003310:	4a05      	ldr	r2, [pc, #20]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000
 800332c:	20000000 	.word	0x20000000
 8003330:	431bde83 	.word	0x431bde83

08003334 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PWREx_EnableVddUSB+0x1c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_PWREx_EnableVddUSB+0x1c>)
 800333e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003342:	6053      	str	r3, [r2, #4]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f000 bc02 	b.w	8003b6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003368:	4b96      	ldr	r3, [pc, #600]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003372:	4b94      	ldr	r3, [pc, #592]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80e4 	beq.w	8003552 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4c>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	f040 808b 	bne.w	80034ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 8087 	bne.w	80034ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a0:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x64>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e3d9      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCC_OscConfig+0x7e>
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d0:	e005      	b.n	80033de <HAL_RCC_OscConfig+0x8a>
 80033d2:	4b7c      	ldr	r3, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033de:	4293      	cmp	r3, r2
 80033e0:	d223      	bcs.n	800342a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fd8c 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e3ba      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f6:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a72      	ldr	r2, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	496d      	ldr	r1, [pc, #436]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	4968      	ldr	r1, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	e025      	b.n	8003476 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342a:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a65      	ldr	r2, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4960      	ldr	r1, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	495b      	ldr	r1, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fd4c 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e37a      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003476:	f000 fc81 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 800347a:	4602      	mov	r2, r0
 800347c:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4950      	ldr	r1, [pc, #320]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a4e      	ldr	r2, [pc, #312]	; (80035cc <HAL_RCC_OscConfig+0x278>)
 8003494:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003496:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <HAL_RCC_OscConfig+0x27c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fe3a 	bl	8001114 <HAL_InitTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d052      	beq.n	8003550 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	e35e      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d032      	beq.n	800351c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a42      	ldr	r2, [pc, #264]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c2:	f7fd fe77 	bl	80011b4 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ca:	f7fd fe73 	bl	80011b4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e347      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4930      	ldr	r1, [pc, #192]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	492b      	ldr	r1, [pc, #172]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
 800351a:	e01a      	b.n	8003552 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a28      	ldr	r2, [pc, #160]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003528:	f7fd fe44 	bl	80011b4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003530:	f7fd fe40 	bl	80011b4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e314      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1dc>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d073      	beq.n	8003646 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d005      	beq.n	8003570 <HAL_RCC_OscConfig+0x21c>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d10e      	bne.n	8003588 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d063      	beq.n	8003644 <HAL_RCC_OscConfig+0x2f0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d15f      	bne.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e2f1      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x24c>
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e025      	b.n	80035ec <HAL_RCC_OscConfig+0x298>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d114      	bne.n	80035d4 <HAL_RCC_OscConfig+0x280>
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a02      	ldr	r2, [pc, #8]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e013      	b.n	80035ec <HAL_RCC_OscConfig+0x298>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	0800cf30 	.word	0x0800cf30
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000008 	.word	0x20000008
 80035d4:	4ba0      	ldr	r3, [pc, #640]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a9f      	ldr	r2, [pc, #636]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b9d      	ldr	r3, [pc, #628]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a9c      	ldr	r2, [pc, #624]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fdde 	bl	80011b4 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fd fdda 	bl	80011b4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2ae      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	4b92      	ldr	r3, [pc, #584]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x2a8>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fdca 	bl	80011b4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd fdc6 	bl	80011b4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e29a      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003636:	4b88      	ldr	r3, [pc, #544]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d0>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d060      	beq.n	8003714 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d005      	beq.n	8003664 <HAL_RCC_OscConfig+0x310>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d119      	bne.n	8003692 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d116      	bne.n	8003692 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003664:	4b7c      	ldr	r3, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x328>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e277      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	4973      	ldr	r1, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003690:	e040      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fd fd85 	bl	80011b4 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd fd81 	bl	80011b4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e255      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c0:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b62      	ldr	r3, [pc, #392]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	495f      	ldr	r1, [pc, #380]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
 80036e0:	e018      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80036e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd fd61 	bl	80011b4 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fd fd5d 	bl	80011b4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e231      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd fd3c 	bl	80011b4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fd fd38 	bl	80011b4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e20c      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCC_OscConfig+0x3ec>
 8003760:	e01b      	b.n	800379a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003768:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fd1f 	bl	80011b4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377a:	f7fd fd1b 	bl	80011b4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1ef      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ef      	bne.n	800377a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80a6 	beq.w	80038f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x508>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d118      	bne.n	8003812 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HAL_RCC_OscConfig+0x508>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_RCC_OscConfig+0x508>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ec:	f7fd fce2 	bl	80011b4 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd fcde 	bl	80011b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1b2      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_RCC_OscConfig+0x508>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_RCC_OscConfig+0x4d8>
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382a:	e029      	b.n	8003880 <HAL_RCC_OscConfig+0x52c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b05      	cmp	r3, #5
 8003832:	d115      	bne.n	8003860 <HAL_RCC_OscConfig+0x50c>
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	4a03      	ldr	r2, [pc, #12]	; (8003858 <HAL_RCC_OscConfig+0x504>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x52c>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
 8003860:	4b9a      	ldr	r3, [pc, #616]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a99      	ldr	r2, [pc, #612]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003870:	4b96      	ldr	r3, [pc, #600]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a95      	ldr	r2, [pc, #596]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fd fc94 	bl	80011b4 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fd fc90 	bl	80011b4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e162      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a6:	4b89      	ldr	r3, [pc, #548]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ed      	beq.n	8003890 <HAL_RCC_OscConfig+0x53c>
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fd fc7d 	bl	80011b4 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fc79 	bl	80011b4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e14b      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d4:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ed      	bne.n	80038be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e8:	4b78      	ldr	r3, [pc, #480]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03c      	beq.n	800397a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01c      	beq.n	8003942 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003908:	4b70      	ldr	r3, [pc, #448]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 800390a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390e:	4a6f      	ldr	r2, [pc, #444]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fc4c 	bl	80011b4 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003920:	f7fd fc48 	bl	80011b4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e11c      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003932:	4b66      	ldr	r3, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCC_OscConfig+0x5cc>
 8003940:	e01b      	b.n	800397a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003942:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003948:	4a60      	ldr	r2, [pc, #384]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fd fc2f 	bl	80011b4 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395a:	f7fd fc2b 	bl	80011b4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e0ff      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800396c:	4b57      	ldr	r3, [pc, #348]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 800396e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80f3 	beq.w	8003b6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	2b02      	cmp	r3, #2
 800398a:	f040 80c9 	bne.w	8003b20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800398e:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d12c      	bne.n	80039fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	3b01      	subs	r3, #1
 80039ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d123      	bne.n	80039fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d11b      	bne.n	80039fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d113      	bne.n	80039fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d109      	bne.n	80039fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d06b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d062      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a02:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0ac      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a12:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a1e:	f7fd fbc9 	bl	80011b4 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a26:	f7fd fbc5 	bl	80011b4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e099      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <HAL_RCC_OscConfig+0x77c>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a5e:	0212      	lsls	r2, r2, #8
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0552      	lsls	r2, r2, #21
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a72:	0852      	lsrs	r2, r2, #1
 8003a74:	3a01      	subs	r2, #1
 8003a76:	0652      	lsls	r2, r2, #25
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a7e:	06d2      	lsls	r2, r2, #27
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a94:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa0:	f7fd fb88 	bl	80011b4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fb84 	bl	80011b4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e058      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <HAL_RCC_OscConfig+0x778>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac6:	e050      	b.n	8003b6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e04f      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d144      	bne.n	8003b6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003af8:	f7fd fb5c 	bl	80011b4 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fb58 	bl	80011b4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e02c      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x7ac>
 8003b1e:	e024      	b.n	8003b6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d01f      	beq.n	8003b66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fd fb3f 	bl	80011b4 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3a:	f7fd fb3b 	bl	80011b4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	4905      	ldr	r1, [pc, #20]	; (8003b74 <HAL_RCC_OscConfig+0x820>)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_OscConfig+0x824>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
 8003b64:	e001      	b.n	8003b6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	feeefffc 	.word	0xfeeefffc

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0e7      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4970      	ldr	r1, [pc, #448]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b6e      	ldr	r3, [pc, #440]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0cf      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d908      	bls.n	8003bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4960      	ldr	r1, [pc, #384]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04c      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0a6      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e09a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c32:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e08e      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e086      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4943      	ldr	r1, [pc, #268]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fd faa6 	bl	80011b4 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fd faa2 	bl	80011b4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e06e      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d208      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	492b      	ldr	r1, [pc, #172]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d210      	bcs.n	8003cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	4923      	ldr	r1, [pc, #140]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e036      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4918      	ldr	r1, [pc, #96]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4910      	ldr	r1, [pc, #64]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d30:	f000 f824 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	490b      	ldr	r1, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1f4>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1fc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f9dd 	bl	8001114 <HAL_InitTick>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800cf30 	.word	0x0800cf30
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000008 	.word	0x20000008

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x34>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d11e      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d102      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e004      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e00:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d134      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0xac>
 8003e20:	e005      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e24:	617b      	str	r3, [r7, #20]
      break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2a:	617b      	str	r3, [r7, #20]
      break;
 8003e2c:	e002      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	617b      	str	r3, [r7, #20]
      break;
 8003e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	3301      	adds	r3, #1
 8003e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	fb03 f202 	mul.w	r2, r3, r2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	0e5b      	lsrs	r3, r3, #25
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	3301      	adds	r3, #1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e74:	69bb      	ldr	r3, [r7, #24]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	0800cf48 	.word	0x0800cf48
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800cf40 	.word	0x0800cf40

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003edc:	f7ff ffda 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800cf40 	.word	0x0800cf40

08003f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f1c:	f7ff f9a6 	bl	800326c <HAL_PWREx_GetVoltageRange>
 8003f20:	6178      	str	r0, [r7, #20]
 8003f22:	e014      	b.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	4a24      	ldr	r2, [pc, #144]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f3c:	f7ff f996 	bl	800326c <HAL_PWREx_GetVoltageRange>
 8003f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d10b      	bne.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d919      	bls.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003f60:	d902      	bls.n	8003f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f62:	2302      	movs	r3, #2
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e013      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e010      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b80      	cmp	r3, #128	; 0x80
 8003f72:	d902      	bls.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f74:	2303      	movs	r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	e00a      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	d102      	bne.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f80:	2302      	movs	r3, #2
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	e004      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b70      	cmp	r3, #112	; 0x70
 8003f8a:	d101      	bne.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 0207 	bic.w	r2, r3, #7
 8003f98:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fcc:	2300      	movs	r3, #0
 8003fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d031      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe8:	d01a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fee:	d814      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ff8:	d10f      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a5c      	ldr	r2, [pc, #368]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f9de 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	74fb      	strb	r3, [r7, #19]
      break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004028:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	494e      	ldr	r1, [pc, #312]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 809e 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004056:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a3f      	ldr	r2, [pc, #252]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	4b3d      	ldr	r3, [pc, #244]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a39      	ldr	r2, [pc, #228]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004094:	f7fd f88e 	bl	80011b4 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800409a:	e009      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fd f88a 	bl	80011b4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d902      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	74fb      	strb	r3, [r7, #19]
        break;
 80040ae:	e005      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040b0:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d15a      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01e      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d019      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800410a:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd f84a 	bl	80011b4 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd f846 	bl	80011b4 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d902      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	74fb      	strb	r3, [r7, #19]
            break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ec      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	4904      	ldr	r1, [pc, #16]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004166:	e009      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	74bb      	strb	r3, [r7, #18]
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417c:	7c7b      	ldrb	r3, [r7, #17]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	4a89      	ldr	r2, [pc, #548]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419a:	4b84      	ldr	r3, [pc, #528]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 0203 	bic.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4980      	ldr	r1, [pc, #512]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041bc:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 020c 	bic.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	4978      	ldr	r1, [pc, #480]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041de:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	496f      	ldr	r1, [pc, #444]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	4967      	ldr	r1, [pc, #412]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	495e      	ldr	r1, [pc, #376]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	4956      	ldr	r1, [pc, #344]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	494d      	ldr	r1, [pc, #308]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d028      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004288:	4b48      	ldr	r3, [pc, #288]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	4945      	ldr	r1, [pc, #276]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a6:	d106      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a3f      	ldr	r2, [pc, #252]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b2:	60d3      	str	r3, [r2, #12]
 80042b4:	e011      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042be:	d10c      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f882 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d028      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004304:	d106      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	4a28      	ldr	r2, [pc, #160]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004310:	60d3      	str	r3, [r2, #12]
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f853 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	4916      	ldr	r1, [pc, #88]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004362:	d10c      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f830 	bl	80043d0 <RCCEx_PLLSAI1_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	4904      	ldr	r1, [pc, #16]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000

080043b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043de:	4b74      	ldr	r3, [pc, #464]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ea:	4b71      	ldr	r3, [pc, #452]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
       ||
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004402:	4b6b      	ldr	r3, [pc, #428]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
       ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d047      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e044      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d018      	beq.n	8004456 <RCCEx_PLLSAI1_Config+0x86>
 8004424:	2b03      	cmp	r3, #3
 8004426:	d825      	bhi.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x62>
 800442c:	2b02      	cmp	r3, #2
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0x74>
 8004430:	e020      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004432:	4b5f      	ldr	r3, [pc, #380]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e01a      	b.n	800447a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004444:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004454:	e013      	b.n	800447e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004472:	e006      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004482:	bf00      	nop
    }

    if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800448a:	4b49      	ldr	r3, [pc, #292]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	430b      	orrs	r3, r1
 80044a0:	4943      	ldr	r1, [pc, #268]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d17c      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ac:	4b40      	ldr	r3, [pc, #256]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fc fe7c 	bl	80011b4 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fc fe78 	bl	80011b4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ef      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15f      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d110      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	06d2      	lsls	r2, r2, #27
 8004504:	430a      	orrs	r2, r1
 8004506:	492a      	ldr	r1, [pc, #168]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
 800450c:	e027      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d112      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800451c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	0211      	lsls	r1, r2, #8
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6912      	ldr	r2, [r2, #16]
 800452a:	0852      	lsrs	r2, r2, #1
 800452c:	3a01      	subs	r2, #1
 800452e:	0552      	lsls	r2, r2, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
 8004538:	e011      	b.n	800455e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004542:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6952      	ldr	r2, [r2, #20]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0652      	lsls	r2, r2, #25
 8004556:	430a      	orrs	r2, r1
 8004558:	4915      	ldr	r1, [pc, #84]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fc fe23 	bl	80011b4 <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004570:	e009      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004572:	f7fc fe1f 	bl	80011b4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d902      	bls.n	8004586 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	73fb      	strb	r3, [r7, #15]
          break;
 8004584:	e005      	b.n	8004592 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4903      	ldr	r1, [pc, #12]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e095      	b.n	80046f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d6:	d009      	beq.n	80045ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
 80045de:	e005      	b.n	80045ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc f8c0 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462c:	d902      	bls.n	8004634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e002      	b.n	800463a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Init+0xa0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0204 	and.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004708:	2301      	movs	r3, #1
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x26>
 800471c:	2302      	movs	r3, #2
 800471e:	e20a      	b.n	8004b36 <HAL_SPI_TransmitReceive+0x43c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004728:	f7fc fd44 	bl	80011b4 <HAL_GetTick>
 800472c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004734:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004740:	887b      	ldrh	r3, [r7, #2]
 8004742:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004744:	7efb      	ldrb	r3, [r7, #27]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d00e      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x6e>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004750:	d106      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x66>
 800475a:	7efb      	ldrb	r3, [r7, #27]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d003      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004766:	e1e0      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_SPI_TransmitReceive+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_SPI_TransmitReceive+0x80>
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004780:	e1d3      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2205      	movs	r2, #5
 8004792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	887a      	ldrh	r2, [r7, #2]
 80047a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	887a      	ldrh	r2, [r7, #2]
 80047ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d8:	d802      	bhi.n	80047e0 <HAL_SPI_TransmitReceive+0xe6>
 80047da:	8a3b      	ldrh	r3, [r7, #16]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d908      	bls.n	80047f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	e007      	b.n	8004802 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d007      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004828:	f240 8081 	bls.w	800492e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_SPI_TransmitReceive+0x140>
 8004834:	8a7b      	ldrh	r3, [r7, #18]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d16d      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800485e:	e05a      	b.n	8004916 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d11b      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x1ac>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d016      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x1ac>
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b01      	cmp	r3, #1
 800487c:	d113      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	881a      	ldrh	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	1c9a      	adds	r2, r3, #2
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d11c      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x1f4>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	b292      	uxth	r2, r2
 80048cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ea:	2301      	movs	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ee:	f7fc fc61 	bl	80011b4 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d80b      	bhi.n	8004916 <HAL_SPI_TransmitReceive+0x21c>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d007      	beq.n	8004916 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004914:	e109      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d19f      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x166>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d199      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x166>
 800492c:	e0e3      	b.n	8004af6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_SPI_TransmitReceive+0x244>
 8004936:	8a7b      	ldrh	r3, [r7, #18]
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 80cf 	bne.w	8004adc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d912      	bls.n	800496e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b02      	subs	r3, #2
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800496c:	e0b6      	b.n	8004adc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	7812      	ldrb	r2, [r2, #0]
 800497a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004994:	e0a2      	b.n	8004adc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d134      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x314>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02f      	beq.n	8004a0e <HAL_SPI_TransmitReceive+0x314>
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d12c      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d912      	bls.n	80049e4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b02      	subs	r3, #2
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e2:	e012      	b.n	8004a0a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d148      	bne.n	8004aae <HAL_SPI_TransmitReceive+0x3b4>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d042      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d923      	bls.n	8004a7c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b02      	subs	r3, #2
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d81f      	bhi.n	8004aaa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	e016      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f103 020c 	add.w	r2, r3, #12
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aae:	f7fc fb81 	bl	80011b4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d803      	bhi.n	8004ac6 <HAL_SPI_TransmitReceive+0x3cc>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x3d2>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004ada:	e026      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f47f af57 	bne.w	8004996 <HAL_SPI_TransmitReceive+0x29c>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f af50 	bne.w	8004996 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f93e 	bl	8004d7c <SPI_EndRxTxTransaction>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b20:	e003      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b50:	f7fc fb30 	bl	80011b4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b60:	f7fc fb28 	bl	80011b4 <HAL_GetTick>
 8004b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	015b      	lsls	r3, r3, #5
 8004b6c:	0d1b      	lsrs	r3, r3, #20
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b76:	e054      	b.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d050      	beq.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b80:	f7fc fb18 	bl	80011b4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d902      	bls.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d13d      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d111      	bne.n	8004bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb8:	d004      	beq.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d107      	bne.n	8004bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d10f      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e017      	b.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	bf0c      	ite	eq
 8004c32:	2301      	moveq	r3, #1
 8004c34:	2300      	movne	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d19b      	bne.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000

08004c50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c62:	f7fc faa7 	bl	80011b4 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c72:	f7fc fa9f 	bl	80011b4 <HAL_GetTick>
 8004c76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	0d1b      	lsrs	r3, r3, #20
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c98:	e060      	b.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ca0:	d107      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d050      	beq.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cba:	f7fc fa7b 	bl	80011b4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d902      	bls.n	8004cd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d13d      	bne.n	8004d4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce8:	d111      	bne.n	8004d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d004      	beq.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfc:	d107      	bne.n	8004d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d16:	d10f      	bne.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e010      	b.n	8004d6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d196      	bne.n	8004c9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000000 	.word	0x20000000

08004d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff5b 	bl	8004c50 <SPI_WaitFifoStateUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e027      	b.n	8004e00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	2180      	movs	r1, #128	; 0x80
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff fec0 	bl	8004b40 <SPI_WaitFlagStateUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e014      	b.n	8004e00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff ff34 	bl	8004c50 <SPI_WaitFifoStateUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e000      	b.n	8004e00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e040      	b.n	8004e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fe2e 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2224      	movs	r2, #36	; 0x24
 8004e34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa54 	bl	80052fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f825 	bl	8004ea4 <UART_SetConfig>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e01b      	b.n	8004e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fad3 	bl	8005440 <UART_CheckIdleState>
 8004e9a:	4603      	mov	r3, r0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b08a      	sub	sp, #40	; 0x28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4bb4      	ldr	r3, [pc, #720]	; (80051a4 <UART_SetConfig+0x300>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4aa9      	ldr	r2, [pc, #676]	; (80051a8 <UART_SetConfig+0x304>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4aa0      	ldr	r2, [pc, #640]	; (80051ac <UART_SetConfig+0x308>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d126      	bne.n	8004f7c <UART_SetConfig+0xd8>
 8004f2e:	4ba0      	ldr	r3, [pc, #640]	; (80051b0 <UART_SetConfig+0x30c>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d81b      	bhi.n	8004f74 <UART_SetConfig+0xd0>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0xa0>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e080      	b.n	800505e <UART_SetConfig+0x1ba>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e07c      	b.n	800505e <UART_SetConfig+0x1ba>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e078      	b.n	800505e <UART_SetConfig+0x1ba>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e074      	b.n	800505e <UART_SetConfig+0x1ba>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e070      	b.n	800505e <UART_SetConfig+0x1ba>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a8c      	ldr	r2, [pc, #560]	; (80051b4 <UART_SetConfig+0x310>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d138      	bne.n	8004ff8 <UART_SetConfig+0x154>
 8004f86:	4b8a      	ldr	r3, [pc, #552]	; (80051b0 <UART_SetConfig+0x30c>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d82d      	bhi.n	8004ff0 <UART_SetConfig+0x14c>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0xf8>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004ff1 	.word	0x08004ff1
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004ff1 	.word	0x08004ff1
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004ff1 	.word	0x08004ff1
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e042      	b.n	800505e <UART_SetConfig+0x1ba>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e03e      	b.n	800505e <UART_SetConfig+0x1ba>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e03a      	b.n	800505e <UART_SetConfig+0x1ba>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e036      	b.n	800505e <UART_SetConfig+0x1ba>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e032      	b.n	800505e <UART_SetConfig+0x1ba>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	; (80051a8 <UART_SetConfig+0x304>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d12a      	bne.n	8005058 <UART_SetConfig+0x1b4>
 8005002:	4b6b      	ldr	r3, [pc, #428]	; (80051b0 <UART_SetConfig+0x30c>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005010:	d01a      	beq.n	8005048 <UART_SetConfig+0x1a4>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005016:	d81b      	bhi.n	8005050 <UART_SetConfig+0x1ac>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x194>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d815      	bhi.n	8005050 <UART_SetConfig+0x1ac>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x18c>
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d008      	beq.n	8005040 <UART_SetConfig+0x19c>
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x1ac>
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005036:	e012      	b.n	800505e <UART_SetConfig+0x1ba>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503e:	e00e      	b.n	800505e <UART_SetConfig+0x1ba>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005046:	e00a      	b.n	800505e <UART_SetConfig+0x1ba>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e006      	b.n	800505e <UART_SetConfig+0x1ba>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e002      	b.n	800505e <UART_SetConfig+0x1ba>
 8005058:	2310      	movs	r3, #16
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a51      	ldr	r2, [pc, #324]	; (80051a8 <UART_SetConfig+0x304>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d17a      	bne.n	800515e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800506c:	2b08      	cmp	r3, #8
 800506e:	d824      	bhi.n	80050ba <UART_SetConfig+0x216>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x1d4>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050bb 	.word	0x080050bb
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050bb 	.word	0x080050bb
 8005088:	080050ab 	.word	0x080050ab
 800508c:	080050bb 	.word	0x080050bb
 8005090:	080050bb 	.word	0x080050bb
 8005094:	080050bb 	.word	0x080050bb
 8005098:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800509c:	f7fe ff06 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80050a0:	61f8      	str	r0, [r7, #28]
        break;
 80050a2:	e010      	b.n	80050c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b44      	ldr	r3, [pc, #272]	; (80051b8 <UART_SetConfig+0x314>)
 80050a6:	61fb      	str	r3, [r7, #28]
        break;
 80050a8:	e00d      	b.n	80050c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe fe67 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 80050ae:	61f8      	str	r0, [r7, #28]
        break;
 80050b0:	e009      	b.n	80050c6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b6:	61fb      	str	r3, [r7, #28]
        break;
 80050b8:	e005      	b.n	80050c6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8107 	beq.w	80052dc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d305      	bcc.n	80050ea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d903      	bls.n	80050f2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050f0:	e0f4      	b.n	80052dc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2200      	movs	r2, #0
 80050f6:	461c      	mov	r4, r3
 80050f8:	4615      	mov	r5, r2
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	022b      	lsls	r3, r5, #8
 8005104:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005108:	0222      	lsls	r2, r4, #8
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	6849      	ldr	r1, [r1, #4]
 800510e:	0849      	lsrs	r1, r1, #1
 8005110:	2000      	movs	r0, #0
 8005112:	4688      	mov	r8, r1
 8005114:	4681      	mov	r9, r0
 8005116:	eb12 0a08 	adds.w	sl, r2, r8
 800511a:	eb43 0b09 	adc.w	fp, r3, r9
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512c:	4650      	mov	r0, sl
 800512e:	4659      	mov	r1, fp
 8005130:	f7fb f89e 	bl	8000270 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4613      	mov	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d308      	bcc.n	8005156 <UART_SetConfig+0x2b2>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d204      	bcs.n	8005156 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	e0c2      	b.n	80052dc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800515c:	e0be      	b.n	80052dc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d16a      	bne.n	800523e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800516c:	2b08      	cmp	r3, #8
 800516e:	d834      	bhi.n	80051da <UART_SetConfig+0x336>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0x2d4>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051db 	.word	0x080051db
 8005188:	080051cb 	.word	0x080051cb
 800518c:	080051db 	.word	0x080051db
 8005190:	080051db 	.word	0x080051db
 8005194:	080051db 	.word	0x080051db
 8005198:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fe fe86 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80051a0:	61f8      	str	r0, [r7, #28]
        break;
 80051a2:	e020      	b.n	80051e6 <UART_SetConfig+0x342>
 80051a4:	efff69f3 	.word	0xefff69f3
 80051a8:	40008000 	.word	0x40008000
 80051ac:	40013800 	.word	0x40013800
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40004400 	.word	0x40004400
 80051b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe fe8c 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 80051c0:	61f8      	str	r0, [r7, #28]
        break;
 80051c2:	e010      	b.n	80051e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <UART_SetConfig+0x454>)
 80051c6:	61fb      	str	r3, [r7, #28]
        break;
 80051c8:	e00d      	b.n	80051e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fe fdd7 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 80051ce:	61f8      	str	r0, [r7, #28]
        break;
 80051d0:	e009      	b.n	80051e6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	61fb      	str	r3, [r7, #28]
        break;
 80051d8:	e005      	b.n	80051e6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d077      	beq.n	80052dc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005a      	lsls	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	441a      	add	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b0f      	cmp	r3, #15
 8005206:	d916      	bls.n	8005236 <UART_SetConfig+0x392>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d212      	bcs.n	8005236 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f023 030f 	bic.w	r3, r3, #15
 8005218:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	b29a      	uxth	r2, r3
 8005226:	8afb      	ldrh	r3, [r7, #22]
 8005228:	4313      	orrs	r3, r2
 800522a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	8afa      	ldrh	r2, [r7, #22]
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	e052      	b.n	80052dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800523c:	e04e      	b.n	80052dc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800523e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005242:	2b08      	cmp	r3, #8
 8005244:	d827      	bhi.n	8005296 <UART_SetConfig+0x3f2>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x3a8>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	08005297 	.word	0x08005297
 800525c:	08005287 	.word	0x08005287
 8005260:	08005297 	.word	0x08005297
 8005264:	08005297 	.word	0x08005297
 8005268:	08005297 	.word	0x08005297
 800526c:	0800528f 	.word	0x0800528f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005270:	f7fe fe1c 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8005274:	61f8      	str	r0, [r7, #28]
        break;
 8005276:	e014      	b.n	80052a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005278:	f7fe fe2e 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 800527c:	61f8      	str	r0, [r7, #28]
        break;
 800527e:	e010      	b.n	80052a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005280:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <UART_SetConfig+0x454>)
 8005282:	61fb      	str	r3, [r7, #28]
        break;
 8005284:	e00d      	b.n	80052a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005286:	f7fe fd79 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 800528a:	61f8      	str	r0, [r7, #28]
        break;
 800528c:	e009      	b.n	80052a2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e005      	b.n	80052a2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052a0:	bf00      	nop
    }

    if (pclk != 0U)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d019      	beq.n	80052dc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	085a      	lsrs	r2, r3, #1
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	d909      	bls.n	80052d6 <UART_SetConfig+0x432>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	d205      	bcs.n	80052d6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	e002      	b.n	80052dc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f6:	bf00      	nop
 80052f8:	00f42400 	.word	0x00f42400

080052fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01a      	beq.n	8005412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fa:	d10a      	bne.n	8005412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  }
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b098      	sub	sp, #96	; 0x60
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005450:	f7fb feb0 	bl	80011b4 <HAL_GetTick>
 8005454:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d12e      	bne.n	80054c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	2200      	movs	r2, #0
 800546e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f88c 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d021      	beq.n	80054c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005492:	653b      	str	r3, [r7, #80]	; 0x50
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
 800549e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e062      	b.n	8005588 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d149      	bne.n	8005564 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f856 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03c      	beq.n	8005564 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	623b      	str	r3, [r7, #32]
   return(result);
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
 800550a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800550e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3308      	adds	r3, #8
 8005522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	60fb      	str	r3, [r7, #12]
   return(result);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3308      	adds	r3, #8
 800553a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	617b      	str	r3, [r7, #20]
   return(result);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e011      	b.n	8005588 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3758      	adds	r7, #88	; 0x58
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a0:	e049      	b.n	8005636 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d045      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fb fe03 	bl	80011b4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e048      	b.n	8005656 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d031      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d110      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2208      	movs	r2, #8
 80055e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f838 	bl	800565e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2208      	movs	r2, #8
 80055f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e029      	b.n	8005656 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005610:	d111      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f81e 	bl	800565e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e00f      	b.n	8005656 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	bf0c      	ite	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	2300      	movne	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	429a      	cmp	r2, r3
 8005652:	d0a6      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b095      	sub	sp, #84	; 0x54
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005684:	643b      	str	r3, [r7, #64]	; 0x40
 8005686:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800568a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d118      	bne.n	8005706 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0310 	bic.w	r3, r3, #16
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6979      	ldr	r1, [r7, #20]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e6      	bne.n	80056d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	669a      	str	r2, [r3, #104]	; 0x68
}
 800571a:	bf00      	nop
 800571c:	3754      	adds	r7, #84	; 0x54
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005726:	b084      	sub	sp, #16
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	f107 0014 	add.w	r0, r7, #20
 8005734:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	b004      	add	sp, #16
 8005746:	4770      	bx	lr

08005748 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005758:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800575c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800577e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005782:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	b29b      	uxth	r3, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	b29b      	uxth	r3, r3
 8005794:	4013      	ands	r3, r2
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c6:	b084      	sub	sp, #16
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	f107 0014 	add.w	r0, r7, #20
 80057d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	b004      	add	sp, #16
 8005806:	4770      	bx	lr

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005838:	b480      	push	{r7}
 800583a:	b09d      	sub	sp, #116	; 0x74
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d81f      	bhi.n	80058aa <USB_ActivateEndpoint+0x72>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <USB_ActivateEndpoint+0x38>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058b3 	.word	0x080058b3
 800587c:	0800588f 	.word	0x0800588f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005888:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800588c:	e012      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800588e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005892:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005896:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800589a:	e00b      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800589c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058a8:	e004      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80058b0:	e000      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
      break;
 80058b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	b21a      	sxth	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7b1b      	ldrb	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 8178 	bne.w	8005c1a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8084 	beq.w	8005a3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	4413      	add	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	827b      	strh	r3, [r7, #18]
 8005976:	8a7b      	ldrh	r3, [r7, #18]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <USB_ActivateEndpoint+0x180>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	823b      	strh	r3, [r7, #16]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	8a3b      	ldrh	r3, [r7, #16]
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	78db      	ldrb	r3, [r3, #3]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d020      	beq.n	8005a02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	81bb      	strh	r3, [r7, #12]
 80059d8:	89bb      	ldrh	r3, [r7, #12]
 80059da:	f083 0320 	eor.w	r3, r3, #32
 80059de:	81bb      	strh	r3, [r7, #12]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	89bb      	ldrh	r3, [r7, #12]
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]
 8005a00:	e2d5      	b.n	8005fae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	81fb      	strh	r3, [r7, #14]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
 8005a3a:	e2b8      	b.n	8005fae <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	4413      	add	r3, r2
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	88db      	ldrh	r3, [r3, #6]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	4413      	add	r3, r2
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aaa:	d91d      	bls.n	8005ae8 <USB_ActivateEndpoint+0x2b0>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d102      	bne.n	8005ac6 <USB_ActivateEndpoint+0x28e>
 8005ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e026      	b.n	8005b36 <USB_ActivateEndpoint+0x2fe>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <USB_ActivateEndpoint+0x2ce>
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e017      	b.n	8005b36 <USB_ActivateEndpoint+0x2fe>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <USB_ActivateEndpoint+0x2e8>
 8005b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01b      	beq.n	8005b86 <USB_ActivateEndpoint+0x34e>
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	843b      	strh	r3, [r7, #32]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8c3b      	ldrh	r3, [r7, #32]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d124      	bne.n	8005bd8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba4:	83bb      	strh	r3, [r7, #28]
 8005ba6:	8bbb      	ldrh	r3, [r7, #28]
 8005ba8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bac:	83bb      	strh	r3, [r7, #28]
 8005bae:	8bbb      	ldrh	r3, [r7, #28]
 8005bb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bb4:	83bb      	strh	r3, [r7, #28]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	8bbb      	ldrh	r3, [r7, #28]
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]
 8005bd6:	e1ea      	b.n	8005fae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	83fb      	strh	r3, [r7, #30]
 8005bf0:	8bfb      	ldrh	r3, [r7, #30]
 8005bf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf6:	83fb      	strh	r3, [r7, #30]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	8bfb      	ldrh	r3, [r7, #30]
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]
 8005c18:	e1c9      	b.n	8005fae <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d11e      	bne.n	8005c60 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c38:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	e01d      	b.n	8005c9c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cac:	4413      	add	r3, r2
 8005cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	00da      	lsls	r2, r3, #3
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	891b      	ldrh	r3, [r3, #8]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce0:	4413      	add	r3, r2
 8005ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	00da      	lsls	r2, r3, #3
 8005cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	895b      	ldrh	r3, [r3, #10]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 8093 	bne.w	8005e34 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <USB_ActivateEndpoint+0x52a>
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01b      	beq.n	8005db2 <USB_ActivateEndpoint+0x57a>
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d90:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441a      	add	r2, r3
 8005d9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dd0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dd8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
 8005e32:	e0bc      	b.n	8005fae <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01d      	beq.n	8005e8c <USB_ActivateEndpoint+0x654>
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01d      	beq.n	8005ee4 <USB_ActivateEndpoint+0x6ac>
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d024      	beq.n	8005f36 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f0a:	f083 0320 	eor.w	r3, r3, #32
 8005f0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
 8005f34:	e01d      	b.n	8005f72 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005fae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3774      	adds	r7, #116	; 0x74
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop

08005fc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b08d      	sub	sp, #52	; 0x34
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	7b1b      	ldrb	r3, [r3, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 808e 	bne.w	80060f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d044      	beq.n	8006066 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	81bb      	strh	r3, [r7, #12]
 8005fea:	89bb      	ldrh	r3, [r7, #12]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01b      	beq.n	800602c <USB_DeactivateEndpoint+0x6c>
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	817b      	strh	r3, [r7, #10]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006028:	b29b      	uxth	r3, r3
 800602a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006042:	813b      	strh	r3, [r7, #8]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	e192      	b.n	800638c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	827b      	strh	r3, [r7, #18]
 8006074:	8a7b      	ldrh	r3, [r7, #18]
 8006076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01b      	beq.n	80060b6 <USB_DeactivateEndpoint+0xf6>
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	823b      	strh	r3, [r7, #16]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	8a3b      	ldrh	r3, [r7, #16]
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	81fb      	strh	r3, [r7, #14]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	89fb      	ldrh	r3, [r7, #14]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e14d      	b.n	800638c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 80a5 	bne.w	8006244 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	843b      	strh	r3, [r7, #32]
 8006108:	8c3b      	ldrh	r3, [r7, #32]
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01b      	beq.n	800614a <USB_DeactivateEndpoint+0x18a>
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	83fb      	strh	r3, [r7, #30]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	8bfb      	ldrh	r3, [r7, #30]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	83bb      	strh	r3, [r7, #28]
 8006158:	8bbb      	ldrh	r3, [r7, #28]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01b      	beq.n	800619a <USB_DeactivateEndpoint+0x1da>
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	837b      	strh	r3, [r7, #26]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	8b7b      	ldrh	r3, [r7, #26]
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b0:	833b      	strh	r3, [r7, #24]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	441a      	add	r2, r3
 80061bc:	8b3b      	ldrh	r3, [r7, #24]
 80061be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	82fb      	strh	r3, [r7, #22]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	441a      	add	r2, r3
 80061f4:	8afb      	ldrh	r3, [r7, #22]
 80061f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006206:	b29b      	uxth	r3, r3
 8006208:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006220:	82bb      	strh	r3, [r7, #20]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	8abb      	ldrh	r3, [r7, #20]
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
 8006242:	e0a3      	b.n	800638c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006252:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <USB_DeactivateEndpoint+0x2d4>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01b      	beq.n	80062e4 <USB_DeactivateEndpoint+0x324>
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	b29b      	uxth	r3, r3
 800631a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006332:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	847b      	strh	r3, [r7, #34]	; 0x22
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3734      	adds	r7, #52	; 0x34
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b0c2      	sub	sp, #264	; 0x108
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a8:	6018      	str	r0, [r3, #0]
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	f040 86b7 	bne.w	8007134 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d908      	bls.n	80063f4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063f2:	e007      	b.n	8006404 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	7b1b      	ldrb	r3, [r3, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d13a      	bne.n	800648a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6959      	ldr	r1, [r3, #20]
 8006420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	88da      	ldrh	r2, [r3, #6]
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	b29b      	uxth	r3, r3
 8006432:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006436:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	f001 fcb9 	bl	8007db2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4413      	add	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	00da      	lsls	r2, r3, #3
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4413      	add	r3, r2
 8006476:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	f000 be1f 	b.w	80070c8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	2b02      	cmp	r3, #2
 8006498:	f040 8462 	bne.w	8006d60 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800649c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6a1a      	ldr	r2, [r3, #32]
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	f240 83df 	bls.w	8006c78 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	b29b      	uxth	r3, r3
 8006514:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 81c7 	beq.w	80068ea <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	633b      	str	r3, [r7, #48]	; 0x30
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d177      	bne.n	8006668 <USB_EPStartXfer+0x2ce>
 8006578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	4413      	add	r3, r2
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	00da      	lsls	r2, r3, #3
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ca:	d921      	bls.n	8006610 <USB_EPStartXfer+0x276>
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_EPStartXfer+0x252>
 80065e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e050      	b.n	80066b2 <USB_EPStartXfer+0x318>
 8006610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <USB_EPStartXfer+0x294>
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e041      	b.n	80066b2 <USB_EPStartXfer+0x318>
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <USB_EPStartXfer+0x2b4>
 8006644:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006648:	3301      	adds	r3, #1
 800664a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29a      	uxth	r2, r3
 8006654:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006658:	b29b      	uxth	r3, r3
 800665a:	029b      	lsls	r3, r3, #10
 800665c:	b29b      	uxth	r3, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	e024      	b.n	80066b2 <USB_EPStartXfer+0x318>
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d11c      	bne.n	80066b2 <USB_EPStartXfer+0x318>
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	4413      	add	r3, r2
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	00da      	lsls	r2, r3, #3
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	895b      	ldrh	r3, [r3, #10]
 80066be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 fb66 	bl	8007db2 <USB_WritePMA>
            ep->xfer_buff += len;
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f6:	441a      	add	r2, r3
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d90f      	bls.n	8006740 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	621a      	str	r2, [r3, #32]
 800673e:	e00e      	b.n	800675e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d177      	bne.n	800685e <USB_EPStartXfer+0x4c4>
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	4413      	add	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	00da      	lsls	r2, r3, #3
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067be:	2b3e      	cmp	r3, #62	; 0x3e
 80067c0:	d921      	bls.n	8006806 <USB_EPStartXfer+0x46c>
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <USB_EPStartXfer+0x448>
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067dc:	3b01      	subs	r3, #1
 80067de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fe:	b29a      	uxth	r2, r3
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e056      	b.n	80068b4 <USB_EPStartXfer+0x51a>
 8006806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <USB_EPStartXfer+0x48a>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681c:	b29a      	uxth	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e047      	b.n	80068b4 <USB_EPStartXfer+0x51a>
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <USB_EPStartXfer+0x4aa>
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683e:	3301      	adds	r3, #1
 8006840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29b      	uxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	e02a      	b.n	80068b4 <USB_EPStartXfer+0x51a>
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d122      	bne.n	80068b4 <USB_EPStartXfer+0x51a>
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006888:	b29b      	uxth	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	4413      	add	r3, r2
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	00da      	lsls	r2, r3, #3
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	4413      	add	r3, r2
 80068a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	891b      	ldrh	r3, [r3, #8]
 80068c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6959      	ldr	r1, [r3, #20]
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068e2:	6800      	ldr	r0, [r0, #0]
 80068e4:	f001 fa65 	bl	8007db2 <USB_WritePMA>
 80068e8:	e3ee      	b.n	80070c8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d177      	bne.n	80069ea <USB_EPStartXfer+0x650>
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	64bb      	str	r3, [r7, #72]	; 0x48
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006914:	b29b      	uxth	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691a:	4413      	add	r3, r2
 800691c:	64bb      	str	r3, [r7, #72]	; 0x48
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	00da      	lsls	r2, r3, #3
 800692c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692e:	4413      	add	r3, r2
 8006930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
 8006936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006940:	b29a      	uxth	r2, r3
 8006942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694a:	2b3e      	cmp	r3, #62	; 0x3e
 800694c:	d921      	bls.n	8006992 <USB_EPStartXfer+0x5f8>
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <USB_EPStartXfer+0x5d4>
 8006964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006968:	3b01      	subs	r3, #1
 800696a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29b      	uxth	r3, r3
 800697e:	4313      	orrs	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698a:	b29a      	uxth	r2, r3
 800698c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	e056      	b.n	8006a40 <USB_EPStartXfer+0x6a6>
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <USB_EPStartXfer+0x616>
 800699a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e047      	b.n	8006a40 <USB_EPStartXfer+0x6a6>
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <USB_EPStartXfer+0x636>
 80069c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ca:	3301      	adds	r3, #1
 80069cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069da:	b29b      	uxth	r3, r3
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	e02a      	b.n	8006a40 <USB_EPStartXfer+0x6a6>
 80069ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d122      	bne.n	8006a40 <USB_EPStartXfer+0x6a6>
 80069fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	653b      	str	r3, [r7, #80]	; 0x50
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1a:	4413      	add	r3, r2
 8006a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00da      	lsls	r2, r3, #3
 8006a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	891b      	ldrh	r3, [r3, #8]
 8006a4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6959      	ldr	r1, [r3, #20]
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	f001 f99f 	bl	8007db2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	441a      	add	r2, r3
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a1a      	ldr	r2, [r3, #32]
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d90f      	bls.n	8006ace <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	621a      	str	r2, [r3, #32]
 8006acc:	e00e      	b.n	8006aec <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	643b      	str	r3, [r7, #64]	; 0x40
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d177      	bne.n	8006bf8 <USB_EPStartXfer+0x85e>
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	4413      	add	r3, r2
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	00da      	lsls	r2, r3, #3
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b58:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5a:	d921      	bls.n	8006ba0 <USB_EPStartXfer+0x806>
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <USB_EPStartXfer+0x7e2>
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e050      	b.n	8006c42 <USB_EPStartXfer+0x8a8>
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <USB_EPStartXfer+0x824>
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e041      	b.n	8006c42 <USB_EPStartXfer+0x8a8>
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d004      	beq.n	8006bde <USB_EPStartXfer+0x844>
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	029b      	lsls	r3, r3, #10
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	e024      	b.n	8006c42 <USB_EPStartXfer+0x8a8>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d11c      	bne.n	8006c42 <USB_EPStartXfer+0x8a8>
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1c:	4413      	add	r3, r2
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	00da      	lsls	r2, r3, #3
 8006c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	895b      	ldrh	r3, [r3, #10]
 8006c4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6959      	ldr	r1, [r3, #20]
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c70:	6800      	ldr	r0, [r0, #0]
 8006c72:	f001 f89e 	bl	8007db2 <USB_WritePMA>
 8006c76:	e227      	b.n	80070c8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	441a      	add	r2, r3
 8006ccc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d04:	4413      	add	r3, r2
 8006d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	00da      	lsls	r2, r3, #3
 8006d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	891b      	ldrh	r3, [r3, #8]
 8006d36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6959      	ldr	r1, [r3, #20]
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d50:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d54:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d58:	6800      	ldr	r0, [r0, #0]
 8006d5a:	f001 f82a 	bl	8007db2 <USB_WritePMA>
 8006d5e:	e1b3      	b.n	80070c8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a1a      	ldr	r2, [r3, #32]
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80c6 	beq.w	8006f32 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	673b      	str	r3, [r7, #112]	; 0x70
 8006db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d177      	bne.n	8006eb2 <USB_EPStartXfer+0xb18>
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006de2:	4413      	add	r3, r2
 8006de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	00da      	lsls	r2, r3, #3
 8006df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e0c:	801a      	strh	r2, [r3, #0]
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	2b3e      	cmp	r3, #62	; 0x3e
 8006e14:	d921      	bls.n	8006e5a <USB_EPStartXfer+0xac0>
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <USB_EPStartXfer+0xa9c>
 8006e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e30:	3b01      	subs	r3, #1
 8006e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	029b      	lsls	r3, r3, #10
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	e050      	b.n	8006efc <USB_EPStartXfer+0xb62>
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <USB_EPStartXfer+0xade>
 8006e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e041      	b.n	8006efc <USB_EPStartXfer+0xb62>
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <USB_EPStartXfer+0xafe>
 8006e8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e92:	3301      	adds	r3, #1
 8006e94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e024      	b.n	8006efc <USB_EPStartXfer+0xb62>
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d11c      	bne.n	8006efc <USB_EPStartXfer+0xb62>
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed6:	4413      	add	r3, r2
 8006ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00da      	lsls	r2, r3, #3
 8006ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eea:	4413      	add	r3, r2
 8006eec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	895b      	ldrh	r3, [r3, #10]
 8006f08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	f000 ff41 	bl	8007db2 <USB_WritePMA>
 8006f30:	e0ca      	b.n	80070c8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d177      	bne.n	8007032 <USB_EPStartXfer+0xc98>
 8006f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f62:	4413      	add	r3, r2
 8006f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	00da      	lsls	r2, r3, #3
 8006f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f92:	2b3e      	cmp	r3, #62	; 0x3e
 8006f94:	d921      	bls.n	8006fda <USB_EPStartXfer+0xc40>
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <USB_EPStartXfer+0xc1c>
 8006fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e05c      	b.n	8007094 <USB_EPStartXfer+0xcfa>
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <USB_EPStartXfer+0xc5e>
 8006fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e04d      	b.n	8007094 <USB_EPStartXfer+0xcfa>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USB_EPStartXfer+0xc7e>
 800700e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007012:	3301      	adds	r3, #1
 8007014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007022:	b29b      	uxth	r3, r3
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	b29b      	uxth	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e030      	b.n	8007094 <USB_EPStartXfer+0xcfa>
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d128      	bne.n	8007094 <USB_EPStartXfer+0xcfa>
 8007042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007066:	4413      	add	r3, r2
 8007068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	00da      	lsls	r2, r3, #3
 800707a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800707e:	4413      	add	r3, r2
 8007080:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007092:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	891b      	ldrh	r3, [r3, #8]
 80070a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6959      	ldr	r1, [r3, #20]
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070c2:	6800      	ldr	r0, [r0, #0]
 80070c4:	f000 fe75 	bl	8007db2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	817b      	strh	r3, [r7, #10]
 80070f0:	897b      	ldrh	r3, [r7, #10]
 80070f2:	f083 0310 	eor.w	r3, r3, #16
 80070f6:	817b      	strh	r3, [r7, #10]
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	f083 0320 	eor.w	r3, r3, #32
 80070fe:	817b      	strh	r3, [r7, #10]
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	897b      	ldrh	r3, [r7, #10]
 800711c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712c:	b29b      	uxth	r3, r3
 800712e:	8013      	strh	r3, [r2, #0]
 8007130:	f000 bcde 	b.w	8007af0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	7b1b      	ldrb	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 80bb 	bne.w	80072bc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d917      	bls.n	8007192 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	e00e      	b.n	80071b0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2200      	movs	r2, #0
 80071ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071d4:	4413      	add	r3, r2
 80071d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	00da      	lsls	r2, r3, #3
 80071e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ec:	4413      	add	r3, r2
 80071ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720e:	2b3e      	cmp	r3, #62	; 0x3e
 8007210:	d924      	bls.n	800725c <USB_EPStartXfer+0xec2>
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <USB_EPStartXfer+0xe98>
 8007228:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800722c:	3b01      	subs	r3, #1
 800722e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29b      	uxth	r3, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	f000 bc10 	b.w	8007a7c <USB_EPStartXfer+0x16e2>
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10c      	bne.n	800727e <USB_EPStartXfer+0xee4>
 8007264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007274:	b29a      	uxth	r2, r3
 8007276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e3fe      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <USB_EPStartXfer+0xf04>
 8007294:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007298:	3301      	adds	r3, #1
 800729a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800729e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	029b      	lsls	r3, r3, #10
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e3df      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	78db      	ldrb	r3, [r3, #3]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	f040 8218 	bne.w	80076fe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 809d 	bne.w	800741a <USB_EPStartXfer+0x1080>
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007304:	4413      	add	r3, r2
 8007306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	00da      	lsls	r2, r3, #3
 8007318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800731c:	4413      	add	r3, r2
 800731e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007332:	b29a      	uxth	r2, r3
 8007334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b3e      	cmp	r3, #62	; 0x3e
 8007348:	d92b      	bls.n	80073a2 <USB_EPStartXfer+0x1008>
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <USB_EPStartXfer+0xfe0>
 8007370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007374:	3b01      	subs	r3, #1
 8007376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800737a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	b29b      	uxth	r3, r3
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	b29b      	uxth	r3, r3
 800738c:	4313      	orrs	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e070      	b.n	8007484 <USB_EPStartXfer+0x10ea>
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10c      	bne.n	80073cc <USB_EPStartXfer+0x1032>
 80073b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e05b      	b.n	8007484 <USB_EPStartXfer+0x10ea>
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <USB_EPStartXfer+0x1062>
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	3301      	adds	r3, #1
 80073f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29b      	uxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	e034      	b.n	8007484 <USB_EPStartXfer+0x10ea>
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d12c      	bne.n	8007484 <USB_EPStartXfer+0x10ea>
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007446:	b29b      	uxth	r3, r3
 8007448:	461a      	mov	r2, r3
 800744a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800744e:	4413      	add	r3, r2
 8007450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	00da      	lsls	r2, r3, #3
 8007462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007466:	4413      	add	r3, r2
 8007468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800746c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 809d 	bne.w	80075de <USB_EPStartXfer+0x1244>
 80074a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074c8:	4413      	add	r3, r2
 80074ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	00da      	lsls	r2, r3, #3
 80074dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e0:	4413      	add	r3, r2
 80074e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b3e      	cmp	r3, #62	; 0x3e
 800750c:	d92b      	bls.n	8007566 <USB_EPStartXfer+0x11cc>
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USB_EPStartXfer+0x11a4>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007538:	3b01      	subs	r3, #1
 800753a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800753e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	b29b      	uxth	r3, r3
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	b29b      	uxth	r3, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e069      	b.n	800763a <USB_EPStartXfer+0x12a0>
 8007566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <USB_EPStartXfer+0x11f6>
 8007576:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e054      	b.n	800763a <USB_EPStartXfer+0x12a0>
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <USB_EPStartXfer+0x1226>
 80075b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ba:	3301      	adds	r3, #1
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e02d      	b.n	800763a <USB_EPStartXfer+0x12a0>
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d125      	bne.n	800763a <USB_EPStartXfer+0x12a0>
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007604:	4413      	add	r3, r2
 8007606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800760a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00da      	lsls	r2, r3, #3
 8007618:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800761c:	4413      	add	r3, r2
 800761e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007638:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8218 	beq.w	8007a7c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800766c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <USB_EPStartXfer+0x12ea>
 8007678:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10d      	bne.n	80076a0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007684:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 81f5 	bne.w	8007a7c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007692:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	f040 81ee 	bne.w	8007a7c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80076e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	8013      	strh	r3, [r2, #0]
 80076fc:	e1be      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	78db      	ldrb	r3, [r3, #3]
 800770a:	2b01      	cmp	r3, #1
 800770c:	f040 81b4 	bne.w	8007a78 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	429a      	cmp	r2, r3
 800772a:	d917      	bls.n	800775c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774c:	1ad2      	subs	r2, r2, r3
 800774e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	619a      	str	r2, [r3, #24]
 800775a:	e00e      	b.n	800777a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800775c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f040 8085 	bne.w	8007896 <USB_EPStartXfer+0x14fc>
 800778c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077b0:	4413      	add	r3, r2
 80077b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	00da      	lsls	r2, r3, #3
 80077c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ea:	2b3e      	cmp	r3, #62	; 0x3e
 80077ec:	d923      	bls.n	8007836 <USB_EPStartXfer+0x149c>
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <USB_EPStartXfer+0x1474>
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	3b01      	subs	r3, #1
 800780a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800780e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781a:	b29b      	uxth	r3, r3
 800781c:	029b      	lsls	r3, r3, #10
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	e060      	b.n	80078f8 <USB_EPStartXfer+0x155e>
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10c      	bne.n	8007858 <USB_EPStartXfer+0x14be>
 800783e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784e:	b29a      	uxth	r2, r3
 8007850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	e04f      	b.n	80078f8 <USB_EPStartXfer+0x155e>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d004      	beq.n	8007878 <USB_EPStartXfer+0x14de>
 800786e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007872:	3301      	adds	r3, #1
 8007874:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007884:	b29b      	uxth	r3, r3
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	b29b      	uxth	r3, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e030      	b.n	80078f8 <USB_EPStartXfer+0x155e>
 8007896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	785b      	ldrb	r3, [r3, #1]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d128      	bne.n	80078f8 <USB_EPStartXfer+0x155e>
 80078a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ca:	4413      	add	r3, r2
 80078cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	00da      	lsls	r2, r3, #3
 80078de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078e2:	4413      	add	r3, r2
 80078e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f040 8085 	bne.w	8007a22 <USB_EPStartXfer+0x1688>
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007934:	b29b      	uxth	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800793c:	4413      	add	r3, r2
 800793e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00da      	lsls	r2, r3, #3
 8007950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007954:	4413      	add	r3, r2
 8007956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800795a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800795e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	2b3e      	cmp	r3, #62	; 0x3e
 8007978:	d923      	bls.n	80079c2 <USB_EPStartXfer+0x1628>
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USB_EPStartXfer+0x1600>
 8007990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007994:	3b01      	subs	r3, #1
 8007996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800799a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	029b      	lsls	r3, r3, #10
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e05c      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10c      	bne.n	80079e4 <USB_EPStartXfer+0x164a>
 80079ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e04b      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USB_EPStartXfer+0x166a>
 80079fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079fe:	3301      	adds	r3, #1
 8007a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e02c      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
 8007a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d124      	bne.n	8007a7c <USB_EPStartXfer+0x16e2>
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a48:	4413      	add	r3, r2
 8007a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	00da      	lsls	r2, r3, #3
 8007a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a60:	4413      	add	r3, r2
 8007a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	e001      	b.n	8007a7c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e03a      	b.n	8007af2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007aa6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007aaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ab2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ab6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d020      	beq.n	8007b50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b24:	81bb      	strh	r3, [r7, #12]
 8007b26:	89bb      	ldrh	r3, [r7, #12]
 8007b28:	f083 0310 	eor.w	r3, r3, #16
 8007b2c:	81bb      	strh	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	89bb      	ldrh	r3, [r7, #12]
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
 8007b4e:	e01f      	b.n	8007b90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	81fb      	strh	r3, [r7, #14]
 8007b68:	89fb      	ldrh	r3, [r7, #14]
 8007b6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b6e:	81fb      	strh	r3, [r7, #14]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	89fb      	ldrh	r3, [r7, #14]
 8007b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b087      	sub	sp, #28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	7b1b      	ldrb	r3, [r3, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 809d 	bne.w	8007cec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d04c      	beq.n	8007c54 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	823b      	strh	r3, [r7, #16]
 8007bc8:	8a3b      	ldrh	r3, [r7, #16]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <USB_EPClearStall+0x6c>
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be8:	81fb      	strh	r3, [r7, #14]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	89fb      	ldrh	r3, [r7, #14]
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d06c      	beq.n	8007cec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c28:	81bb      	strh	r3, [r7, #12]
 8007c2a:	89bb      	ldrh	r3, [r7, #12]
 8007c2c:	f083 0320 	eor.w	r3, r3, #32
 8007c30:	81bb      	strh	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	441a      	add	r2, r3
 8007c3c:	89bb      	ldrh	r3, [r7, #12]
 8007c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	8013      	strh	r3, [r2, #0]
 8007c52:	e04b      	b.n	8007cec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	82fb      	strh	r3, [r7, #22]
 8007c62:	8afb      	ldrh	r3, [r7, #22]
 8007c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <USB_EPClearStall+0x106>
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	82bb      	strh	r3, [r7, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	441a      	add	r2, r3
 8007c8e:	8abb      	ldrh	r3, [r7, #20]
 8007c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	827b      	strh	r3, [r7, #18]
 8007cbc:	8a7b      	ldrh	r3, [r7, #18]
 8007cbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cc2:	827b      	strh	r3, [r7, #18]
 8007cc4:	8a7b      	ldrh	r3, [r7, #18]
 8007cc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cca:	827b      	strh	r3, [r7, #18]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	8a7b      	ldrh	r3, [r7, #18]
 8007cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2280      	movs	r2, #128	; 0x80
 8007d10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b08b      	sub	sp, #44	; 0x2c
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dc8:	88bb      	ldrh	r3, [r7, #4]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
 8007de8:	e01b      	b.n	8007e22 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	b21a      	sxth	r2, r3
 8007dfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	8a7a      	ldrh	r2, [r7, #18]
 8007e08:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	3301      	adds	r3, #1
 8007e14:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e0      	bne.n	8007dea <USB_WritePMA+0x38>
  }
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	372c      	adds	r7, #44	; 0x2c
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b08b      	sub	sp, #44	; 0x2c
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	4611      	mov	r1, r2
 8007e42:	461a      	mov	r2, r3
 8007e44:	460b      	mov	r3, r1
 8007e46:	80fb      	strh	r3, [r7, #6]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e4c:	88bb      	ldrh	r3, [r7, #4]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6c:	e018      	b.n	8007ea0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	3302      	adds	r3, #2
 8007e7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	3301      	adds	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e3      	bne.n	8007e6e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ea6:	88bb      	ldrh	r3, [r7, #4]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	372c      	adds	r7, #44	; 0x2c
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007edc:	f241 0074 	movw	r0, #4212	; 0x1074
 8007ee0:	f004 f892 	bl	800c008 <USBD_static_malloc>
 8007ee4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	32b0      	adds	r2, #176	; 0xb0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007efc:	2302      	movs	r3, #2
 8007efe:	e06e      	b.n	8007fde <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	; 0xb0
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32b0      	adds	r2, #176	; 0xb0
 8007f1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7c1b      	ldrb	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d12b      	bne.n	8007f84 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007f2c:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <USBD_MSC_Init+0x118>)
 8007f2e:	7819      	ldrb	r1, [r3, #0]
 8007f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f34:	2202      	movs	r2, #2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f003 fe32 	bl	800bba0 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <USBD_MSC_Init+0x118>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f54:	2201      	movs	r2, #1
 8007f56:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007f58:	4b24      	ldr	r3, [pc, #144]	; (8007fec <USBD_MSC_Init+0x11c>)
 8007f5a:	7819      	ldrb	r1, [r3, #0]
 8007f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f60:	2202      	movs	r2, #2
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f003 fe1c 	bl	800bba0 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <USBD_MSC_Init+0x11c>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3324      	adds	r3, #36	; 0x24
 8007f7e:	2201      	movs	r2, #1
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	e028      	b.n	8007fd6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007f84:	4b18      	ldr	r3, [pc, #96]	; (8007fe8 <USBD_MSC_Init+0x118>)
 8007f86:	7819      	ldrb	r1, [r3, #0]
 8007f88:	2340      	movs	r3, #64	; 0x40
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f003 fe07 	bl	800bba0 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007f92:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <USBD_MSC_Init+0x118>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 020f 	and.w	r2, r3, #15
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007faa:	2201      	movs	r2, #1
 8007fac:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <USBD_MSC_Init+0x11c>)
 8007fb0:	7819      	ldrb	r1, [r3, #0]
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f003 fdf2 	bl	800bba0 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <USBD_MSC_Init+0x11c>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 020f 	and.w	r2, r3, #15
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa2c 	bl	8008434 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000073 	.word	0x20000073
 8007fec:	20000072 	.word	0x20000072

08007ff0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8007ffc:	4b26      	ldr	r3, [pc, #152]	; (8008098 <USBD_MSC_DeInit+0xa8>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f003 fe0a 	bl	800bc1c <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008008:	4b23      	ldr	r3, [pc, #140]	; (8008098 <USBD_MSC_DeInit+0xa8>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 020f 	and.w	r2, r3, #15
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008020:	2200      	movs	r2, #0
 8008022:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008024:	4b1d      	ldr	r3, [pc, #116]	; (800809c <USBD_MSC_DeInit+0xac>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f003 fdf6 	bl	800bc1c <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008030:	4b1a      	ldr	r3, [pc, #104]	; (800809c <USBD_MSC_DeInit+0xac>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3324      	adds	r3, #36	; 0x24
 8008046:	2200      	movs	r2, #0
 8008048:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	32b0      	adds	r2, #176	; 0xb0
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa6f 	bl	8008540 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	32b0      	adds	r2, #176	; 0xb0
 800806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008070:	4618      	mov	r0, r3
 8008072:	f003 ffd7 	bl	800c024 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	32b0      	adds	r2, #176	; 0xb0
 8008080:	2100      	movs	r1, #0
 8008082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000073 	.word	0x20000073
 800809c:	20000072 	.word	0x20000072

080080a0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32b0      	adds	r2, #176	; 0xb0
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e0e1      	b.n	8008290 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d053      	beq.n	8008180 <USBD_MSC_Setup+0xe0>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	f040 80d1 	bne.w	8008280 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2bfe      	cmp	r3, #254	; 0xfe
 80080e4:	d002      	beq.n	80080ec <USBD_MSC_Setup+0x4c>
 80080e6:	2bff      	cmp	r3, #255	; 0xff
 80080e8:	d02a      	beq.n	8008140 <USBD_MSC_Setup+0xa0>
 80080ea:	e041      	b.n	8008170 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	885b      	ldrh	r3, [r3, #2]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d11e      	bne.n	8008132 <USBD_MSC_Setup+0x92>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d11a      	bne.n	8008132 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008102:	2b00      	cmp	r3, #0
 8008104:	da15      	bge.n	8008132 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	33b0      	adds	r3, #176	; 0xb0
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4798      	blx	r3
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2201      	movs	r2, #1
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f003 f979 	bl	800b420 <USBD_CtlSendData>
 800812e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008130:	e025      	b.n	800817e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 f902 	bl	800b33e <USBD_CtlError>
            ret = USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
          break;
 800813e:	e01e      	b.n	800817e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10c      	bne.n	8008162 <USBD_MSC_Setup+0xc2>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008156:	2b00      	cmp	r3, #0
 8008158:	db03      	blt.n	8008162 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9bc 	bl	80084d8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008160:	e00d      	b.n	800817e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f003 f8ea 	bl	800b33e <USBD_CtlError>
            ret = USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	75fb      	strb	r3, [r7, #23]
          break;
 800816e:	e006      	b.n	800817e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f003 f8e3 	bl	800b33e <USBD_CtlError>
          ret = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	75fb      	strb	r3, [r7, #23]
          break;
 800817c:	bf00      	nop
      }
      break;
 800817e:	e086      	b.n	800828e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	2b0b      	cmp	r3, #11
 8008186:	d872      	bhi.n	800826e <USBD_MSC_Setup+0x1ce>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <USBD_MSC_Setup+0xf0>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081c1 	.word	0x080081c1
 8008194:	0800823d 	.word	0x0800823d
 8008198:	0800826f 	.word	0x0800826f
 800819c:	0800826f 	.word	0x0800826f
 80081a0:	0800826f 	.word	0x0800826f
 80081a4:	0800826f 	.word	0x0800826f
 80081a8:	0800826f 	.word	0x0800826f
 80081ac:	0800826f 	.word	0x0800826f
 80081b0:	0800826f 	.word	0x0800826f
 80081b4:	0800826f 	.word	0x0800826f
 80081b8:	080081eb 	.word	0x080081eb
 80081bc:	08008215 	.word	0x08008215
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d107      	bne.n	80081dc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081cc:	f107 030e 	add.w	r3, r7, #14
 80081d0:	2202      	movs	r2, #2
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f003 f923 	bl	800b420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081da:	e050      	b.n	800827e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f003 f8ad 	bl	800b33e <USBD_CtlError>
            ret = USBD_FAIL;
 80081e4:	2303      	movs	r3, #3
 80081e6:	75fb      	strb	r3, [r7, #23]
          break;
 80081e8:	e049      	b.n	800827e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d107      	bne.n	8008206 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2201      	movs	r2, #1
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f003 f90e 	bl	800b420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008204:	e03b      	b.n	800827e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f003 f898 	bl	800b33e <USBD_CtlError>
            ret = USBD_FAIL;
 800820e:	2303      	movs	r3, #3
 8008210:	75fb      	strb	r3, [r7, #23]
          break;
 8008212:	e034      	b.n	800827e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b03      	cmp	r3, #3
 800821e:	d106      	bne.n	800822e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	885b      	ldrh	r3, [r3, #2]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800822c:	e027      	b.n	800827e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f003 f884 	bl	800b33e <USBD_CtlError>
            ret = USBD_FAIL;
 8008236:	2303      	movs	r3, #3
 8008238:	75fb      	strb	r3, [r7, #23]
          break;
 800823a:	e020      	b.n	800827e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b03      	cmp	r3, #3
 8008246:	d119      	bne.n	800827c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d115      	bne.n	800827c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	889b      	ldrh	r3, [r3, #4]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f003 fd15 	bl	800bc88 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	889b      	ldrh	r3, [r3, #4]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fb54 	bl	8008914 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800826c:	e006      	b.n	800827c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f003 f864 	bl	800b33e <USBD_CtlError>
          ret = USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	75fb      	strb	r3, [r7, #23]
          break;
 800827a:	e000      	b.n	800827e <USBD_MSC_Setup+0x1de>
          break;
 800827c:	bf00      	nop
      }
      break;
 800827e:	e006      	b.n	800828e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f003 f85b 	bl	800b33e <USBD_CtlError>
      ret = USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	bf00      	nop
  }

  return (uint8_t)ret;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f961 	bl	8008570 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f98d 	bl	80085e8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80082e0:	2181      	movs	r1, #129	; 0x81
 80082e2:	4812      	ldr	r0, [pc, #72]	; (800832c <USBD_MSC_GetHSCfgDesc+0x54>)
 80082e4:	f002 f9c8 	bl	800a678 <USBD_GetEpDesc>
 80082e8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80082ea:	2101      	movs	r1, #1
 80082ec:	480f      	ldr	r0, [pc, #60]	; (800832c <USBD_MSC_GetHSCfgDesc+0x54>)
 80082ee:	f002 f9c3 	bl	800a678 <USBD_GetEpDesc>
 80082f2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d006      	beq.n	8008308 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	711a      	strb	r2, [r3, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f042 0202 	orr.w	r2, r2, #2
 8008306:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d006      	beq.n	800831c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2200      	movs	r2, #0
 8008312:	711a      	strb	r2, [r3, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f042 0202 	orr.w	r2, r2, #2
 800831a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008322:	4b02      	ldr	r3, [pc, #8]	; (800832c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000048 	.word	0x20000048

08008330 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008338:	2181      	movs	r1, #129	; 0x81
 800833a:	4812      	ldr	r0, [pc, #72]	; (8008384 <USBD_MSC_GetFSCfgDesc+0x54>)
 800833c:	f002 f99c 	bl	800a678 <USBD_GetEpDesc>
 8008340:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008342:	2101      	movs	r1, #1
 8008344:	480f      	ldr	r0, [pc, #60]	; (8008384 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008346:	f002 f997 	bl	800a678 <USBD_GetEpDesc>
 800834a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d006      	beq.n	8008360 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800835a:	711a      	strb	r2, [r3, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d006      	beq.n	8008374 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2200      	movs	r2, #0
 800836a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800836e:	711a      	strb	r2, [r3, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800837a:	4b02      	ldr	r3, [pc, #8]	; (8008384 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000048 	.word	0x20000048

08008388 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008390:	2181      	movs	r1, #129	; 0x81
 8008392:	4812      	ldr	r0, [pc, #72]	; (80083dc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008394:	f002 f970 	bl	800a678 <USBD_GetEpDesc>
 8008398:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800839a:	2101      	movs	r1, #1
 800839c:	480f      	ldr	r0, [pc, #60]	; (80083dc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800839e:	f002 f96b 	bl	800a678 <USBD_GetEpDesc>
 80083a2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d006      	beq.n	80083b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083b2:	711a      	strb	r2, [r3, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c6:	711a      	strb	r2, [r3, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80083d2:	4b02      	ldr	r3, [pc, #8]	; (80083dc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000048 	.word	0x20000048

080083e0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220a      	movs	r2, #10
 80083ec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000068 	.word	0x20000068

08008400 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	e009      	b.n	8008428 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	33b0      	adds	r3, #176	; 0xb0
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32b0      	adds	r2, #176	; 0xb0
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d039      	beq.n	80084c6 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	33b0      	adds	r3, #176	; 0xb0
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2000      	movs	r0, #0
 8008496:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <MSC_BOT_Init+0x9c>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f003 fbf2 	bl	800bc88 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80084a4:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <MSC_BOT_Init+0xa0>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f003 fbec 	bl	800bc88 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <MSC_BOT_Init+0x9c>)
 80084b2:	7819      	ldrb	r1, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80084ba:	3210      	adds	r2, #16
 80084bc:	231f      	movs	r3, #31
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f003 fd20 	bl	800bf04 <USBD_LL_PrepareReceive>
 80084c4:	e000      	b.n	80084c8 <MSC_BOT_Init+0x94>
    return;
 80084c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000073 	.word	0x20000073
 80084d4:	20000072 	.word	0x20000072

080084d8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32b0      	adds	r2, #176	; 0xb0
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01c      	beq.n	8008530 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <MSC_BOT_Reset+0x60>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f003 fc29 	bl	800bd60 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800850e:	4b0b      	ldr	r3, [pc, #44]	; (800853c <MSC_BOT_Reset+0x64>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f003 fc23 	bl	800bd60 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <MSC_BOT_Reset+0x64>)
 800851c:	7819      	ldrb	r1, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008524:	3210      	adds	r2, #16
 8008526:	231f      	movs	r3, #31
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f003 fceb 	bl	800bf04 <USBD_LL_PrepareReceive>
 800852e:	e000      	b.n	8008532 <MSC_BOT_Reset+0x5a>
    return;
 8008530:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000072 	.word	0x20000072
 800853c:	20000073 	.word	0x20000073

08008540 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	32b0      	adds	r2, #176	; 0xb0
 8008552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008556:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	721a      	strb	r2, [r3, #8]
  }
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32b0      	adds	r2, #176	; 0xb0
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d022      	beq.n	80085d8 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	7a1b      	ldrb	r3, [r3, #8]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d005      	beq.n	80085a6 <MSC_BOT_DataIn+0x36>
 800859a:	2b02      	cmp	r3, #2
 800859c:	db1e      	blt.n	80085dc <MSC_BOT_DataIn+0x6c>
 800859e:	3b03      	subs	r3, #3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d81b      	bhi.n	80085dc <MSC_BOT_DataIn+0x6c>
 80085a4:	e013      	b.n	80085ce <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ac:	7f59      	ldrb	r1, [r3, #29]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b4:	331f      	adds	r3, #31
 80085b6:	461a      	mov	r2, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f9e5 	bl	8008988 <SCSI_ProcessCmd>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da0d      	bge.n	80085e0 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80085c4:	2101      	movs	r1, #1
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f920 	bl	800880c <MSC_BOT_SendCSW>
      }
      break;
 80085cc:	e008      	b.n	80085e0 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80085ce:	2100      	movs	r1, #0
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f91b 	bl	800880c <MSC_BOT_SendCSW>
      break;
 80085d6:	e004      	b.n	80085e2 <MSC_BOT_DataIn+0x72>
    return;
 80085d8:	bf00      	nop
 80085da:	e002      	b.n	80085e2 <MSC_BOT_DataIn+0x72>

    default:
      break;
 80085dc:	bf00      	nop
 80085de:	e000      	b.n	80085e2 <MSC_BOT_DataIn+0x72>
      break;
 80085e0:	bf00      	nop
  }
}
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	32b0      	adds	r2, #176	; 0xb0
 80085fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008602:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01e      	beq.n	8008648 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	7a1b      	ldrb	r3, [r3, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <MSC_BOT_DataOut+0x30>
 8008612:	2b01      	cmp	r3, #1
 8008614:	d004      	beq.n	8008620 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008616:	e01a      	b.n	800864e <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f81b 	bl	8008654 <MSC_BOT_CBW_Decode>
      break;
 800861e:	e016      	b.n	800864e <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008626:	7f59      	ldrb	r1, [r3, #29]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862e:	331f      	adds	r3, #31
 8008630:	461a      	mov	r2, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f9a8 	bl	8008988 <SCSI_ProcessCmd>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	da06      	bge.n	800864c <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800863e:	2101      	movs	r1, #1
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f8e3 	bl	800880c <MSC_BOT_SendCSW>
      break;
 8008646:	e001      	b.n	800864c <MSC_BOT_DataOut+0x64>
    return;
 8008648:	bf00      	nop
 800864a:	e000      	b.n	800864e <MSC_BOT_DataOut+0x66>
      break;
 800864c:	bf00      	nop
  }
}
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32b0      	adds	r2, #176	; 0xb0
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8085 	beq.w	800877e <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008682:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008692:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008694:	4b3d      	ldr	r3, [pc, #244]	; (800878c <MSC_BOT_CBW_Decode+0x138>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f003 fc6a 	bl	800bf74 <USBD_LL_GetRxDataSize>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b1f      	cmp	r3, #31
 80086a4:	d118      	bne.n	80086d8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ac:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80086ae:	4a38      	ldr	r2, [pc, #224]	; (8008790 <MSC_BOT_CBW_Decode+0x13c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d111      	bne.n	80086d8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ba:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d80b      	bhi.n	80086d8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	7f9b      	ldrb	r3, [r3, #30]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d2:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80086d4:	2b10      	cmp	r3, #16
 80086d6:	d90f      	bls.n	80086f8 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086de:	7f59      	ldrb	r1, [r3, #29]
 80086e0:	2320      	movs	r3, #32
 80086e2:	2205      	movs	r2, #5
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fe7b 	bl	80093e0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2202      	movs	r2, #2
 80086ee:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8cb 	bl	800888c <MSC_BOT_Abort>
 80086f6:	e045      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	7f59      	ldrb	r1, [r3, #29]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008706:	331f      	adds	r3, #31
 8008708:	461a      	mov	r2, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f93c 	bl	8008988 <SCSI_ProcessCmd>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	da0c      	bge.n	8008730 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	7a1b      	ldrb	r3, [r3, #8]
 800871a:	2b05      	cmp	r3, #5
 800871c:	d104      	bne.n	8008728 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800871e:	2101      	movs	r1, #1
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f873 	bl	800880c <MSC_BOT_SendCSW>
 8008726:	e02d      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f8af 	bl	800888c <MSC_BOT_Abort>
 800872e:	e029      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	7a1b      	ldrb	r3, [r3, #8]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d024      	beq.n	8008782 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800873c:	2b01      	cmp	r3, #1
 800873e:	d020      	beq.n	8008782 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008744:	2b03      	cmp	r3, #3
 8008746:	d01c      	beq.n	8008782 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d009      	beq.n	8008764 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f103 0110 	add.w	r1, r3, #16
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	461a      	mov	r2, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f819 	bl	8008794 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008762:	e00f      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f84c 	bl	800880c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008774:	e006      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f888 	bl	800888c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800877c:	e002      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
    return;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8008782:	bf00      	nop
    }
  }
}
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000073 	.word	0x20000073
 8008790:	43425355 	.word	0x43425355

08008794 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	32b0      	adds	r2, #176	; 0xb0
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d023      	beq.n	80087fe <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	bf28      	it	cs
 80087c4:	4613      	movcs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087da:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2204      	movs	r2, #4
 80087ec:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80087ee:	4b06      	ldr	r3, [pc, #24]	; (8008808 <MSC_BOT_SendData+0x74>)
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f003 fb4c 	bl	800be94 <USBD_LL_Transmit>
 80087fc:	e000      	b.n	8008800 <MSC_BOT_SendData+0x6c>
    return;
 80087fe:	bf00      	nop
}
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000072 	.word	0x20000072

0800880c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	32b0      	adds	r2, #176	; 0xb0
 8008822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008826:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d024      	beq.n	8008878 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008834:	461a      	mov	r2, r3
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <MSC_BOT_SendCSW+0x74>)
 8008838:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008840:	461a      	mov	r2, r3
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <MSC_BOT_SendCSW+0x78>)
 8008850:	7819      	ldrb	r1, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8008858:	3210      	adds	r2, #16
 800885a:	230d      	movs	r3, #13
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f003 fb19 	bl	800be94 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <MSC_BOT_SendCSW+0x7c>)
 8008864:	7819      	ldrb	r1, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800886c:	3210      	adds	r2, #16
 800886e:	231f      	movs	r3, #31
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f003 fb47 	bl	800bf04 <USBD_LL_PrepareReceive>
 8008876:	e000      	b.n	800887a <MSC_BOT_SendCSW+0x6e>
    return;
 8008878:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	53425355 	.word	0x53425355
 8008884:	20000072 	.word	0x20000072
 8008888:	20000073 	.word	0x20000073

0800888c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	32b0      	adds	r2, #176	; 0xb0
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d02c      	beq.n	8008904 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b0:	7f1b      	ldrb	r3, [r3, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10f      	bne.n	80088d6 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088bc:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80088ca:	4b10      	ldr	r3, [pc, #64]	; (800890c <MSC_BOT_Abort+0x80>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f003 fa0f 	bl	800bcf4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80088d6:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <MSC_BOT_Abort+0x84>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f003 fa09 	bl	800bcf4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	7a5b      	ldrb	r3, [r3, #9]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d10d      	bne.n	8008906 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <MSC_BOT_Abort+0x84>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f003 f9ff 	bl	800bcf4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <MSC_BOT_Abort+0x80>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f003 f9f9 	bl	800bcf4 <USBD_LL_StallEP>
 8008902:	e000      	b.n	8008906 <MSC_BOT_Abort+0x7a>
    return;
 8008904:	bf00      	nop
  }
}
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000073 	.word	0x20000073
 8008910:	20000072 	.word	0x20000072

08008914 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32b0      	adds	r2, #176	; 0xb0
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01d      	beq.n	8008972 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	7a5b      	ldrb	r3, [r3, #9]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d10c      	bne.n	8008958 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <MSC_BOT_CplClrFeature+0x6c>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f003 f9d5 	bl	800bcf4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <MSC_BOT_CplClrFeature+0x70>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f003 f9cf 	bl	800bcf4 <USBD_LL_StallEP>
 8008956:	e00f      	b.n	8008978 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da0a      	bge.n	8008976 <MSC_BOT_CplClrFeature+0x62>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7a5b      	ldrb	r3, [r3, #9]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d006      	beq.n	8008976 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008968:	2101      	movs	r1, #1
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7ff ff4e 	bl	800880c <MSC_BOT_SendCSW>
 8008970:	e002      	b.n	8008978 <MSC_BOT_CplClrFeature+0x64>
    return;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008976:	bf00      	nop
  }
}
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000072 	.word	0x20000072
 8008984:	20000073 	.word	0x20000073

08008988 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	460b      	mov	r3, r1
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	32b0      	adds	r2, #176	; 0xb0
 80089a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80089ac:	f04f 33ff 	mov.w	r3, #4294967295
 80089b0:	e168      	b.n	8008c84 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2baa      	cmp	r3, #170	; 0xaa
 80089b8:	f000 8144 	beq.w	8008c44 <SCSI_ProcessCmd+0x2bc>
 80089bc:	2baa      	cmp	r3, #170	; 0xaa
 80089be:	f300 8153 	bgt.w	8008c68 <SCSI_ProcessCmd+0x2e0>
 80089c2:	2ba8      	cmp	r3, #168	; 0xa8
 80089c4:	f000 812c 	beq.w	8008c20 <SCSI_ProcessCmd+0x298>
 80089c8:	2ba8      	cmp	r3, #168	; 0xa8
 80089ca:	f300 814d 	bgt.w	8008c68 <SCSI_ProcessCmd+0x2e0>
 80089ce:	2b5a      	cmp	r3, #90	; 0x5a
 80089d0:	f300 80c0 	bgt.w	8008b54 <SCSI_ProcessCmd+0x1cc>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f2c0 8147 	blt.w	8008c68 <SCSI_ProcessCmd+0x2e0>
 80089da:	2b5a      	cmp	r3, #90	; 0x5a
 80089dc:	f200 8144 	bhi.w	8008c68 <SCSI_ProcessCmd+0x2e0>
 80089e0:	a201      	add	r2, pc, #4	; (adr r2, 80089e8 <SCSI_ProcessCmd+0x60>)
 80089e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e6:	bf00      	nop
 80089e8:	08008b5b 	.word	0x08008b5b
 80089ec:	08008c69 	.word	0x08008c69
 80089f0:	08008c69 	.word	0x08008c69
 80089f4:	08008b6d 	.word	0x08008b6d
 80089f8:	08008c69 	.word	0x08008c69
 80089fc:	08008c69 	.word	0x08008c69
 8008a00:	08008c69 	.word	0x08008c69
 8008a04:	08008c69 	.word	0x08008c69
 8008a08:	08008c69 	.word	0x08008c69
 8008a0c:	08008c69 	.word	0x08008c69
 8008a10:	08008c69 	.word	0x08008c69
 8008a14:	08008c69 	.word	0x08008c69
 8008a18:	08008c69 	.word	0x08008c69
 8008a1c:	08008c69 	.word	0x08008c69
 8008a20:	08008c69 	.word	0x08008c69
 8008a24:	08008c69 	.word	0x08008c69
 8008a28:	08008c69 	.word	0x08008c69
 8008a2c:	08008c69 	.word	0x08008c69
 8008a30:	08008b7f 	.word	0x08008b7f
 8008a34:	08008c69 	.word	0x08008c69
 8008a38:	08008c69 	.word	0x08008c69
 8008a3c:	08008c69 	.word	0x08008c69
 8008a40:	08008c69 	.word	0x08008c69
 8008a44:	08008c69 	.word	0x08008c69
 8008a48:	08008c69 	.word	0x08008c69
 8008a4c:	08008c69 	.word	0x08008c69
 8008a50:	08008bb5 	.word	0x08008bb5
 8008a54:	08008b91 	.word	0x08008b91
 8008a58:	08008c69 	.word	0x08008c69
 8008a5c:	08008c69 	.word	0x08008c69
 8008a60:	08008ba3 	.word	0x08008ba3
 8008a64:	08008c69 	.word	0x08008c69
 8008a68:	08008c69 	.word	0x08008c69
 8008a6c:	08008c69 	.word	0x08008c69
 8008a70:	08008c69 	.word	0x08008c69
 8008a74:	08008bd9 	.word	0x08008bd9
 8008a78:	08008c69 	.word	0x08008c69
 8008a7c:	08008beb 	.word	0x08008beb
 8008a80:	08008c69 	.word	0x08008c69
 8008a84:	08008c69 	.word	0x08008c69
 8008a88:	08008c0f 	.word	0x08008c0f
 8008a8c:	08008c69 	.word	0x08008c69
 8008a90:	08008c33 	.word	0x08008c33
 8008a94:	08008c69 	.word	0x08008c69
 8008a98:	08008c69 	.word	0x08008c69
 8008a9c:	08008c69 	.word	0x08008c69
 8008aa0:	08008c69 	.word	0x08008c69
 8008aa4:	08008c57 	.word	0x08008c57
 8008aa8:	08008c69 	.word	0x08008c69
 8008aac:	08008c69 	.word	0x08008c69
 8008ab0:	08008c69 	.word	0x08008c69
 8008ab4:	08008c69 	.word	0x08008c69
 8008ab8:	08008c69 	.word	0x08008c69
 8008abc:	08008c69 	.word	0x08008c69
 8008ac0:	08008c69 	.word	0x08008c69
 8008ac4:	08008c69 	.word	0x08008c69
 8008ac8:	08008c69 	.word	0x08008c69
 8008acc:	08008c69 	.word	0x08008c69
 8008ad0:	08008c69 	.word	0x08008c69
 8008ad4:	08008c69 	.word	0x08008c69
 8008ad8:	08008c69 	.word	0x08008c69
 8008adc:	08008c69 	.word	0x08008c69
 8008ae0:	08008c69 	.word	0x08008c69
 8008ae4:	08008c69 	.word	0x08008c69
 8008ae8:	08008c69 	.word	0x08008c69
 8008aec:	08008c69 	.word	0x08008c69
 8008af0:	08008c69 	.word	0x08008c69
 8008af4:	08008c69 	.word	0x08008c69
 8008af8:	08008c69 	.word	0x08008c69
 8008afc:	08008c69 	.word	0x08008c69
 8008b00:	08008c69 	.word	0x08008c69
 8008b04:	08008c69 	.word	0x08008c69
 8008b08:	08008c69 	.word	0x08008c69
 8008b0c:	08008c69 	.word	0x08008c69
 8008b10:	08008c69 	.word	0x08008c69
 8008b14:	08008c69 	.word	0x08008c69
 8008b18:	08008c69 	.word	0x08008c69
 8008b1c:	08008c69 	.word	0x08008c69
 8008b20:	08008c69 	.word	0x08008c69
 8008b24:	08008c69 	.word	0x08008c69
 8008b28:	08008c69 	.word	0x08008c69
 8008b2c:	08008c69 	.word	0x08008c69
 8008b30:	08008c69 	.word	0x08008c69
 8008b34:	08008c69 	.word	0x08008c69
 8008b38:	08008c69 	.word	0x08008c69
 8008b3c:	08008c69 	.word	0x08008c69
 8008b40:	08008c69 	.word	0x08008c69
 8008b44:	08008c69 	.word	0x08008c69
 8008b48:	08008c69 	.word	0x08008c69
 8008b4c:	08008c69 	.word	0x08008c69
 8008b50:	08008bc7 	.word	0x08008bc7
 8008b54:	2b9e      	cmp	r3, #158	; 0x9e
 8008b56:	d051      	beq.n	8008bfc <SCSI_ProcessCmd+0x274>
 8008b58:	e086      	b.n	8008c68 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8008b5a:	7afb      	ldrb	r3, [r7, #11]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f893 	bl	8008c8c <SCSI_TestUnitReady>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]
      break;
 8008b6a:	e089      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4619      	mov	r1, r3
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fb9a 	bl	80092ac <SCSI_RequestSense>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	e080      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4619      	mov	r1, r3
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 f8df 	bl	8008d48 <SCSI_Inquiry>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	e077      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	4619      	mov	r1, r3
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fc7e 	bl	8009498 <SCSI_StartStopUnit>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba0:	e06e      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fcd2 	bl	8009552 <SCSI_AllowPreventRemovable>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb2:	e065      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fb16 	bl	80091ec <SCSI_ModeSense6>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc4:	e05c      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8008bc6:	7afb      	ldrb	r3, [r7, #11]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fb3d 	bl	800924c <SCSI_ModeSense10>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd6:	e053      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fa86 	bl	80090f0 <SCSI_ReadFormatCapacity>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]
      break;
 8008be8:	e04a      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8008bea:	7afb      	ldrb	r3, [r7, #11]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f929 	bl	8008e48 <SCSI_ReadCapacity10>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bfa:	e041      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8008bfc:	7afb      	ldrb	r3, [r7, #11]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4619      	mov	r1, r3
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f9af 	bl	8008f66 <SCSI_ReadCapacity16>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0c:	e038      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4619      	mov	r1, r3
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fccd 	bl	80095b4 <SCSI_Read10>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c1e:	e02f      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	4619      	mov	r1, r3
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fd7b 	bl	8009722 <SCSI_Read12>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c30:	e026      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4619      	mov	r1, r3
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fe33 	bl	80098a4 <SCSI_Write10>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75fb      	strb	r3, [r7, #23]
      break;
 8008c42:	e01d      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8008c44:	7afb      	ldrb	r3, [r7, #11]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 ff0e 	bl	8009a6c <SCSI_Write12>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]
      break;
 8008c54:	e014      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8008c56:	7afb      	ldrb	r3, [r7, #11]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fff9 	bl	8009c54 <SCSI_Verify10>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
      break;
 8008c66:	e00b      	b.n	8008c80 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008c68:	7af9      	ldrb	r1, [r7, #11]
 8008c6a:	2320      	movs	r3, #32
 8008c6c:	2205      	movs	r2, #5
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fbb6 	bl	80093e0 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2202      	movs	r2, #2
 8008c78:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7e:	bf00      	nop
  }

  return ret;
 8008c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	460b      	mov	r3, r1
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	32b0      	adds	r2, #176	; 0xb0
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb4:	e043      	b.n	8008d3e <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc8:	7f59      	ldrb	r1, [r3, #29]
 8008cca:	2320      	movs	r3, #32
 8008ccc:	2205      	movs	r2, #5
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 fb86 	bl	80093e0 <SCSI_SenseCode>

    return -1;
 8008cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd8:	e031      	b.n	8008d3e <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d10b      	bne.n	8008d00 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008ce8:	7af9      	ldrb	r1, [r7, #11]
 8008cea:	233a      	movs	r3, #58	; 0x3a
 8008cec:	2202      	movs	r2, #2
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fb76 	bl	80093e0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2205      	movs	r2, #5
 8008cf8:	721a      	strb	r2, [r3, #8]
    return -1;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	e01e      	b.n	8008d3e <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	33b0      	adds	r3, #176	; 0xb0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	7afa      	ldrb	r2, [r7, #11]
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008d1e:	7af9      	ldrb	r1, [r7, #11]
 8008d20:	233a      	movs	r3, #58	; 0x3a
 8008d22:	2202      	movs	r2, #2
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fb5b 	bl	80093e0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	721a      	strb	r2, [r3, #8]

    return -1;
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	e003      	b.n	8008d3e <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	60da      	str	r2, [r3, #12]

  return 0;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	460b      	mov	r3, r1
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	32b0      	adds	r2, #176	; 0xb0
 8008d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d64:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d70:	e062      	b.n	8008e38 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d84:	7f59      	ldrb	r1, [r3, #29]
 8008d86:	2320      	movs	r3, #32
 8008d88:	2205      	movs	r2, #5
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fb28 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	e050      	b.n	8008e38 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d021      	beq.n	8008de8 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3302      	adds	r3, #2
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008dae:	2206      	movs	r2, #6
 8008db0:	4923      	ldr	r1, [pc, #140]	; (8008e40 <SCSI_Inquiry+0xf8>)
 8008db2:	69b8      	ldr	r0, [r7, #24]
 8008db4:	f001 f8fa 	bl	8009fac <SCSI_UpdateBotData>
 8008db8:	e03d      	b.n	8008e36 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b80      	cmp	r3, #128	; 0x80
 8008dc2:	d105      	bne.n	8008dd0 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	491f      	ldr	r1, [pc, #124]	; (8008e44 <SCSI_Inquiry+0xfc>)
 8008dc8:	69b8      	ldr	r0, [r7, #24]
 8008dca:	f001 f8ef 	bl	8009fac <SCSI_UpdateBotData>
 8008dce:	e032      	b.n	8008e36 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd6:	7f59      	ldrb	r1, [r3, #29]
 8008dd8:	2324      	movs	r3, #36	; 0x24
 8008dda:	2205      	movs	r2, #5
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 faff 	bl	80093e0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295
 8008de6:	e027      	b.n	8008e38 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	33b0      	adds	r3, #176	; 0xb0
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008df8:	69d9      	ldr	r1, [r3, #28]
 8008dfa:	7afa      	ldrb	r2, [r7, #11]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008e04:	440b      	add	r3, r1
 8008e06:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	3305      	adds	r3, #5
 8008e12:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3304      	adds	r3, #4
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	8bfa      	ldrh	r2, [r7, #30]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d303      	bcc.n	8008e2a <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008e2a:	8bfb      	ldrh	r3, [r7, #30]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6979      	ldr	r1, [r7, #20]
 8008e30:	69b8      	ldr	r0, [r7, #24]
 8008e32:	f001 f8bb 	bl	8009fac <SCSI_UpdateBotData>
  }

  return 0;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3720      	adds	r7, #32
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000074 	.word	0x20000074
 8008e44:	2000007c 	.word	0x2000007c

08008e48 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	460b      	mov	r3, r1
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	32b0      	adds	r2, #176	; 0xb0
 8008e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e64:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	e075      	b.n	8008f5e <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	33b0      	adds	r3, #176	; 0xb0
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	685c      	ldr	r4, [r3, #4]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8008e92:	3204      	adds	r2, #4
 8008e94:	7af8      	ldrb	r0, [r7, #11]
 8008e96:	4619      	mov	r1, r3
 8008e98:	47a0      	blx	r4
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008e9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <SCSI_ReadCapacity10+0x6c>
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d108      	bne.n	8008ec6 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008eb4:	7af9      	ldrb	r1, [r7, #11]
 8008eb6:	233a      	movs	r3, #58	; 0x3a
 8008eb8:	2202      	movs	r2, #2
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fa90 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec4:	e04b      	b.n	8008f5e <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f18:	161b      	asrs	r3, r3, #24
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f2a:	141b      	asrs	r3, r3, #16
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f38:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f4c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2208      	movs	r2, #8
 8008f5a:	60da      	str	r2, [r3, #12]

  return 0;
 8008f5c:	2300      	movs	r3, #0

}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd90      	pop	{r4, r7, pc}

08008f66 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008f66:	b590      	push	{r4, r7, lr}
 8008f68:	b089      	sub	sp, #36	; 0x24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	32b0      	adds	r2, #176	; 0xb0
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	e0ab      	b.n	80090e8 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	33b0      	adds	r3, #176	; 0xb0
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	685c      	ldr	r4, [r3, #4]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8008fa8:	3308      	adds	r3, #8
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8008fb0:	3204      	adds	r2, #4
 8008fb2:	7af8      	ldrb	r0, [r7, #11]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	47a0      	blx	r4
 8008fb8:	4603      	mov	r3, r0
 8008fba:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <SCSI_ReadCapacity16+0x6c>
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d108      	bne.n	8008fe4 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008fd2:	7af9      	ldrb	r1, [r7, #11]
 8008fd4:	233a      	movs	r3, #58	; 0x3a
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fa01 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	e081      	b.n	80090e8 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	330a      	adds	r3, #10
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	330b      	adds	r3, #11
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008ff4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008ffe:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	320d      	adds	r2, #13
 8009004:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009006:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	e008      	b.n	8009024 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	4413      	add	r3, r2
 8009018:	3310      	adds	r3, #16
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	3301      	adds	r3, #1
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	429a      	cmp	r2, r3
 800902c:	d3f1      	bcc.n	8009012 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009036:	3b01      	subs	r3, #1
 8009038:	0e1b      	lsrs	r3, r3, #24
 800903a:	b2da      	uxtb	r2, r3
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009048:	3b01      	subs	r3, #1
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	b2da      	uxtb	r2, r3
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800905a:	3b01      	subs	r3, #1
 800905c:	0a1b      	lsrs	r3, r3, #8
 800905e:	b2da      	uxtb	r2, r3
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906c:	b2db      	uxtb	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b2da      	uxtb	r2, r3
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009080:	161b      	asrs	r3, r3, #24
 8009082:	b2da      	uxtb	r2, r3
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009092:	141b      	asrs	r3, r3, #16
 8009094:	b2da      	uxtb	r2, r3
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	330a      	adds	r3, #10
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	330b      	adds	r3, #11
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80090ce:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	330c      	adds	r3, #12
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80090d8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	320d      	adds	r2, #13
 80090de:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80090e0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	60da      	str	r2, [r3, #12]

  return 0;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3724      	adds	r7, #36	; 0x24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	460b      	mov	r3, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	32b0      	adds	r2, #176	; 0xb0
 8009108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009114:	f04f 33ff 	mov.w	r3, #4294967295
 8009118:	e063      	b.n	80091e2 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	33b0      	adds	r3, #176	; 0xb0
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f107 0214 	add.w	r2, r7, #20
 8009130:	f107 0110 	add.w	r1, r7, #16
 8009134:	7af8      	ldrb	r0, [r7, #11]
 8009136:	4798      	blx	r3
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <SCSI_ReadFormatCapacity+0x62>
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800914e:	2b02      	cmp	r3, #2
 8009150:	d108      	bne.n	8009164 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009152:	7af9      	ldrb	r1, [r7, #11]
 8009154:	233a      	movs	r3, #58	; 0x3a
 8009156:	2202      	movs	r2, #2
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f941 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 800915e:	f04f 33ff 	mov.w	r3, #4294967295
 8009162:	e03e      	b.n	80091e2 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009164:	2300      	movs	r3, #0
 8009166:	83fb      	strh	r3, [r7, #30]
 8009168:	e007      	b.n	800917a <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800916a:	8bfb      	ldrh	r3, [r7, #30]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4413      	add	r3, r2
 8009170:	2200      	movs	r2, #0
 8009172:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009174:	8bfb      	ldrh	r3, [r7, #30]
 8009176:	3301      	adds	r3, #1
 8009178:	83fb      	strh	r3, [r7, #30]
 800917a:	8bfb      	ldrh	r3, [r7, #30]
 800917c:	2b0b      	cmp	r3, #11
 800917e:	d9f4      	bls.n	800916a <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2208      	movs	r2, #8
 8009184:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3b01      	subs	r3, #1
 800918a:	0e1b      	lsrs	r3, r3, #24
 800918c:	b2da      	uxtb	r2, r3
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3b01      	subs	r3, #1
 8009196:	0c1b      	lsrs	r3, r3, #16
 8009198:	b2da      	uxtb	r2, r3
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	0a1b      	lsrs	r3, r3, #8
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2202      	movs	r2, #2
 80091ba:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80091bc:	8abb      	ldrh	r3, [r7, #20]
 80091be:	141b      	asrs	r3, r3, #16
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80091c6:	8abb      	ldrh	r3, [r7, #20]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80091d2:	8abb      	ldrh	r3, [r7, #20]
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	220c      	movs	r2, #12
 80091de:	60da      	str	r2, [r3, #12]

  return 0;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	460b      	mov	r3, r1
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	32b0      	adds	r2, #176	; 0xb0
 8009204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009208:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800920a:	2317      	movs	r3, #23
 800920c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	e011      	b.n	800923e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3304      	adds	r3, #4
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	8afa      	ldrh	r2, [r7, #22]
 8009224:	429a      	cmp	r2, r3
 8009226:	d303      	bcc.n	8009230 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3304      	adds	r3, #4
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009230:	8afb      	ldrh	r3, [r7, #22]
 8009232:	461a      	mov	r2, r3
 8009234:	4904      	ldr	r1, [pc, #16]	; (8009248 <SCSI_ModeSense6+0x5c>)
 8009236:	6938      	ldr	r0, [r7, #16]
 8009238:	f000 feb8 	bl	8009fac <SCSI_UpdateBotData>

  return 0;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000084 	.word	0x20000084

0800924c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	460b      	mov	r3, r1
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	32b0      	adds	r2, #176	; 0xb0
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800926a:	231b      	movs	r3, #27
 800926c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009274:	f04f 33ff 	mov.w	r3, #4294967295
 8009278:	e011      	b.n	800929e <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3308      	adds	r3, #8
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	8afa      	ldrh	r2, [r7, #22]
 8009284:	429a      	cmp	r2, r3
 8009286:	d303      	bcc.n	8009290 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3308      	adds	r3, #8
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009290:	8afb      	ldrh	r3, [r7, #22]
 8009292:	461a      	mov	r2, r3
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <SCSI_ModeSense10+0x5c>)
 8009296:	6938      	ldr	r0, [r7, #16]
 8009298:	f000 fe88 	bl	8009fac <SCSI_UpdateBotData>

  return 0;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	2000009c 	.word	0x2000009c

080092ac <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	460b      	mov	r3, r1
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	32b0      	adds	r2, #176	; 0xb0
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80092d0:	f04f 33ff 	mov.w	r3, #4294967295
 80092d4:	e080      	b.n	80093d8 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	7f59      	ldrb	r1, [r3, #29]
 80092ea:	2320      	movs	r3, #32
 80092ec:	2205      	movs	r2, #5
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f876 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	e06e      	b.n	80093d8 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	75fb      	strb	r3, [r7, #23]
 80092fe:	e007      	b.n	8009310 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4413      	add	r3, r2
 8009306:	2200      	movs	r2, #0
 8009308:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	3301      	adds	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	2b11      	cmp	r3, #17
 8009314:	d9f4      	bls.n	8009300 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2270      	movs	r2, #112	; 0x70
 800931a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	220c      	movs	r2, #12
 8009320:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009328:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009332:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009336:	429a      	cmp	r2, r3
 8009338:	d03f      	beq.n	80093ba <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009340:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009344:	461a      	mov	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800934c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	4413      	add	r3, r2
 8009368:	791a      	ldrb	r2, [r3, #4]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009374:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	795a      	ldrb	r2, [r3, #5]
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009392:	3301      	adds	r3, #1
 8009394:	b2da      	uxtb	r2, r3
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	d105      	bne.n	80093ba <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2212      	movs	r2, #18
 80093be:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3304      	adds	r3, #4
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b12      	cmp	r3, #18
 80093c8:	d805      	bhi.n	80093d6 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3304      	adds	r3, #4
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	4608      	mov	r0, r1
 80093ea:	4611      	mov	r1, r2
 80093ec:	461a      	mov	r2, r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	70fb      	strb	r3, [r7, #3]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70bb      	strb	r3, [r7, #2]
 80093f6:	4613      	mov	r3, r2
 80093f8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	32b0      	adds	r2, #176	; 0xb0
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03d      	beq.n	800948c <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009416:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009422:	78b9      	ldrb	r1, [r7, #2]
 8009424:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4413      	add	r3, r2
 800943c:	787a      	ldrb	r2, [r7, #1]
 800943e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009446:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	4413      	add	r3, r2
 8009454:	2200      	movs	r2, #0
 8009456:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009462:	3301      	adds	r3, #1
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009476:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800947a:	2b04      	cmp	r3, #4
 800947c:	d107      	bne.n	800948e <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800948a:	e000      	b.n	800948e <SCSI_SenseCode+0xae>
    return;
 800948c:	bf00      	nop
  }
}
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	460b      	mov	r3, r1
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	32b0      	adds	r2, #176	; 0xb0
 80094b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80094bc:	f04f 33ff 	mov.w	r3, #4294967295
 80094c0:	e043      	b.n	800954a <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d10f      	bne.n	80094f0 <SCSI_StartStopUnit+0x58>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d108      	bne.n	80094f0 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80094de:	7af9      	ldrb	r1, [r7, #11]
 80094e0:	2324      	movs	r3, #36	; 0x24
 80094e2:	2205      	movs	r2, #5
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff ff7b 	bl	80093e0 <SCSI_SenseCode>

    return -1;
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295
 80094ee:	e02c      	b.n	800954a <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3304      	adds	r3, #4
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d106      	bne.n	800950c <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800950a:	e01a      	b.n	8009542 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b02      	cmp	r3, #2
 8009518:	d106      	bne.n	8009528 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	2202      	movs	r2, #2
 8009522:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009526:	e00c      	b.n	8009542 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3304      	adds	r3, #4
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b03      	cmp	r3, #3
 8009534:	d105      	bne.n	8009542 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2200      	movs	r2, #0
 8009546:	60da      	str	r2, [r3, #12]

  return 0;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009552:	b480      	push	{r7}
 8009554:	b087      	sub	sp, #28
 8009556:	af00      	add	r7, sp, #0
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	460b      	mov	r3, r1
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	32b0      	adds	r2, #176	; 0xb0
 800956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	e015      	b.n	80095a8 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009592:	e005      	b.n	80095a0 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	60da      	str	r2, [r3, #12]

  return 0;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	460b      	mov	r3, r1
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	32b0      	adds	r2, #176	; 0xb0
 80095cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <SCSI_Read10+0x2a>
  {
    return -1;
 80095d8:	f04f 33ff 	mov.w	r3, #4294967295
 80095dc:	e09d      	b.n	800971a <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	7a1b      	ldrb	r3, [r3, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 808f 	bne.w	8009706 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ee:	7f1b      	ldrb	r3, [r3, #28]
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	db0b      	blt.n	800960e <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	7f59      	ldrb	r1, [r3, #29]
 80095fe:	2320      	movs	r3, #32
 8009600:	2205      	movs	r2, #5
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff feec 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295
 800960c:	e085      	b.n	800971a <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009614:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009618:	2b02      	cmp	r3, #2
 800961a:	d108      	bne.n	800962e <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800961c:	7af9      	ldrb	r1, [r7, #11]
 800961e:	233a      	movs	r3, #58	; 0x3a
 8009620:	2202      	movs	r2, #2
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fedc 	bl	80093e0 <SCSI_SenseCode>

      return -1;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	e075      	b.n	800971a <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	33b0      	adds	r3, #176	; 0xb0
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	7afa      	ldrb	r2, [r7, #11]
 8009642:	4610      	mov	r0, r2
 8009644:	4798      	blx	r3
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d008      	beq.n	800965e <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800964c:	7af9      	ldrb	r1, [r7, #11]
 800964e:	233a      	movs	r3, #58	; 0x3a
 8009650:	2202      	movs	r2, #2
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7ff fec4 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	e05d      	b.n	800971a <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3302      	adds	r3, #2
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3303      	adds	r3, #3
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800966e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009678:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	3205      	adds	r2, #5
 800967e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009680:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009688:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3307      	adds	r3, #7
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	3208      	adds	r2, #8
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	4313      	orrs	r3, r2
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096a0:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b2:	7af9      	ldrb	r1, [r7, #11]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fb0c 	bl	8009cd2 <SCSI_CheckAddressRange>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da02      	bge.n	80096c6 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80096c0:	f04f 33ff 	mov.w	r3, #4294967295
 80096c4:	e029      	b.n	800971a <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d6:	6979      	ldr	r1, [r7, #20]
 80096d8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80096dc:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d00b      	beq.n	8009700 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ee:	7f59      	ldrb	r1, [r3, #29]
 80096f0:	2320      	movs	r3, #32
 80096f2:	2205      	movs	r2, #5
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fe73 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295
 80096fe:	e00c      	b.n	800971a <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2202      	movs	r2, #2
 8009704:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800970c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	4619      	mov	r1, r3
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fb0a 	bl	8009d2c <SCSI_ProcessRead>
 8009718:	4603      	mov	r3, r0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	460b      	mov	r3, r1
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	32b0      	adds	r2, #176	; 0xb0
 800973a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <SCSI_Read12+0x2a>
  {
    return -1;
 8009746:	f04f 33ff 	mov.w	r3, #4294967295
 800974a:	e0a7      	b.n	800989c <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	7a1b      	ldrb	r3, [r3, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	f040 8099 	bne.w	8009888 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975c:	7f1b      	ldrb	r3, [r3, #28]
 800975e:	b25b      	sxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	db0b      	blt.n	800977c <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976a:	7f59      	ldrb	r1, [r3, #29]
 800976c:	2320      	movs	r3, #32
 800976e:	2205      	movs	r2, #5
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fe35 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009776:	f04f 33ff 	mov.w	r3, #4294967295
 800977a:	e08f      	b.n	800989c <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009782:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009786:	2b02      	cmp	r3, #2
 8009788:	d108      	bne.n	800979c <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800978a:	7af9      	ldrb	r1, [r7, #11]
 800978c:	233a      	movs	r3, #58	; 0x3a
 800978e:	2202      	movs	r2, #2
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fe25 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
 800979a:	e07f      	b.n	800989c <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	33b0      	adds	r3, #176	; 0xb0
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	7afa      	ldrb	r2, [r7, #11]
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d008      	beq.n	80097cc <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80097ba:	7af9      	ldrb	r1, [r7, #11]
 80097bc:	233a      	movs	r3, #58	; 0x3a
 80097be:	2202      	movs	r2, #2
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff fe0d 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	e067      	b.n	800989c <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3302      	adds	r3, #2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3303      	adds	r3, #3
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80097dc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3304      	adds	r3, #4
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80097e6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	3205      	adds	r2, #5
 80097ec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80097ee:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80097f6:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3306      	adds	r3, #6
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3307      	adds	r3, #7
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009808:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3308      	adds	r3, #8
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009812:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	3209      	adds	r2, #9
 8009818:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800981a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009822:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009834:	7af9      	ldrb	r1, [r7, #11]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fa4b 	bl	8009cd2 <SCSI_CheckAddressRange>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	da02      	bge.n	8009848 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	e029      	b.n	800989c <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984e:	699a      	ldr	r2, [r3, #24]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009858:	6979      	ldr	r1, [r7, #20]
 800985a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800985e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	429a      	cmp	r2, r3
 8009868:	d00b      	beq.n	8009882 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009870:	7f59      	ldrb	r1, [r3, #29]
 8009872:	2320      	movs	r3, #32
 8009874:	2205      	movs	r2, #5
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fdb2 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 800987c:	f04f 33ff 	mov.w	r3, #4294967295
 8009880:	e00c      	b.n	800989c <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2202      	movs	r2, #2
 8009886:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800988e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 fa49 	bl	8009d2c <SCSI_ProcessRead>
 800989a:	4603      	mov	r3, r0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	460b      	mov	r3, r1
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	32b0      	adds	r2, #176	; 0xb0
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <SCSI_Write10+0x2a>
  {
    return -1;
 80098c8:	f04f 33ff 	mov.w	r3, #4294967295
 80098cc:	e0c7      	b.n	8009a5e <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	7a1b      	ldrb	r3, [r3, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 80bd 	bne.w	8009a52 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10b      	bne.n	80098fc <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ea:	7f59      	ldrb	r1, [r3, #29]
 80098ec:	2320      	movs	r3, #32
 80098ee:	2205      	movs	r2, #5
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff fd75 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	e0b0      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	7f1b      	ldrb	r3, [r3, #28]
 8009904:	b25b      	sxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	da0b      	bge.n	8009922 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009910:	7f59      	ldrb	r1, [r3, #29]
 8009912:	2320      	movs	r3, #32
 8009914:	2205      	movs	r2, #5
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7ff fd62 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 800991c:	f04f 33ff 	mov.w	r3, #4294967295
 8009920:	e09d      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	33b0      	adds	r3, #176	; 0xb0
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	7afa      	ldrb	r2, [r7, #11]
 8009936:	4610      	mov	r0, r2
 8009938:	4798      	blx	r3
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009940:	7af9      	ldrb	r1, [r7, #11]
 8009942:	233a      	movs	r3, #58	; 0x3a
 8009944:	2202      	movs	r2, #2
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff fd4a 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 800994c:	f04f 33ff 	mov.w	r3, #4294967295
 8009950:	e085      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	33b0      	adds	r3, #176	; 0xb0
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	7afa      	ldrb	r2, [r7, #11]
 8009966:	4610      	mov	r0, r2
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d008      	beq.n	8009982 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009970:	7af9      	ldrb	r1, [r7, #11]
 8009972:	2327      	movs	r3, #39	; 0x27
 8009974:	2202      	movs	r2, #2
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff fd32 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 800997c:	f04f 33ff 	mov.w	r3, #4294967295
 8009980:	e06d      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3302      	adds	r3, #2
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	3303      	adds	r3, #3
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009992:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800999c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	3205      	adds	r2, #5
 80099a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80099a4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099ac:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3307      	adds	r3, #7
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	3208      	adds	r2, #8
 80099ba:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80099bc:	4313      	orrs	r3, r2
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099c4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d6:	7af9      	ldrb	r1, [r7, #11]
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f97a 	bl	8009cd2 <SCSI_CheckAddressRange>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	da02      	bge.n	80099ea <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80099e4:	f04f 33ff 	mov.w	r3, #4294967295
 80099e8:	e039      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099f8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d00b      	beq.n	8009a28 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	7f59      	ldrb	r1, [r3, #29]
 8009a18:	2320      	movs	r3, #32
 8009a1a:	2205      	movs	r2, #5
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f7ff fcdf 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295
 8009a26:	e01a      	b.n	8009a5e <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2e:	bf28      	it	cs
 8009a30:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009a34:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <SCSI_Write10+0x1c4>)
 8009a3e:	7819      	ldrb	r1, [r3, #0]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f103 0210 	add.w	r2, r3, #16
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f002 fa5b 	bl	800bf04 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e005      	b.n	8009a5e <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	4619      	mov	r1, r3
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f9fe 	bl	8009e58 <SCSI_ProcessWrite>
 8009a5c:	4603      	mov	r3, r0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000073 	.word	0x20000073

08009a6c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	460b      	mov	r3, r1
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	32b0      	adds	r2, #176	; 0xb0
 8009a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a88:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d102      	bne.n	8009a96 <SCSI_Write12+0x2a>
  {
    return -1;
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295
 8009a94:	e0d7      	b.n	8009c46 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	7a1b      	ldrb	r3, [r3, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 80cd 	bne.w	8009c3a <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10b      	bne.n	8009ac4 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab2:	7f59      	ldrb	r1, [r3, #29]
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fc91 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac2:	e0c0      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aca:	7f1b      	ldrb	r3, [r3, #28]
 8009acc:	b25b      	sxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da0b      	bge.n	8009aea <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad8:	7f59      	ldrb	r1, [r3, #29]
 8009ada:	2320      	movs	r3, #32
 8009adc:	2205      	movs	r2, #5
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fc7e 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae8:	e0ad      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	33b0      	adds	r3, #176	; 0xb0
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	7afa      	ldrb	r2, [r7, #11]
 8009afe:	4610      	mov	r0, r2
 8009b00:	4798      	blx	r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b08:	7af9      	ldrb	r1, [r7, #11]
 8009b0a:	233a      	movs	r3, #58	; 0x3a
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fc66 	bl	80093e0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2205      	movs	r2, #5
 8009b18:	721a      	strb	r2, [r3, #8]
      return -1;
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1e:	e092      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	33b0      	adds	r3, #176	; 0xb0
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	7afa      	ldrb	r2, [r7, #11]
 8009b34:	4610      	mov	r0, r2
 8009b36:	4798      	blx	r3
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009b3e:	7af9      	ldrb	r1, [r7, #11]
 8009b40:	2327      	movs	r3, #39	; 0x27
 8009b42:	2202      	movs	r2, #2
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f7ff fc4b 	bl	80093e0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	721a      	strb	r2, [r3, #8]
      return -1;
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	e077      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3302      	adds	r3, #2
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3303      	adds	r3, #3
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009b70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	3205      	adds	r2, #5
 8009b76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009b78:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b80:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3306      	adds	r3, #6
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009b92:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3308      	adds	r3, #8
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009b9c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	3209      	adds	r2, #9
 8009ba2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009ba4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bac:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbe:	7af9      	ldrb	r1, [r7, #11]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f886 	bl	8009cd2 <SCSI_CheckAddressRange>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da02      	bge.n	8009bd2 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd0:	e039      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009be0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009be4:	fb02 f303 	mul.w	r3, r2, r3
 8009be8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d00b      	beq.n	8009c10 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	7f59      	ldrb	r1, [r3, #29]
 8009c00:	2320      	movs	r3, #32
 8009c02:	2205      	movs	r2, #5
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff fbeb 	bl	80093e0 <SCSI_SenseCode>
      return -1;
 8009c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0e:	e01a      	b.n	8009c46 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	bf28      	it	cs
 8009c18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009c1c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2201      	movs	r2, #1
 8009c22:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <SCSI_Write12+0x1e4>)
 8009c26:	7819      	ldrb	r1, [r3, #0]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f103 0210 	add.w	r2, r3, #16
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f002 f967 	bl	800bf04 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	e005      	b.n	8009c46 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f90a 	bl	8009e58 <SCSI_ProcessWrite>
 8009c44:	4603      	mov	r3, r0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000073 	.word	0x20000073

08009c54 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	32b0      	adds	r2, #176	; 0xb0
 8009c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d102      	bne.n	8009c7e <SCSI_Verify10+0x2a>
  {
    return -1;
 8009c78:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7c:	e025      	b.n	8009cca <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3301      	adds	r3, #1
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009c8c:	7af9      	ldrb	r1, [r7, #11]
 8009c8e:	2324      	movs	r3, #36	; 0x24
 8009c90:	2205      	movs	r2, #5
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fba4 	bl	80093e0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	e015      	b.n	8009cca <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cae:	7af9      	ldrb	r1, [r7, #11]
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f80e 	bl	8009cd2 <SCSI_CheckAddressRange>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	da02      	bge.n	8009cc2 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	e003      	b.n	8009cca <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	60da      	str	r2, [r3, #12]

  return 0;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	32b0      	adds	r2, #176	; 0xb0
 8009cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8009cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfc:	e012      	b.n	8009d24 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	441a      	add	r2, r3
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d908      	bls.n	8009d22 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009d10:	7af9      	ldrb	r1, [r7, #11]
 8009d12:	2321      	movs	r3, #33	; 0x21
 8009d14:	2205      	movs	r2, #5
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff fb62 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	e000      	b.n	8009d24 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	; 0xb0
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8009d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d52:	e07b      	b.n	8009e4c <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d62:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
 8009d6a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d72:	bf28      	it	cs
 8009d74:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009d78:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	33b0      	adds	r3, #176	; 0xb0
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	691c      	ldr	r4, [r3, #16]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f103 0110 	add.w	r1, r3, #16
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009da4:	4618      	mov	r0, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	78f8      	ldrb	r0, [r7, #3]
 8009db0:	47a0      	blx	r4
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da08      	bge.n	8009dca <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009db8:	78f9      	ldrb	r1, [r7, #3]
 8009dba:	2311      	movs	r3, #17
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fb0e 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8009dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc8:	e040      	b.n	8009e4c <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009dca:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <SCSI_ProcessRead+0x128>)
 8009dcc:	7819      	ldrb	r1, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f103 0210 	add.w	r2, r3, #16
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f002 f85c 	bl	800be94 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009df6:	4413      	add	r3, r2
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dfe:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e12:	4619      	mov	r1, r3
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e22:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e36:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d102      	bne.n	8009e4a <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}
 8009e54:	20000072 	.word	0x20000072

08009e58 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	32b0      	adds	r2, #176	; 0xb0
 8009e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e72:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8009e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7e:	e08e      	b.n	8009f9e <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e8e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009e92:	fb02 f303 	mul.w	r3, r2, r3
 8009e96:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9e:	bf28      	it	cs
 8009ea0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009ea4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	33b0      	adds	r3, #176	; 0xb0
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	695c      	ldr	r4, [r3, #20]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f103 0110 	add.w	r1, r3, #16
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ecc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	78f8      	ldrb	r0, [r7, #3]
 8009edc:	47a0      	blx	r4
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	da08      	bge.n	8009ef6 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009ee4:	78f9      	ldrb	r1, [r7, #3]
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	2204      	movs	r2, #4
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff fa78 	bl	80093e0 <SCSI_SenseCode>
    return -1;
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	e053      	b.n	8009f9e <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f10:	4413      	add	r3, r2
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f18:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f3c:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f50:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009f5e:	2100      	movs	r1, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7fe fc53 	bl	800880c <MSC_BOT_SendCSW>
 8009f66:	e019      	b.n	8009f9c <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f76:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009f7a:	fb02 f303 	mul.w	r3, r2, r3
 8009f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f82:	bf28      	it	cs
 8009f84:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009f88:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009f8a:	4b07      	ldr	r3, [pc, #28]	; (8009fa8 <SCSI_ProcessWrite+0x150>)
 8009f8c:	7819      	ldrb	r1, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f103 0210 	add.w	r2, r3, #16
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 ffb4 	bl	800bf04 <USBD_LL_PrepareReceive>
  }

  return 0;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd90      	pop	{r4, r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000073 	.word	0x20000073

08009fac <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009fba:	88fb      	ldrh	r3, [r7, #6]
 8009fbc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc8:	e013      	b.n	8009ff2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009fca:	8afa      	ldrh	r2, [r7, #22]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009fd0:	e00b      	b.n	8009fea <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009fd2:	8afb      	ldrh	r3, [r7, #22]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009fd8:	8afb      	ldrh	r3, [r7, #22]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	441a      	add	r2, r3
 8009fde:	8afb      	ldrh	r3, [r7, #22]
 8009fe0:	7811      	ldrb	r1, [r2, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	460a      	mov	r2, r1
 8009fe8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8009fea:	8afb      	ldrh	r3, [r7, #22]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1f0      	bne.n	8009fd2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b086      	sub	sp, #24
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	4613      	mov	r3, r2
 800a00a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a012:	2303      	movs	r3, #3
 800a014:	e01f      	b.n	800a056 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	79fa      	ldrb	r2, [r7, #7]
 800a048:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f001 fd1e 	bl	800ba8c <USBD_LL_Init>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a072:	2303      	movs	r3, #3
 800a074:	e025      	b.n	800a0c2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	32ae      	adds	r2, #174	; 0xae
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00f      	beq.n	800a0b2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	32ae      	adds	r2, #174	; 0xae
 800a09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	f107 020e 	add.w	r2, r7, #14
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4798      	blx	r3
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 fd32 	bl	800bb3c <USBD_LL_Start>
 800a0d8:	4603      	mov	r3, r0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d009      	beq.n	800a126 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	78fa      	ldrb	r2, [r7, #3]
 800a11c:	4611      	mov	r1, r2
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	4611      	mov	r1, r2
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	4798      	blx	r3
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a156:	2303      	movs	r3, #3
 800a158:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f001 f8a7 	bl	800b2ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a198:	f003 031f 	and.w	r3, r3, #31
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d01a      	beq.n	800a1d6 <USBD_LL_SetupStage+0x72>
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d822      	bhi.n	800a1ea <USBD_LL_SetupStage+0x86>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <USBD_LL_SetupStage+0x4a>
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d00a      	beq.n	800a1c2 <USBD_LL_SetupStage+0x5e>
 800a1ac:	e01d      	b.n	800a1ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fad4 	bl	800a764 <USBD_StdDevReq>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c0:	e020      	b.n	800a204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fb3c 	bl	800a848 <USBD_StdItfReq>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d4:	e016      	b.n	800a204 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fb9e 	bl	800a920 <USBD_StdEPReq>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e8:	e00c      	b.n	800a204 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fd7b 	bl	800bcf4 <USBD_LL_StallEP>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
      break;
 800a202:	bf00      	nop
  }

  return ret;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b086      	sub	sp, #24
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	460b      	mov	r3, r1
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d16e      	bne.n	800a304 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a22c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a234:	2b03      	cmp	r3, #3
 800a236:	f040 8098 	bne.w	800a36a <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d913      	bls.n	800a26e <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	4293      	cmp	r3, r2
 800a25e:	bf28      	it	cs
 800a260:	4613      	movcs	r3, r2
 800a262:	461a      	mov	r2, r3
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f001 f906 	bl	800b478 <USBD_CtlContinueRx>
 800a26c:	e07d      	b.n	800a36a <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a274:	f003 031f 	and.w	r3, r3, #31
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d014      	beq.n	800a2a6 <USBD_LL_DataOutStage+0x98>
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d81d      	bhi.n	800a2bc <USBD_LL_DataOutStage+0xae>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <USBD_LL_DataOutStage+0x7c>
 800a284:	2b01      	cmp	r3, #1
 800a286:	d003      	beq.n	800a290 <USBD_LL_DataOutStage+0x82>
 800a288:	e018      	b.n	800a2bc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	75bb      	strb	r3, [r7, #22]
            break;
 800a28e:	e018      	b.n	800a2c2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a296:	b2db      	uxtb	r3, r3
 800a298:	4619      	mov	r1, r3
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f9d2 	bl	800a644 <USBD_CoreFindIF>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a2a4:	e00d      	b.n	800a2c2 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f9d4 	bl	800a65e <USBD_CoreFindEP>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	75bb      	strb	r3, [r7, #22]
            break;
 800a2ba:	e002      	b.n	800a2c2 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75bb      	strb	r3, [r7, #22]
            break;
 800a2c0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d119      	bne.n	800a2fc <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d113      	bne.n	800a2fc <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a2d4:	7dba      	ldrb	r2, [r7, #22]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	32ae      	adds	r2, #174	; 0xae
 800a2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a2e4:	7dba      	ldrb	r2, [r7, #22]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a2ec:	7dba      	ldrb	r2, [r7, #22]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	32ae      	adds	r2, #174	; 0xae
 800a2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f001 f8cc 	bl	800b49a <USBD_CtlSendStatus>
 800a302:	e032      	b.n	800a36a <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 f9a5 	bl	800a65e <USBD_CoreFindEP>
 800a314:	4603      	mov	r3, r0
 800a316:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a318:	7dbb      	ldrb	r3, [r7, #22]
 800a31a:	2bff      	cmp	r3, #255	; 0xff
 800a31c:	d025      	beq.n	800a36a <USBD_LL_DataOutStage+0x15c>
 800a31e:	7dbb      	ldrb	r3, [r7, #22]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d122      	bne.n	800a36a <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d117      	bne.n	800a360 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a330:	7dba      	ldrb	r2, [r7, #22]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	32ae      	adds	r2, #174	; 0xae
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00f      	beq.n	800a360 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a340:	7dba      	ldrb	r2, [r7, #22]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a348:	7dba      	ldrb	r2, [r7, #22]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	32ae      	adds	r2, #174	; 0xae
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	7afa      	ldrb	r2, [r7, #11]
 800a356:	4611      	mov	r1, r2
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	4798      	blx	r3
 800a35c:	4603      	mov	r3, r0
 800a35e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	e000      	b.n	800a36c <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	460b      	mov	r3, r1
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d16f      	bne.n	800a468 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3314      	adds	r3, #20
 800a38c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a394:	2b02      	cmp	r3, #2
 800a396:	d15a      	bne.n	800a44e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	689a      	ldr	r2, [r3, #8]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d914      	bls.n	800a3ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f001 f84b 	bl	800b456 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f001 fd9c 	bl	800bf04 <USBD_LL_PrepareReceive>
 800a3cc:	e03f      	b.n	800a44e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d11c      	bne.n	800a414 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d316      	bcc.n	800a414 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d20f      	bcs.n	800a414 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f001 f82c 	bl	800b456 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a406:	2300      	movs	r3, #0
 800a408:	2200      	movs	r2, #0
 800a40a:	2100      	movs	r1, #0
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f001 fd79 	bl	800bf04 <USBD_LL_PrepareReceive>
 800a412:	e01c      	b.n	800a44e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d10f      	bne.n	800a440 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d009      	beq.n	800a440 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a440:	2180      	movs	r1, #128	; 0x80
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 fc56 	bl	800bcf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f001 f839 	bl	800b4c0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d03a      	beq.n	800a4ce <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff fe42 	bl	800a0e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a466:	e032      	b.n	800a4ce <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a468:	7afb      	ldrb	r3, [r7, #11]
 800a46a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 f8f3 	bl	800a65e <USBD_CoreFindEP>
 800a478:	4603      	mov	r3, r0
 800a47a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	2bff      	cmp	r3, #255	; 0xff
 800a480:	d025      	beq.n	800a4ce <USBD_LL_DataInStage+0x15a>
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d122      	bne.n	800a4ce <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2b03      	cmp	r3, #3
 800a492:	d11c      	bne.n	800a4ce <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a494:	7dfa      	ldrb	r2, [r7, #23]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	32ae      	adds	r2, #174	; 0xae
 800a49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d014      	beq.n	800a4ce <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a4a4:	7dfa      	ldrb	r2, [r7, #23]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a4ac:	7dfa      	ldrb	r2, [r7, #23]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	32ae      	adds	r2, #174	; 0xae
 800a4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	7afa      	ldrb	r2, [r7, #11]
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	4798      	blx	r3
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a4c4:	7dbb      	ldrb	r3, [r7, #22]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a4ca:	7dbb      	ldrb	r3, [r7, #22]
 800a4cc:	e000      	b.n	800a4d0 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a510:	2b00      	cmp	r3, #0
 800a512:	d014      	beq.n	800a53e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	6852      	ldr	r2, [r2, #4]
 800a52c:	b2d2      	uxtb	r2, r2
 800a52e:	4611      	mov	r1, r2
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	4798      	blx	r3
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a53e:	2340      	movs	r3, #64	; 0x40
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fb2b 	bl	800bba0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2240      	movs	r2, #64	; 0x40
 800a556:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	2200      	movs	r2, #0
 800a55e:	2180      	movs	r1, #128	; 0x80
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 fb1d 	bl	800bba0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2240      	movs	r2, #64	; 0x40
 800a570:	621a      	str	r2, [r3, #32]

  return ret;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d006      	beq.n	800a5be <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	d106      	bne.n	800a5f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b03      	cmp	r3, #3
 800a616:	d110      	bne.n	800a63a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00b      	beq.n	800a63a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d005      	beq.n	800a63a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a650:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a652:	4618      	mov	r0, r3
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	460b      	mov	r3, r1
 800a668:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a66a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	885b      	ldrh	r3, [r3, #2]
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d920      	bls.n	800a6e2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6a8:	e013      	b.n	800a6d2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6aa:	f107 030a 	add.w	r3, r7, #10
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	f000 f81b 	bl	800a6ec <USBD_GetNextDesc>
 800a6b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b05      	cmp	r3, #5
 800a6be:	d108      	bne.n	800a6d2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	789b      	ldrb	r3, [r3, #2]
 800a6c8:	78fa      	ldrb	r2, [r7, #3]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d008      	beq.n	800a6e0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	885b      	ldrh	r3, [r3, #2]
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	897b      	ldrh	r3, [r7, #10]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d8e5      	bhi.n	800a6aa <USBD_GetEpDesc+0x32>
 800a6de:	e000      	b.n	800a6e2 <USBD_GetEpDesc+0x6a>
          break;
 800a6e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a6e2:	693b      	ldr	r3, [r7, #16]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	881a      	ldrh	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4413      	add	r3, r2
 800a706:	b29a      	uxth	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4413      	add	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a718:	68fb      	ldr	r3, [r7, #12]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a726:	b480      	push	{r7}
 800a728:	b087      	sub	sp, #28
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	3301      	adds	r3, #1
 800a73c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a744:	8a3b      	ldrh	r3, [r7, #16]
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	b21a      	sxth	r2, r3
 800a74a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a74e:	4313      	orrs	r3, r2
 800a750:	b21b      	sxth	r3, r3
 800a752:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a754:	89fb      	ldrh	r3, [r7, #14]
}
 800a756:	4618      	mov	r0, r3
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a77a:	2b40      	cmp	r3, #64	; 0x40
 800a77c:	d005      	beq.n	800a78a <USBD_StdDevReq+0x26>
 800a77e:	2b40      	cmp	r3, #64	; 0x40
 800a780:	d857      	bhi.n	800a832 <USBD_StdDevReq+0xce>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00f      	beq.n	800a7a6 <USBD_StdDevReq+0x42>
 800a786:	2b20      	cmp	r3, #32
 800a788:	d153      	bne.n	800a832 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	32ae      	adds	r2, #174	; 0xae
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a4:	e04a      	b.n	800a83c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d83b      	bhi.n	800a826 <USBD_StdDevReq+0xc2>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <USBD_StdDevReq+0x50>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a809 	.word	0x0800a809
 800a7b8:	0800a81d 	.word	0x0800a81d
 800a7bc:	0800a827 	.word	0x0800a827
 800a7c0:	0800a813 	.word	0x0800a813
 800a7c4:	0800a827 	.word	0x0800a827
 800a7c8:	0800a7e7 	.word	0x0800a7e7
 800a7cc:	0800a7dd 	.word	0x0800a7dd
 800a7d0:	0800a827 	.word	0x0800a827
 800a7d4:	0800a7ff 	.word	0x0800a7ff
 800a7d8:	0800a7f1 	.word	0x0800a7f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fa3c 	bl	800ac5c <USBD_GetDescriptor>
          break;
 800a7e4:	e024      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fbcb 	bl	800af84 <USBD_SetAddress>
          break;
 800a7ee:	e01f      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc0a 	bl	800b00c <USBD_SetConfig>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
          break;
 800a7fc:	e018      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fcad 	bl	800b160 <USBD_GetConfig>
          break;
 800a806:	e013      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fcde 	bl	800b1cc <USBD_GetStatus>
          break;
 800a810:	e00e      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fd0d 	bl	800b234 <USBD_SetFeature>
          break;
 800a81a:	e009      	b.n	800a830 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fd31 	bl	800b286 <USBD_ClrFeature>
          break;
 800a824:	e004      	b.n	800a830 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fd88 	bl	800b33e <USBD_CtlError>
          break;
 800a82e:	bf00      	nop
      }
      break;
 800a830:	e004      	b.n	800a83c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fd82 	bl	800b33e <USBD_CtlError>
      break;
 800a83a:	bf00      	nop
  }

  return ret;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop

0800a848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a85e:	2b40      	cmp	r3, #64	; 0x40
 800a860:	d005      	beq.n	800a86e <USBD_StdItfReq+0x26>
 800a862:	2b40      	cmp	r3, #64	; 0x40
 800a864:	d852      	bhi.n	800a90c <USBD_StdItfReq+0xc4>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <USBD_StdItfReq+0x26>
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	d14e      	bne.n	800a90c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a874:	b2db      	uxtb	r3, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d840      	bhi.n	800a8fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	889b      	ldrh	r3, [r3, #4]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b01      	cmp	r3, #1
 800a884:	d836      	bhi.n	800a8f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	889b      	ldrh	r3, [r3, #4]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff fed8 	bl	800a644 <USBD_CoreFindIF>
 800a894:	4603      	mov	r3, r0
 800a896:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2bff      	cmp	r3, #255	; 0xff
 800a89c:	d01d      	beq.n	800a8da <USBD_StdItfReq+0x92>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11a      	bne.n	800a8da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8a4:	7bba      	ldrb	r2, [r7, #14]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32ae      	adds	r2, #174	; 0xae
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00f      	beq.n	800a8d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a8b4:	7bba      	ldrb	r2, [r7, #14]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8bc:	7bba      	ldrb	r2, [r7, #14]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	32ae      	adds	r2, #174	; 0xae
 800a8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8d2:	e004      	b.n	800a8de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8d8:	e001      	b.n	800a8de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	88db      	ldrh	r3, [r3, #6]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d110      	bne.n	800a908 <USBD_StdItfReq+0xc0>
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10d      	bne.n	800a908 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fdd4 	bl	800b49a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8f2:	e009      	b.n	800a908 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fd21 	bl	800b33e <USBD_CtlError>
          break;
 800a8fc:	e004      	b.n	800a908 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fd1c 	bl	800b33e <USBD_CtlError>
          break;
 800a906:	e000      	b.n	800a90a <USBD_StdItfReq+0xc2>
          break;
 800a908:	bf00      	nop
      }
      break;
 800a90a:	e004      	b.n	800a916 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fd15 	bl	800b33e <USBD_CtlError>
      break;
 800a914:	bf00      	nop
  }

  return ret;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	889b      	ldrh	r3, [r3, #4]
 800a932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d007      	beq.n	800a950 <USBD_StdEPReq+0x30>
 800a940:	2b40      	cmp	r3, #64	; 0x40
 800a942:	f200 817f 	bhi.w	800ac44 <USBD_StdEPReq+0x324>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d02a      	beq.n	800a9a0 <USBD_StdEPReq+0x80>
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	f040 817a 	bne.w	800ac44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff fe82 	bl	800a65e <USBD_CoreFindEP>
 800a95a:	4603      	mov	r3, r0
 800a95c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a95e:	7b7b      	ldrb	r3, [r7, #13]
 800a960:	2bff      	cmp	r3, #255	; 0xff
 800a962:	f000 8174 	beq.w	800ac4e <USBD_StdEPReq+0x32e>
 800a966:	7b7b      	ldrb	r3, [r7, #13]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f040 8170 	bne.w	800ac4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a96e:	7b7a      	ldrb	r2, [r7, #13]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a976:	7b7a      	ldrb	r2, [r7, #13]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	32ae      	adds	r2, #174	; 0xae
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 8163 	beq.w	800ac4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a988:	7b7a      	ldrb	r2, [r7, #13]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32ae      	adds	r2, #174	; 0xae
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	4798      	blx	r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a99e:	e156      	b.n	800ac4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	785b      	ldrb	r3, [r3, #1]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d008      	beq.n	800a9ba <USBD_StdEPReq+0x9a>
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	f300 8145 	bgt.w	800ac38 <USBD_StdEPReq+0x318>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 809b 	beq.w	800aaea <USBD_StdEPReq+0x1ca>
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d03c      	beq.n	800aa32 <USBD_StdEPReq+0x112>
 800a9b8:	e13e      	b.n	800ac38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d002      	beq.n	800a9cc <USBD_StdEPReq+0xac>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d016      	beq.n	800a9f8 <USBD_StdEPReq+0xd8>
 800a9ca:	e02c      	b.n	800aa26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00d      	beq.n	800a9ee <USBD_StdEPReq+0xce>
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b80      	cmp	r3, #128	; 0x80
 800a9d6:	d00a      	beq.n	800a9ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f989 	bl	800bcf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9e2:	2180      	movs	r1, #128	; 0x80
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 f985 	bl	800bcf4 <USBD_LL_StallEP>
 800a9ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9ec:	e020      	b.n	800aa30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fca4 	bl	800b33e <USBD_CtlError>
              break;
 800a9f6:	e01b      	b.n	800aa30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	885b      	ldrh	r3, [r3, #2]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10e      	bne.n	800aa1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <USBD_StdEPReq+0xfe>
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b80      	cmp	r3, #128	; 0x80
 800aa0a:	d008      	beq.n	800aa1e <USBD_StdEPReq+0xfe>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	88db      	ldrh	r3, [r3, #6]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d104      	bne.n	800aa1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f96b 	bl	800bcf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fd3b 	bl	800b49a <USBD_CtlSendStatus>

              break;
 800aa24:	e004      	b.n	800aa30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fc88 	bl	800b33e <USBD_CtlError>
              break;
 800aa2e:	bf00      	nop
          }
          break;
 800aa30:	e107      	b.n	800ac42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d002      	beq.n	800aa44 <USBD_StdEPReq+0x124>
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d016      	beq.n	800aa70 <USBD_StdEPReq+0x150>
 800aa42:	e04b      	b.n	800aadc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00d      	beq.n	800aa66 <USBD_StdEPReq+0x146>
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b80      	cmp	r3, #128	; 0x80
 800aa4e:	d00a      	beq.n	800aa66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f001 f94d 	bl	800bcf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa5a:	2180      	movs	r1, #128	; 0x80
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 f949 	bl	800bcf4 <USBD_LL_StallEP>
 800aa62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa64:	e040      	b.n	800aae8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fc68 	bl	800b33e <USBD_CtlError>
              break;
 800aa6e:	e03b      	b.n	800aae8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d136      	bne.n	800aae6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 f96a 	bl	800bd60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fd04 	bl	800b49a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff fde1 	bl	800a65e <USBD_CoreFindEP>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaa0:	7b7b      	ldrb	r3, [r7, #13]
 800aaa2:	2bff      	cmp	r3, #255	; 0xff
 800aaa4:	d01f      	beq.n	800aae6 <USBD_StdEPReq+0x1c6>
 800aaa6:	7b7b      	ldrb	r3, [r7, #13]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d11c      	bne.n	800aae6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aaac:	7b7a      	ldrb	r2, [r7, #13]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aab4:	7b7a      	ldrb	r2, [r7, #13]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	32ae      	adds	r2, #174	; 0xae
 800aaba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d010      	beq.n	800aae6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aac4:	7b7a      	ldrb	r2, [r7, #13]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	32ae      	adds	r2, #174	; 0xae
 800aaca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	4798      	blx	r3
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aada:	e004      	b.n	800aae6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fc2d 	bl	800b33e <USBD_CtlError>
              break;
 800aae4:	e000      	b.n	800aae8 <USBD_StdEPReq+0x1c8>
              break;
 800aae6:	bf00      	nop
          }
          break;
 800aae8:	e0ab      	b.n	800ac42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d002      	beq.n	800aafc <USBD_StdEPReq+0x1dc>
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d032      	beq.n	800ab60 <USBD_StdEPReq+0x240>
 800aafa:	e097      	b.n	800ac2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <USBD_StdEPReq+0x1f2>
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d004      	beq.n	800ab12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fc17 	bl	800b33e <USBD_CtlError>
                break;
 800ab10:	e091      	b.n	800ac36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da0b      	bge.n	800ab32 <USBD_StdEPReq+0x212>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	3310      	adds	r3, #16
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3304      	adds	r3, #4
 800ab30:	e00b      	b.n	800ab4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	4413      	add	r3, r2
 800ab48:	3304      	adds	r3, #4
 800ab4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2202      	movs	r2, #2
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fc61 	bl	800b420 <USBD_CtlSendData>
              break;
 800ab5e:	e06a      	b.n	800ac36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da11      	bge.n	800ab8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	f003 020f 	and.w	r2, r3, #15
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	3324      	adds	r3, #36	; 0x24
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d117      	bne.n	800abb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fbda 	bl	800b33e <USBD_CtlError>
                  break;
 800ab8a:	e054      	b.n	800ac36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	f003 020f 	and.w	r2, r3, #15
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	440b      	add	r3, r1
 800ab9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d104      	bne.n	800abb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fbc7 	bl	800b33e <USBD_CtlError>
                  break;
 800abb0:	e041      	b.n	800ac36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	da0b      	bge.n	800abd2 <USBD_StdEPReq+0x2b2>
 800abba:	7bbb      	ldrb	r3, [r7, #14]
 800abbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	3310      	adds	r3, #16
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	3304      	adds	r3, #4
 800abd0:	e00b      	b.n	800abea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4413      	add	r3, r2
 800abe8:	3304      	adds	r3, #4
 800abea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <USBD_StdEPReq+0x2d8>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d103      	bne.n	800ac00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2200      	movs	r2, #0
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e00e      	b.n	800ac1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f001 f8e1 	bl	800bdcc <USBD_LL_IsStallEP>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2201      	movs	r2, #1
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	e002      	b.n	800ac1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2202      	movs	r2, #2
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fbfb 	bl	800b420 <USBD_CtlSendData>
              break;
 800ac2a:	e004      	b.n	800ac36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fb85 	bl	800b33e <USBD_CtlError>
              break;
 800ac34:	bf00      	nop
          }
          break;
 800ac36:	e004      	b.n	800ac42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fb7f 	bl	800b33e <USBD_CtlError>
          break;
 800ac40:	bf00      	nop
      }
      break;
 800ac42:	e005      	b.n	800ac50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb79 	bl	800b33e <USBD_CtlError>
      break;
 800ac4c:	e000      	b.n	800ac50 <USBD_StdEPReq+0x330>
      break;
 800ac4e:	bf00      	nop
  }

  return ret;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	885b      	ldrh	r3, [r3, #2]
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	2b0e      	cmp	r3, #14
 800ac7e:	f200 8152 	bhi.w	800af26 <USBD_GetDescriptor+0x2ca>
 800ac82:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <USBD_GetDescriptor+0x2c>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800acf9 	.word	0x0800acf9
 800ac8c:	0800ad11 	.word	0x0800ad11
 800ac90:	0800ad51 	.word	0x0800ad51
 800ac94:	0800af27 	.word	0x0800af27
 800ac98:	0800af27 	.word	0x0800af27
 800ac9c:	0800aec7 	.word	0x0800aec7
 800aca0:	0800aef3 	.word	0x0800aef3
 800aca4:	0800af27 	.word	0x0800af27
 800aca8:	0800af27 	.word	0x0800af27
 800acac:	0800af27 	.word	0x0800af27
 800acb0:	0800af27 	.word	0x0800af27
 800acb4:	0800af27 	.word	0x0800af27
 800acb8:	0800af27 	.word	0x0800af27
 800acbc:	0800af27 	.word	0x0800af27
 800acc0:	0800acc5 	.word	0x0800acc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	7c12      	ldrb	r2, [r2, #16]
 800acdc:	f107 0108 	add.w	r1, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ace6:	e126      	b.n	800af36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fb27 	bl	800b33e <USBD_CtlError>
        err++;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	3301      	adds	r3, #1
 800acf4:	72fb      	strb	r3, [r7, #11]
      break;
 800acf6:	e11e      	b.n	800af36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	7c12      	ldrb	r2, [r2, #16]
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
      break;
 800ad0e:	e112      	b.n	800af36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	7c1b      	ldrb	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10d      	bne.n	800ad34 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad20:	f107 0208 	add.w	r2, r7, #8
 800ad24:	4610      	mov	r0, r2
 800ad26:	4798      	blx	r3
 800ad28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	2202      	movs	r2, #2
 800ad30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad32:	e100      	b.n	800af36 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	f107 0208 	add.w	r2, r7, #8
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
 800ad44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	701a      	strb	r2, [r3, #0]
      break;
 800ad4e:	e0f2      	b.n	800af36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b05      	cmp	r3, #5
 800ad58:	f200 80ac 	bhi.w	800aeb4 <USBD_GetDescriptor+0x258>
 800ad5c:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <USBD_GetDescriptor+0x108>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800ad7d 	.word	0x0800ad7d
 800ad68:	0800adb1 	.word	0x0800adb1
 800ad6c:	0800ade5 	.word	0x0800ade5
 800ad70:	0800ae19 	.word	0x0800ae19
 800ad74:	0800ae4d 	.word	0x0800ae4d
 800ad78:	0800ae81 	.word	0x0800ae81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00b      	beq.n	800ada0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	7c12      	ldrb	r2, [r2, #16]
 800ad94:	f107 0108 	add.w	r1, r7, #8
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9e:	e091      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 facb 	bl	800b33e <USBD_CtlError>
            err++;
 800ada8:	7afb      	ldrb	r3, [r7, #11]
 800adaa:	3301      	adds	r3, #1
 800adac:	72fb      	strb	r3, [r7, #11]
          break;
 800adae:	e089      	b.n	800aec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	7c12      	ldrb	r2, [r2, #16]
 800adc8:	f107 0108 	add.w	r1, r7, #8
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
 800add0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800add2:	e077      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fab1 	bl	800b33e <USBD_CtlError>
            err++;
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	3301      	adds	r3, #1
 800ade0:	72fb      	strb	r3, [r7, #11]
          break;
 800ade2:	e06f      	b.n	800aec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	7c12      	ldrb	r2, [r2, #16]
 800adfc:	f107 0108 	add.w	r1, r7, #8
 800ae00:	4610      	mov	r0, r2
 800ae02:	4798      	blx	r3
 800ae04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae06:	e05d      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fa97 	bl	800b33e <USBD_CtlError>
            err++;
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	3301      	adds	r3, #1
 800ae14:	72fb      	strb	r3, [r7, #11]
          break;
 800ae16:	e055      	b.n	800aec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	7c12      	ldrb	r2, [r2, #16]
 800ae30:	f107 0108 	add.w	r1, r7, #8
 800ae34:	4610      	mov	r0, r2
 800ae36:	4798      	blx	r3
 800ae38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae3a:	e043      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fa7d 	bl	800b33e <USBD_CtlError>
            err++;
 800ae44:	7afb      	ldrb	r3, [r7, #11]
 800ae46:	3301      	adds	r3, #1
 800ae48:	72fb      	strb	r3, [r7, #11]
          break;
 800ae4a:	e03b      	b.n	800aec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	7c12      	ldrb	r2, [r2, #16]
 800ae64:	f107 0108 	add.w	r1, r7, #8
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4798      	blx	r3
 800ae6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6e:	e029      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fa63 	bl	800b33e <USBD_CtlError>
            err++;
 800ae78:	7afb      	ldrb	r3, [r7, #11]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7e:	e021      	b.n	800aec4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	7c12      	ldrb	r2, [r2, #16]
 800ae98:	f107 0108 	add.w	r1, r7, #8
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3
 800aea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aea2:	e00f      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa49 	bl	800b33e <USBD_CtlError>
            err++;
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	72fb      	strb	r3, [r7, #11]
          break;
 800aeb2:	e007      	b.n	800aec4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa41 	bl	800b33e <USBD_CtlError>
          err++;
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	3301      	adds	r3, #1
 800aec0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aec2:	bf00      	nop
      }
      break;
 800aec4:	e037      	b.n	800af36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	7c1b      	ldrb	r3, [r3, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d109      	bne.n	800aee2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed6:	f107 0208 	add.w	r2, r7, #8
 800aeda:	4610      	mov	r0, r2
 800aedc:	4798      	blx	r3
 800aede:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aee0:	e029      	b.n	800af36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fa2a 	bl	800b33e <USBD_CtlError>
        err++;
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	3301      	adds	r3, #1
 800aeee:	72fb      	strb	r3, [r7, #11]
      break;
 800aef0:	e021      	b.n	800af36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7c1b      	ldrb	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10d      	bne.n	800af16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	4610      	mov	r0, r2
 800af08:	4798      	blx	r3
 800af0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3301      	adds	r3, #1
 800af10:	2207      	movs	r2, #7
 800af12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af14:	e00f      	b.n	800af36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fa10 	bl	800b33e <USBD_CtlError>
        err++;
 800af1e:	7afb      	ldrb	r3, [r7, #11]
 800af20:	3301      	adds	r3, #1
 800af22:	72fb      	strb	r3, [r7, #11]
      break;
 800af24:	e007      	b.n	800af36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fa08 	bl	800b33e <USBD_CtlError>
      err++;
 800af2e:	7afb      	ldrb	r3, [r7, #11]
 800af30:	3301      	adds	r3, #1
 800af32:	72fb      	strb	r3, [r7, #11]
      break;
 800af34:	bf00      	nop
  }

  if (err != 0U)
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d11e      	bne.n	800af7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	88db      	ldrh	r3, [r3, #6]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d016      	beq.n	800af72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800af44:	893b      	ldrh	r3, [r7, #8]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00e      	beq.n	800af68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	88da      	ldrh	r2, [r3, #6]
 800af4e:	893b      	ldrh	r3, [r7, #8]
 800af50:	4293      	cmp	r3, r2
 800af52:	bf28      	it	cs
 800af54:	4613      	movcs	r3, r2
 800af56:	b29b      	uxth	r3, r3
 800af58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af5a:	893b      	ldrh	r3, [r7, #8]
 800af5c:	461a      	mov	r2, r3
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fa5d 	bl	800b420 <USBD_CtlSendData>
 800af66:	e009      	b.n	800af7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f9e7 	bl	800b33e <USBD_CtlError>
 800af70:	e004      	b.n	800af7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa91 	bl	800b49a <USBD_CtlSendStatus>
 800af78:	e000      	b.n	800af7c <USBD_GetDescriptor+0x320>
    return;
 800af7a:	bf00      	nop
  }
}
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop

0800af84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	889b      	ldrh	r3, [r3, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d131      	bne.n	800affa <USBD_SetAddress+0x76>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	88db      	ldrh	r3, [r3, #6]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d12d      	bne.n	800affa <USBD_SetAddress+0x76>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	885b      	ldrh	r3, [r3, #2]
 800afa2:	2b7f      	cmp	r3, #127	; 0x7f
 800afa4:	d829      	bhi.n	800affa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d104      	bne.n	800afc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9bc 	bl	800b33e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc6:	e01d      	b.n	800b004 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7bfa      	ldrb	r2, [r7, #15]
 800afcc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 ff27 	bl	800be28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fa5d 	bl	800b49a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d004      	beq.n	800aff0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2202      	movs	r2, #2
 800afea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afee:	e009      	b.n	800b004 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff8:	e004      	b.n	800b004 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f99e 	bl	800b33e <USBD_CtlError>
  }
}
 800b002:	bf00      	nop
 800b004:	bf00      	nop
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	885b      	ldrh	r3, [r3, #2]
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	4b4e      	ldr	r3, [pc, #312]	; (800b15c <USBD_SetConfig+0x150>)
 800b022:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b024:	4b4d      	ldr	r3, [pc, #308]	; (800b15c <USBD_SetConfig+0x150>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d905      	bls.n	800b038 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f985 	bl	800b33e <USBD_CtlError>
    return USBD_FAIL;
 800b034:	2303      	movs	r3, #3
 800b036:	e08c      	b.n	800b152 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d002      	beq.n	800b04a <USBD_SetConfig+0x3e>
 800b044:	2b03      	cmp	r3, #3
 800b046:	d029      	beq.n	800b09c <USBD_SetConfig+0x90>
 800b048:	e075      	b.n	800b136 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b04a:	4b44      	ldr	r3, [pc, #272]	; (800b15c <USBD_SetConfig+0x150>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d020      	beq.n	800b094 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b052:	4b42      	ldr	r3, [pc, #264]	; (800b15c <USBD_SetConfig+0x150>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b05c:	4b3f      	ldr	r3, [pc, #252]	; (800b15c <USBD_SetConfig+0x150>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff f848 	bl	800a0f8 <USBD_SetClassConfig>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d008      	beq.n	800b084 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f962 	bl	800b33e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2202      	movs	r2, #2
 800b07e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b082:	e065      	b.n	800b150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fa08 	bl	800b49a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2203      	movs	r2, #3
 800b08e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b092:	e05d      	b.n	800b150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fa00 	bl	800b49a <USBD_CtlSendStatus>
      break;
 800b09a:	e059      	b.n	800b150 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b09c:	4b2f      	ldr	r3, [pc, #188]	; (800b15c <USBD_SetConfig+0x150>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d112      	bne.n	800b0ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0ac:	4b2b      	ldr	r3, [pc, #172]	; (800b15c <USBD_SetConfig+0x150>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0b6:	4b29      	ldr	r3, [pc, #164]	; (800b15c <USBD_SetConfig+0x150>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff f837 	bl	800a130 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f9e9 	bl	800b49a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0c8:	e042      	b.n	800b150 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <USBD_SetConfig+0x150>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d02a      	beq.n	800b12e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff f825 	bl	800a130 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0e6:	4b1d      	ldr	r3, [pc, #116]	; (800b15c <USBD_SetConfig+0x150>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f0:	4b1a      	ldr	r3, [pc, #104]	; (800b15c <USBD_SetConfig+0x150>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7fe fffe 	bl	800a0f8 <USBD_SetClassConfig>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b100:	7bfb      	ldrb	r3, [r7, #15]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00f      	beq.n	800b126 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f918 	bl	800b33e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff f80a 	bl	800a130 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2202      	movs	r2, #2
 800b120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b124:	e014      	b.n	800b150 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f9b7 	bl	800b49a <USBD_CtlSendStatus>
      break;
 800b12c:	e010      	b.n	800b150 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9b3 	bl	800b49a <USBD_CtlSendStatus>
      break;
 800b134:	e00c      	b.n	800b150 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f900 	bl	800b33e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <USBD_SetConfig+0x150>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7fe fff3 	bl	800a130 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b14a:	2303      	movs	r3, #3
 800b14c:	73fb      	strb	r3, [r7, #15]
      break;
 800b14e:	bf00      	nop
  }

  return ret;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200002a4 	.word	0x200002a4

0800b160 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	88db      	ldrh	r3, [r3, #6]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d004      	beq.n	800b17c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f8e2 	bl	800b33e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b17a:	e023      	b.n	800b1c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b02      	cmp	r3, #2
 800b186:	dc02      	bgt.n	800b18e <USBD_GetConfig+0x2e>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc03      	bgt.n	800b194 <USBD_GetConfig+0x34>
 800b18c:	e015      	b.n	800b1ba <USBD_GetConfig+0x5a>
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d00b      	beq.n	800b1aa <USBD_GetConfig+0x4a>
 800b192:	e012      	b.n	800b1ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3308      	adds	r3, #8
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f93c 	bl	800b420 <USBD_CtlSendData>
        break;
 800b1a8:	e00c      	b.n	800b1c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f934 	bl	800b420 <USBD_CtlSendData>
        break;
 800b1b8:	e004      	b.n	800b1c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f8be 	bl	800b33e <USBD_CtlError>
        break;
 800b1c2:	bf00      	nop
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d81e      	bhi.n	800b222 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	88db      	ldrh	r3, [r3, #6]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d004      	beq.n	800b1f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f8a5 	bl	800b33e <USBD_CtlError>
        break;
 800b1f4:	e01a      	b.n	800b22c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f043 0202 	orr.w	r2, r3, #2
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	330c      	adds	r3, #12
 800b216:	2202      	movs	r2, #2
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f900 	bl	800b420 <USBD_CtlSendData>
      break;
 800b220:	e004      	b.n	800b22c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f88a 	bl	800b33e <USBD_CtlError>
      break;
 800b22a:	bf00      	nop
  }
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	885b      	ldrh	r3, [r3, #2]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d107      	bne.n	800b256 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f923 	bl	800b49a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b254:	e013      	b.n	800b27e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	885b      	ldrh	r3, [r3, #2]
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d10b      	bne.n	800b276 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	889b      	ldrh	r3, [r3, #4]
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f913 	bl	800b49a <USBD_CtlSendStatus>
}
 800b274:	e003      	b.n	800b27e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f860 	bl	800b33e <USBD_CtlError>
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b296:	b2db      	uxtb	r3, r3
 800b298:	3b01      	subs	r3, #1
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d80b      	bhi.n	800b2b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	885b      	ldrh	r3, [r3, #2]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d10c      	bne.n	800b2c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8f3 	bl	800b49a <USBD_CtlSendStatus>
      }
      break;
 800b2b4:	e004      	b.n	800b2c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f840 	bl	800b33e <USBD_CtlError>
      break;
 800b2be:	e000      	b.n	800b2c2 <USBD_ClrFeature+0x3c>
      break;
 800b2c0:	bf00      	nop
  }
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	781a      	ldrb	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	781a      	ldrb	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff fa16 	bl	800a726 <SWAPBYTE>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3301      	adds	r3, #1
 800b306:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f7ff fa09 	bl	800a726 <SWAPBYTE>
 800b314:	4603      	mov	r3, r0
 800b316:	461a      	mov	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3301      	adds	r3, #1
 800b320:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3301      	adds	r3, #1
 800b326:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7ff f9fc 	bl	800a726 <SWAPBYTE>
 800b32e:	4603      	mov	r3, r0
 800b330:	461a      	mov	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	80da      	strh	r2, [r3, #6]
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b082      	sub	sp, #8
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b348:	2180      	movs	r1, #128	; 0x80
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fcd2 	bl	800bcf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b350:	2100      	movs	r1, #0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fcce 	bl	800bcf4 <USBD_LL_StallEP>
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d036      	beq.n	800b3e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b37a:	6938      	ldr	r0, [r7, #16]
 800b37c:	f000 f836 	bl	800b3ec <USBD_GetLen>
 800b380:	4603      	mov	r3, r0
 800b382:	3301      	adds	r3, #1
 800b384:	b29b      	uxth	r3, r3
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	b29a      	uxth	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	4413      	add	r3, r2
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7812      	ldrb	r2, [r2, #0]
 800b398:	701a      	strb	r2, [r3, #0]
  idx++;
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	3301      	adds	r3, #1
 800b39e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	2203      	movs	r2, #3
 800b3a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3b0:	e013      	b.n	800b3da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]
    idx++;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e7      	bne.n	800b3b2 <USBD_GetString+0x52>
 800b3e2:	e000      	b.n	800b3e6 <USBD_GetString+0x86>
    return;
 800b3e4:	bf00      	nop
  }
}
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3fc:	e005      	b.n	800b40a <USBD_GetLen+0x1e>
  {
    len++;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	3301      	adds	r3, #1
 800b402:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	3301      	adds	r3, #1
 800b408:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1f5      	bne.n	800b3fe <USBD_GetLen+0x12>
  }

  return len;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2202      	movs	r2, #2
 800b430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	2100      	movs	r1, #0
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fd24 	bl	800be94 <USBD_LL_Transmit>

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	60f8      	str	r0, [r7, #12]
 800b45e:	60b9      	str	r1, [r7, #8]
 800b460:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	2100      	movs	r1, #0
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fd13 	bl	800be94 <USBD_LL_Transmit>

  return USBD_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fd3a 	bl	800bf04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fcef 	bl	800be94 <USBD_LL_Transmit>

  return USBD_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fd14 	bl	800bf04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4912      	ldr	r1, [pc, #72]	; (800b538 <MX_USB_DEVICE_Init+0x50>)
 800b4f0:	4812      	ldr	r0, [pc, #72]	; (800b53c <MX_USB_DEVICE_Init+0x54>)
 800b4f2:	f7fe fd84 	bl	8009ffe <USBD_Init>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4fc:	f7f5 f902 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800b500:	490f      	ldr	r1, [pc, #60]	; (800b540 <MX_USB_DEVICE_Init+0x58>)
 800b502:	480e      	ldr	r0, [pc, #56]	; (800b53c <MX_USB_DEVICE_Init+0x54>)
 800b504:	f7fe fdab 	bl	800a05e <USBD_RegisterClass>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b50e:	f7f5 f8f9 	bl	8000704 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800b512:	490c      	ldr	r1, [pc, #48]	; (800b544 <MX_USB_DEVICE_Init+0x5c>)
 800b514:	4809      	ldr	r0, [pc, #36]	; (800b53c <MX_USB_DEVICE_Init+0x54>)
 800b516:	f7fc ff73 	bl	8008400 <USBD_MSC_RegisterStorage>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b520:	f7f5 f8f0 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <MX_USB_DEVICE_Init+0x54>)
 800b526:	f7fe fdd0 	bl	800a0ca <USBD_Start>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b530:	f7f5 f8e8 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b534:	bf00      	nop
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200000b8 	.word	0x200000b8
 800b53c:	200002a8 	.word	0x200002a8
 800b540:	20000010 	.word	0x20000010
 800b544:	20000118 	.word	0x20000118

0800b548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2212      	movs	r2, #18
 800b558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b55a:	4b03      	ldr	r3, [pc, #12]	; (800b568 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	200000d8 	.word	0x200000d8

0800b56c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	4603      	mov	r3, r0
 800b574:	6039      	str	r1, [r7, #0]
 800b576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2204      	movs	r2, #4
 800b57c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b57e:	4b03      	ldr	r3, [pc, #12]	; (800b58c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	200000f8 	.word	0x200000f8

0800b590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d105      	bne.n	800b5ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	4907      	ldr	r1, [pc, #28]	; (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5a6:	4808      	ldr	r0, [pc, #32]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5a8:	f7ff feda 	bl	800b360 <USBD_GetString>
 800b5ac:	e004      	b.n	800b5b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	4904      	ldr	r1, [pc, #16]	; (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5b2:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5b4:	f7ff fed4 	bl	800b360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000584 	.word	0x20000584
 800b5c8:	0800cedc 	.word	0x0800cedc

0800b5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	4904      	ldr	r1, [pc, #16]	; (800b5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5dc:	4804      	ldr	r0, [pc, #16]	; (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5de:	f7ff febf 	bl	800b360 <USBD_GetString>
  return USBD_StrDesc;
 800b5e2:	4b02      	ldr	r3, [pc, #8]	; (800b5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20000584 	.word	0x20000584
 800b5f0:	0800cef0 	.word	0x0800cef0

0800b5f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6039      	str	r1, [r7, #0]
 800b5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	221a      	movs	r2, #26
 800b604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b606:	f000 f855 	bl	800b6b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b60a:	4b02      	ldr	r3, [pc, #8]	; (800b614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200000fc 	.word	0x200000fc

0800b618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d105      	bne.n	800b636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	4907      	ldr	r1, [pc, #28]	; (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b62e:	4808      	ldr	r0, [pc, #32]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b630:	f7ff fe96 	bl	800b360 <USBD_GetString>
 800b634:	e004      	b.n	800b640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	4904      	ldr	r1, [pc, #16]	; (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b63a:	4805      	ldr	r0, [pc, #20]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b63c:	f7ff fe90 	bl	800b360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b640:	4b02      	ldr	r3, [pc, #8]	; (800b64c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000584 	.word	0x20000584
 800b650:	0800cf04 	.word	0x0800cf04

0800b654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d105      	bne.n	800b672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	4907      	ldr	r1, [pc, #28]	; (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b66a:	4808      	ldr	r0, [pc, #32]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b66c:	f7ff fe78 	bl	800b360 <USBD_GetString>
 800b670:	e004      	b.n	800b67c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4904      	ldr	r1, [pc, #16]	; (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b676:	4805      	ldr	r0, [pc, #20]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b678:	f7ff fe72 	bl	800b360 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000584 	.word	0x20000584
 800b68c:	0800cf10 	.word	0x0800cf10

0800b690 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	220c      	movs	r2, #12
 800b6a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	200000ec 	.word	0x200000ec

0800b6b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6ba:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <Get_SerialNum+0x44>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6c0:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <Get_SerialNum+0x48>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6c6:	4b0e      	ldr	r3, [pc, #56]	; (800b700 <Get_SerialNum+0x4c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d009      	beq.n	800b6ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6da:	2208      	movs	r2, #8
 800b6dc:	4909      	ldr	r1, [pc, #36]	; (800b704 <Get_SerialNum+0x50>)
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 f814 	bl	800b70c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	4908      	ldr	r1, [pc, #32]	; (800b708 <Get_SerialNum+0x54>)
 800b6e8:	68b8      	ldr	r0, [r7, #8]
 800b6ea:	f000 f80f 	bl	800b70c <IntToUnicode>
  }
}
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	1fff7590 	.word	0x1fff7590
 800b6fc:	1fff7594 	.word	0x1fff7594
 800b700:	1fff7598 	.word	0x1fff7598
 800b704:	200000fe 	.word	0x200000fe
 800b708:	2000010e 	.word	0x2000010e

0800b70c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b71e:	2300      	movs	r3, #0
 800b720:	75fb      	strb	r3, [r7, #23]
 800b722:	e027      	b.n	800b774 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	0f1b      	lsrs	r3, r3, #28
 800b728:	2b09      	cmp	r3, #9
 800b72a:	d80b      	bhi.n	800b744 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	0f1b      	lsrs	r3, r3, #28
 800b730:	b2da      	uxtb	r2, r3
 800b732:	7dfb      	ldrb	r3, [r7, #23]
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	4619      	mov	r1, r3
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	440b      	add	r3, r1
 800b73c:	3230      	adds	r2, #48	; 0x30
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	e00a      	b.n	800b75a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	0f1b      	lsrs	r3, r3, #28
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4619      	mov	r1, r3
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	440b      	add	r3, r1
 800b754:	3237      	adds	r2, #55	; 0x37
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	3301      	adds	r3, #1
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4413      	add	r3, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	3301      	adds	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
 800b774:	7dfa      	ldrb	r2, [r7, #23]
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d3d3      	bcc.n	800b724 <IntToUnicode+0x18>
  }
}
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	4603      	mov	r3, r0
 800b792:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	W25QXX_Init();
 800b794:	f7f5 fa52 	bl	8000c3c <W25QXX_Init>
  return (USBD_OK);
 800b798:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
 800b7ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b7be:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800b7c0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	u16 flash_ID;
	flash_ID =W25QXX_ReadID();
 800b7da:	f7f5 fad3 	bl	8000d84 <W25QXX_ReadID>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	81fb      	strh	r3, [r7, #14]
	printf("flash_ID:%d \r\n",flash_ID);//非必须，如需要调试，包含stdio.h头文件，启用串口
 800b7e2:	89fb      	ldrh	r3, [r7, #14]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4804      	ldr	r0, [pc, #16]	; (800b7f8 <STORAGE_IsReady_FS+0x28>)
 800b7e8:	f000 fcee 	bl	800c1c8 <iprintf>
  return (USBD_OK);
 800b7ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800cf20 	.word	0x0800cf20

0800b7fc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b806:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
 800b81e:	461a      	mov	r2, r3
 800b820:	4603      	mov	r3, r0
 800b822:	73fb      	strb	r3, [r7, #15]
 800b824:	4613      	mov	r3, r2
 800b826:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	blk_addr += SPI_FLASH_START_SECTOR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b82e:	607b      	str	r3, [r7, #4]
	SPI_FLASH_BufferRead(buf, blk_addr * SPI_FLASH_SECTOR_SIZE, blk_len * SPI_FLASH_SECTOR_SIZE);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	0319      	lsls	r1, r3, #12
 800b834:	89bb      	ldrh	r3, [r7, #12]
 800b836:	031b      	lsls	r3, r3, #12
 800b838:	b29b      	uxth	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	68b8      	ldr	r0, [r7, #8]
 800b83e:	f7f5 fad7 	bl	8000df0 <SPI_FLASH_BufferRead>
//	memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * STORAGE_BLK_SIZ), blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800b842:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	607a      	str	r2, [r7, #4]
 800b856:	461a      	mov	r2, r3
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]
 800b85c:	4613      	mov	r3, r2
 800b85e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	uint32_t write_addr;
	blk_addr +=SPI_FLASH_START_SECTOR;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b866:	607b      	str	r3, [r7, #4]
	write_addr = blk_addr * SPI_FLASH_SECTOR_SIZE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	031b      	lsls	r3, r3, #12
 800b86c:	617b      	str	r3, [r7, #20]
	SPI_FLASH_SectorErase(write_addr);
 800b86e:	6978      	ldr	r0, [r7, #20]
 800b870:	f7f5 fb1c 	bl	8000eac <SPI_FLASH_SectorErase>
	SPI_FLASH_BufferWrite((uint8_t*)buf, write_addr, blk_len * SPI_FLASH_SECTOR_SIZE);
 800b874:	89bb      	ldrh	r3, [r7, #12]
 800b876:	031b      	lsls	r3, r3, #12
 800b878:	b29b      	uxth	r3, r3
 800b87a:	461a      	mov	r2, r3
 800b87c:	6979      	ldr	r1, [r7, #20]
 800b87e:	68b8      	ldr	r0, [r7, #8]
 800b880:	f7f5 fb86 	bl	8000f90 <SPI_FLASH_BufferWrite>
//	UNUSED(buf);
//	UNUSED(blk_addr);
//	UNUSED(blk_len);
//
//	memcpy((uint8_t*)(FLASH_START_ADDR + blk_addr * STORAGE_BLK_SIZ), buf,  blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800b884:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800b88e:	b480      	push	{r7}
 800b890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800b892:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b894:	4618      	mov	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
	...

0800b8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b098      	sub	sp, #96	; 0x60
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	2254      	movs	r2, #84	; 0x54
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fcde 	bl	800c272 <memset>
  if(pcdHandle->Instance==USB)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a1d      	ldr	r2, [pc, #116]	; (800b930 <HAL_PCD_MspInit+0x90>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d132      	bne.n	800b926 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b8c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b8d4:	2318      	movs	r3, #24
 800b8d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b8d8:	2307      	movs	r3, #7
 800b8da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b8e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8e8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f8 fb68 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800b8fa:	f7f4 ff03 	bl	8000704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <HAL_PCD_MspInit+0x94>)
 800b900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b902:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <HAL_PCD_MspInit+0x94>)
 800b904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b908:	6593      	str	r3, [r2, #88]	; 0x58
 800b90a:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <HAL_PCD_MspInit+0x94>)
 800b90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b912:	60bb      	str	r3, [r7, #8]
 800b914:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b916:	2200      	movs	r2, #0
 800b918:	2100      	movs	r1, #0
 800b91a:	2043      	movs	r0, #67	; 0x43
 800b91c:	f7f5 fd31 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b920:	2043      	movs	r0, #67	; 0x43
 800b922:	f7f5 fd4a 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b926:	bf00      	nop
 800b928:	3760      	adds	r7, #96	; 0x60
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	40006800 	.word	0x40006800
 800b934:	40021000 	.word	0x40021000

0800b938 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b94c:	4619      	mov	r1, r3
 800b94e:	4610      	mov	r0, r2
 800b950:	f7fe fc08 	bl	800a164 <USBD_LL_SetupStage>
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b96e:	78fa      	ldrb	r2, [r7, #3]
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	00db      	lsls	r3, r3, #3
 800b97a:	440b      	add	r3, r1
 800b97c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	78fb      	ldrb	r3, [r7, #3]
 800b984:	4619      	mov	r1, r3
 800b986:	f7fe fc42 	bl	800a20e <USBD_LL_DataOutStage>
}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	460b      	mov	r3, r1
 800b99c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b9a4:	78fa      	ldrb	r2, [r7, #3]
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	440b      	add	r3, r1
 800b9b2:	333c      	adds	r3, #60	; 0x3c
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	78fb      	ldrb	r3, [r7, #3]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	f7fe fcdb 	bl	800a374 <USBD_LL_DataInStage>
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fe15 	bl	800a604 <USBD_LL_SOF>
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d001      	beq.n	800b9fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9f6:	f7f4 fe85 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba00:	7bfa      	ldrb	r2, [r7, #15]
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe fdb9 	bl	800a57c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fd61 	bl	800a4d8 <USBD_LL_Reset>
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fdb4 	bl	800a59c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba3c:	4b04      	ldr	r3, [pc, #16]	; (800ba50 <HAL_PCD_SuspendCallback+0x30>)
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	4a03      	ldr	r2, [pc, #12]	; (800ba50 <HAL_PCD_SuspendCallback+0x30>)
 800ba42:	f043 0306 	orr.w	r3, r3, #6
 800ba46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	e000ed00 	.word	0xe000ed00

0800ba54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba64:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <HAL_PCD_ResumeCallback+0x34>)
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	4a07      	ldr	r2, [pc, #28]	; (800ba88 <HAL_PCD_ResumeCallback+0x34>)
 800ba6a:	f023 0306 	bic.w	r3, r3, #6
 800ba6e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba70:	f000 fae2 	bl	800c038 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fdaa 	bl	800a5d4 <USBD_LL_Resume>
}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	e000ed00 	.word	0xe000ed00

0800ba8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800ba94:	f7f7 fc4e 	bl	8003334 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ba98:	4a26      	ldr	r2, [pc, #152]	; (800bb34 <USBD_LL_Init+0xa8>)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a24      	ldr	r2, [pc, #144]	; (800bb34 <USBD_LL_Init+0xa8>)
 800baa4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800baa8:	4b22      	ldr	r3, [pc, #136]	; (800bb34 <USBD_LL_Init+0xa8>)
 800baaa:	4a23      	ldr	r2, [pc, #140]	; (800bb38 <USBD_LL_Init+0xac>)
 800baac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bab0:	2208      	movs	r2, #8
 800bab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bab6:	2202      	movs	r2, #2
 800bab8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baba:	4b1e      	ldr	r3, [pc, #120]	; (800bb34 <USBD_LL_Init+0xa8>)
 800babc:	2202      	movs	r2, #2
 800babe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bac0:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bac8:	2200      	movs	r2, #0
 800baca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bacc:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bace:	2200      	movs	r2, #0
 800bad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bad8:	4816      	ldr	r0, [pc, #88]	; (800bb34 <USBD_LL_Init+0xa8>)
 800bada:	f7f5 fe0b 	bl	80016f4 <HAL_PCD_Init>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bae4:	f7f4 fe0e 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800baee:	2318      	movs	r3, #24
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	f7f7 fb3c 	bl	8003170 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bafe:	2358      	movs	r3, #88	; 0x58
 800bb00:	2200      	movs	r2, #0
 800bb02:	2180      	movs	r1, #128	; 0x80
 800bb04:	f7f7 fb34 	bl	8003170 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb0e:	2398      	movs	r3, #152	; 0x98
 800bb10:	2200      	movs	r2, #0
 800bb12:	2181      	movs	r1, #129	; 0x81
 800bb14:	f7f7 fb2c 	bl	8003170 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb1e:	23d8      	movs	r3, #216	; 0xd8
 800bb20:	2200      	movs	r2, #0
 800bb22:	2101      	movs	r1, #1
 800bb24:	f7f7 fb24 	bl	8003170 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000784 	.word	0x20000784
 800bb38:	40006800 	.word	0x40006800

0800bb3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 fed4 	bl	8001900 <HAL_PCD_Start>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d816      	bhi.n	800bb90 <USBD_LL_Start+0x54>
 800bb62:	a201      	add	r2, pc, #4	; (adr r2, 800bb68 <USBD_LL_Start+0x2c>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bb79 	.word	0x0800bb79
 800bb6c:	0800bb7f 	.word	0x0800bb7f
 800bb70:	0800bb85 	.word	0x0800bb85
 800bb74:	0800bb8b 	.word	0x0800bb8b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7c:	e00b      	b.n	800bb96 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	73fb      	strb	r3, [r7, #15]
    break;
 800bb82:	e008      	b.n	800bb96 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb84:	2301      	movs	r3, #1
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	e005      	b.n	800bb96 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8e:	e002      	b.n	800bb96 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bb90:	2303      	movs	r3, #3
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	bf00      	nop
  }
  return usb_status;
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	70fb      	strb	r3, [r7, #3]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70bb      	strb	r3, [r7, #2]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbc8:	78bb      	ldrb	r3, [r7, #2]
 800bbca:	883a      	ldrh	r2, [r7, #0]
 800bbcc:	78f9      	ldrb	r1, [r7, #3]
 800bbce:	f7f6 f805 	bl	8001bdc <HAL_PCD_EP_Open>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d817      	bhi.n	800bc0c <USBD_LL_OpenEP+0x6c>
 800bbdc:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <USBD_LL_OpenEP+0x44>)
 800bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe2:	bf00      	nop
 800bbe4:	0800bbf5 	.word	0x0800bbf5
 800bbe8:	0800bbfb 	.word	0x0800bbfb
 800bbec:	0800bc01 	.word	0x0800bc01
 800bbf0:	0800bc07 	.word	0x0800bc07
    case HAL_OK :
      usb_status = USBD_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	e00b      	b.n	800bc12 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfe:	e008      	b.n	800bc12 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc00:	2301      	movs	r3, #1
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	e005      	b.n	800bc12 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc06:	2303      	movs	r3, #3
 800bc08:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0a:	e002      	b.n	800bc12 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc10:	bf00      	nop
  }
  return usb_status;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc36:	78fa      	ldrb	r2, [r7, #3]
 800bc38:	4611      	mov	r1, r2
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7f6 f82b 	bl	8001c96 <HAL_PCD_EP_Close>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d816      	bhi.n	800bc78 <USBD_LL_CloseEP+0x5c>
 800bc4a:	a201      	add	r2, pc, #4	; (adr r2, 800bc50 <USBD_LL_CloseEP+0x34>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc61 	.word	0x0800bc61
 800bc54:	0800bc67 	.word	0x0800bc67
 800bc58:	0800bc6d 	.word	0x0800bc6d
 800bc5c:	0800bc73 	.word	0x0800bc73
    case HAL_OK :
      usb_status = USBD_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	73fb      	strb	r3, [r7, #15]
    break;
 800bc64:	e00b      	b.n	800bc7e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6a:	e008      	b.n	800bc7e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc70:	e005      	b.n	800bc7e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc72:	2303      	movs	r3, #3
 800bc74:	73fb      	strb	r3, [r7, #15]
    break;
 800bc76:	e002      	b.n	800bc7e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7c:	bf00      	nop
  }
  return usb_status;
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bca2:	78fa      	ldrb	r2, [r7, #3]
 800bca4:	4611      	mov	r1, r2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7f6 f971 	bl	8001f8e <HAL_PCD_EP_Flush>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d816      	bhi.n	800bce4 <USBD_LL_FlushEP+0x5c>
 800bcb6:	a201      	add	r2, pc, #4	; (adr r2, 800bcbc <USBD_LL_FlushEP+0x34>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bccd 	.word	0x0800bccd
 800bcc0:	0800bcd3 	.word	0x0800bcd3
 800bcc4:	0800bcd9 	.word	0x0800bcd9
 800bcc8:	0800bcdf 	.word	0x0800bcdf
    case HAL_OK :
      usb_status = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd0:	e00b      	b.n	800bcea <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd6:	e008      	b.n	800bcea <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	73fb      	strb	r3, [r7, #15]
    break;
 800bcdc:	e005      	b.n	800bcea <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	73fb      	strb	r3, [r7, #15]
    break;
 800bce2:	e002      	b.n	800bcea <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bce4:	2303      	movs	r3, #3
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	bf00      	nop
  }
  return usb_status;
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f6 f887 	bl	8001e26 <HAL_PCD_EP_SetStall>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d816      	bhi.n	800bd50 <USBD_LL_StallEP+0x5c>
 800bd22:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <USBD_LL_StallEP+0x34>)
 800bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd28:	0800bd39 	.word	0x0800bd39
 800bd2c:	0800bd3f 	.word	0x0800bd3f
 800bd30:	0800bd45 	.word	0x0800bd45
 800bd34:	0800bd4b 	.word	0x0800bd4b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	e00b      	b.n	800bd56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	73fb      	strb	r3, [r7, #15]
    break;
 800bd42:	e008      	b.n	800bd56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
    break;
 800bd48:	e005      	b.n	800bd56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4e:	e002      	b.n	800bd56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd50:	2303      	movs	r3, #3
 800bd52:	73fb      	strb	r3, [r7, #15]
    break;
 800bd54:	bf00      	nop
  }
  return usb_status;
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f6 f8b1 	bl	8001ee6 <HAL_PCD_EP_ClrStall>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d816      	bhi.n	800bdbc <USBD_LL_ClearStallEP+0x5c>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <USBD_LL_ClearStallEP+0x34>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bda5 	.word	0x0800bda5
 800bd98:	0800bdab 	.word	0x0800bdab
 800bd9c:	0800bdb1 	.word	0x0800bdb1
 800bda0:	0800bdb7 	.word	0x0800bdb7
    case HAL_OK :
      usb_status = USBD_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	e00b      	b.n	800bdc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	73fb      	strb	r3, [r7, #15]
    break;
 800bdae:	e008      	b.n	800bdc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb4:	e005      	b.n	800bdc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdba:	e002      	b.n	800bdc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	bf00      	nop
  }
  return usb_status;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bde0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	da0c      	bge.n	800be02 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdee:	68f9      	ldr	r1, [r7, #12]
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	e00b      	b.n	800be1a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be08:	68f9      	ldr	r1, [r7, #12]
 800be0a:	4613      	mov	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	440b      	add	r3, r1
 800be14:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be18:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
	...

0800be28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be42:	78fa      	ldrb	r2, [r7, #3]
 800be44:	4611      	mov	r1, r2
 800be46:	4618      	mov	r0, r3
 800be48:	f7f5 fea3 	bl	8001b92 <HAL_PCD_SetAddress>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	2b03      	cmp	r3, #3
 800be54:	d816      	bhi.n	800be84 <USBD_LL_SetUSBAddress+0x5c>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <USBD_LL_SetUSBAddress+0x34>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be6d 	.word	0x0800be6d
 800be60:	0800be73 	.word	0x0800be73
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800be7f 	.word	0x0800be7f
    case HAL_OK :
      usb_status = USBD_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e00b      	b.n	800be8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be72:	2303      	movs	r3, #3
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e008      	b.n	800be8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	e005      	b.n	800be8a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	73fb      	strb	r3, [r7, #15]
    break;
 800be82:	e002      	b.n	800be8a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800be84:	2303      	movs	r3, #3
 800be86:	73fb      	strb	r3, [r7, #15]
    break;
 800be88:	bf00      	nop
  }
  return usb_status;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	607a      	str	r2, [r7, #4]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	460b      	mov	r3, r1
 800bea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800beb2:	7af9      	ldrb	r1, [r7, #11]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	f7f5 ff7e 	bl	8001db8 <HAL_PCD_EP_Transmit>
 800bebc:	4603      	mov	r3, r0
 800bebe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bec0:	7dbb      	ldrb	r3, [r7, #22]
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d816      	bhi.n	800bef4 <USBD_LL_Transmit+0x60>
 800bec6:	a201      	add	r2, pc, #4	; (adr r2, 800becc <USBD_LL_Transmit+0x38>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bedd 	.word	0x0800bedd
 800bed0:	0800bee3 	.word	0x0800bee3
 800bed4:	0800bee9 	.word	0x0800bee9
 800bed8:	0800beef 	.word	0x0800beef
    case HAL_OK :
      usb_status = USBD_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]
    break;
 800bee0:	e00b      	b.n	800befa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bee2:	2303      	movs	r3, #3
 800bee4:	75fb      	strb	r3, [r7, #23]
    break;
 800bee6:	e008      	b.n	800befa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bee8:	2301      	movs	r3, #1
 800beea:	75fb      	strb	r3, [r7, #23]
    break;
 800beec:	e005      	b.n	800befa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beee:	2303      	movs	r3, #3
 800bef0:	75fb      	strb	r3, [r7, #23]
    break;
 800bef2:	e002      	b.n	800befa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	75fb      	strb	r3, [r7, #23]
    break;
 800bef8:	bf00      	nop
  }
  return usb_status;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf22:	7af9      	ldrb	r1, [r7, #11]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	f7f5 fefd 	bl	8001d26 <HAL_PCD_EP_Receive>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf30:	7dbb      	ldrb	r3, [r7, #22]
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d816      	bhi.n	800bf64 <USBD_LL_PrepareReceive+0x60>
 800bf36:	a201      	add	r2, pc, #4	; (adr r2, 800bf3c <USBD_LL_PrepareReceive+0x38>)
 800bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3c:	0800bf4d 	.word	0x0800bf4d
 800bf40:	0800bf53 	.word	0x0800bf53
 800bf44:	0800bf59 	.word	0x0800bf59
 800bf48:	0800bf5f 	.word	0x0800bf5f
    case HAL_OK :
      usb_status = USBD_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	75fb      	strb	r3, [r7, #23]
    break;
 800bf50:	e00b      	b.n	800bf6a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	75fb      	strb	r3, [r7, #23]
    break;
 800bf56:	e008      	b.n	800bf6a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf5c:	e005      	b.n	800bf6a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	75fb      	strb	r3, [r7, #23]
    break;
 800bf62:	e002      	b.n	800bf6a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	75fb      	strb	r3, [r7, #23]
    break;
 800bf68:	bf00      	nop
  }
  return usb_status;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf86:	78fa      	ldrb	r2, [r7, #3]
 800bf88:	4611      	mov	r1, r2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f5 fefc 	bl	8001d88 <HAL_PCD_EP_GetRxCount>
 800bf90:	4603      	mov	r3, r0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
	...

0800bf9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bfa8:	78fb      	ldrb	r3, [r7, #3]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <HAL_PCDEx_LPM_Callback+0x18>
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d013      	beq.n	800bfda <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bfb2:	e023      	b.n	800bffc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfbc:	f000 f83c 	bl	800c038 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfc0:	4b10      	ldr	r3, [pc, #64]	; (800c004 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	4a0f      	ldr	r2, [pc, #60]	; (800c004 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfc6:	f023 0306 	bic.w	r3, r3, #6
 800bfca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fafe 	bl	800a5d4 <USBD_LL_Resume>
    break;
 800bfd8:	e010      	b.n	800bffc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fadb 	bl	800a59c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <HAL_PCDEx_LPM_Callback+0x68>)
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	4a04      	ldr	r2, [pc, #16]	; (800c004 <HAL_PCDEx_LPM_Callback+0x68>)
 800bff4:	f043 0306 	orr.w	r3, r3, #6
 800bff8:	6113      	str	r3, [r2, #16]
    break;
 800bffa:	bf00      	nop
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	e000ed00 	.word	0xe000ed00

0800c008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c010:	4b03      	ldr	r3, [pc, #12]	; (800c020 <USBD_static_malloc+0x18>)
}
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20000a7c 	.word	0x20000a7c

0800c024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]

}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c03c:	f7f4 fb00 	bl	8000640 <SystemClock_Config>
}
 800c040:	bf00      	nop
 800c042:	bd80      	pop	{r7, pc}

0800c044 <std>:
 800c044:	2300      	movs	r3, #0
 800c046:	b510      	push	{r4, lr}
 800c048:	4604      	mov	r4, r0
 800c04a:	e9c0 3300 	strd	r3, r3, [r0]
 800c04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c052:	6083      	str	r3, [r0, #8]
 800c054:	8181      	strh	r1, [r0, #12]
 800c056:	6643      	str	r3, [r0, #100]	; 0x64
 800c058:	81c2      	strh	r2, [r0, #14]
 800c05a:	6183      	str	r3, [r0, #24]
 800c05c:	4619      	mov	r1, r3
 800c05e:	2208      	movs	r2, #8
 800c060:	305c      	adds	r0, #92	; 0x5c
 800c062:	f000 f906 	bl	800c272 <memset>
 800c066:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <std+0x58>)
 800c068:	6263      	str	r3, [r4, #36]	; 0x24
 800c06a:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <std+0x5c>)
 800c06c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <std+0x60>)
 800c070:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <std+0x64>)
 800c074:	6323      	str	r3, [r4, #48]	; 0x30
 800c076:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <std+0x68>)
 800c078:	6224      	str	r4, [r4, #32]
 800c07a:	429c      	cmp	r4, r3
 800c07c:	d006      	beq.n	800c08c <std+0x48>
 800c07e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c082:	4294      	cmp	r4, r2
 800c084:	d002      	beq.n	800c08c <std+0x48>
 800c086:	33d0      	adds	r3, #208	; 0xd0
 800c088:	429c      	cmp	r4, r3
 800c08a:	d105      	bne.n	800c098 <std+0x54>
 800c08c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c094:	f000 b966 	b.w	800c364 <__retarget_lock_init_recursive>
 800c098:	bd10      	pop	{r4, pc}
 800c09a:	bf00      	nop
 800c09c:	0800c1ed 	.word	0x0800c1ed
 800c0a0:	0800c20f 	.word	0x0800c20f
 800c0a4:	0800c247 	.word	0x0800c247
 800c0a8:	0800c26b 	.word	0x0800c26b
 800c0ac:	20001af4 	.word	0x20001af4

0800c0b0 <stdio_exit_handler>:
 800c0b0:	4a02      	ldr	r2, [pc, #8]	; (800c0bc <stdio_exit_handler+0xc>)
 800c0b2:	4903      	ldr	r1, [pc, #12]	; (800c0c0 <stdio_exit_handler+0x10>)
 800c0b4:	4803      	ldr	r0, [pc, #12]	; (800c0c4 <stdio_exit_handler+0x14>)
 800c0b6:	f000 b869 	b.w	800c18c <_fwalk_sglue>
 800c0ba:	bf00      	nop
 800c0bc:	20000138 	.word	0x20000138
 800c0c0:	0800cc11 	.word	0x0800cc11
 800c0c4:	20000144 	.word	0x20000144

0800c0c8 <cleanup_stdio>:
 800c0c8:	6841      	ldr	r1, [r0, #4]
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <cleanup_stdio+0x34>)
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	b510      	push	{r4, lr}
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	d001      	beq.n	800c0d8 <cleanup_stdio+0x10>
 800c0d4:	f000 fd9c 	bl	800cc10 <_fflush_r>
 800c0d8:	68a1      	ldr	r1, [r4, #8]
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <cleanup_stdio+0x38>)
 800c0dc:	4299      	cmp	r1, r3
 800c0de:	d002      	beq.n	800c0e6 <cleanup_stdio+0x1e>
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fd95 	bl	800cc10 <_fflush_r>
 800c0e6:	68e1      	ldr	r1, [r4, #12]
 800c0e8:	4b06      	ldr	r3, [pc, #24]	; (800c104 <cleanup_stdio+0x3c>)
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	d004      	beq.n	800c0f8 <cleanup_stdio+0x30>
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f4:	f000 bd8c 	b.w	800cc10 <_fflush_r>
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20001af4 	.word	0x20001af4
 800c100:	20001b5c 	.word	0x20001b5c
 800c104:	20001bc4 	.word	0x20001bc4

0800c108 <global_stdio_init.part.0>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	4b0b      	ldr	r3, [pc, #44]	; (800c138 <global_stdio_init.part.0+0x30>)
 800c10c:	4c0b      	ldr	r4, [pc, #44]	; (800c13c <global_stdio_init.part.0+0x34>)
 800c10e:	4a0c      	ldr	r2, [pc, #48]	; (800c140 <global_stdio_init.part.0+0x38>)
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	4620      	mov	r0, r4
 800c114:	2200      	movs	r2, #0
 800c116:	2104      	movs	r1, #4
 800c118:	f7ff ff94 	bl	800c044 <std>
 800c11c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c120:	2201      	movs	r2, #1
 800c122:	2109      	movs	r1, #9
 800c124:	f7ff ff8e 	bl	800c044 <std>
 800c128:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c12c:	2202      	movs	r2, #2
 800c12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c132:	2112      	movs	r1, #18
 800c134:	f7ff bf86 	b.w	800c044 <std>
 800c138:	20001c2c 	.word	0x20001c2c
 800c13c:	20001af4 	.word	0x20001af4
 800c140:	0800c0b1 	.word	0x0800c0b1

0800c144 <__sfp_lock_acquire>:
 800c144:	4801      	ldr	r0, [pc, #4]	; (800c14c <__sfp_lock_acquire+0x8>)
 800c146:	f000 b90e 	b.w	800c366 <__retarget_lock_acquire_recursive>
 800c14a:	bf00      	nop
 800c14c:	20001c35 	.word	0x20001c35

0800c150 <__sfp_lock_release>:
 800c150:	4801      	ldr	r0, [pc, #4]	; (800c158 <__sfp_lock_release+0x8>)
 800c152:	f000 b909 	b.w	800c368 <__retarget_lock_release_recursive>
 800c156:	bf00      	nop
 800c158:	20001c35 	.word	0x20001c35

0800c15c <__sinit>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4604      	mov	r4, r0
 800c160:	f7ff fff0 	bl	800c144 <__sfp_lock_acquire>
 800c164:	6a23      	ldr	r3, [r4, #32]
 800c166:	b11b      	cbz	r3, 800c170 <__sinit+0x14>
 800c168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c16c:	f7ff bff0 	b.w	800c150 <__sfp_lock_release>
 800c170:	4b04      	ldr	r3, [pc, #16]	; (800c184 <__sinit+0x28>)
 800c172:	6223      	str	r3, [r4, #32]
 800c174:	4b04      	ldr	r3, [pc, #16]	; (800c188 <__sinit+0x2c>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1f5      	bne.n	800c168 <__sinit+0xc>
 800c17c:	f7ff ffc4 	bl	800c108 <global_stdio_init.part.0>
 800c180:	e7f2      	b.n	800c168 <__sinit+0xc>
 800c182:	bf00      	nop
 800c184:	0800c0c9 	.word	0x0800c0c9
 800c188:	20001c2c 	.word	0x20001c2c

0800c18c <_fwalk_sglue>:
 800c18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c190:	4607      	mov	r7, r0
 800c192:	4688      	mov	r8, r1
 800c194:	4614      	mov	r4, r2
 800c196:	2600      	movs	r6, #0
 800c198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c19c:	f1b9 0901 	subs.w	r9, r9, #1
 800c1a0:	d505      	bpl.n	800c1ae <_fwalk_sglue+0x22>
 800c1a2:	6824      	ldr	r4, [r4, #0]
 800c1a4:	2c00      	cmp	r4, #0
 800c1a6:	d1f7      	bne.n	800c198 <_fwalk_sglue+0xc>
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d907      	bls.n	800c1c4 <_fwalk_sglue+0x38>
 800c1b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	d003      	beq.n	800c1c4 <_fwalk_sglue+0x38>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4638      	mov	r0, r7
 800c1c0:	47c0      	blx	r8
 800c1c2:	4306      	orrs	r6, r0
 800c1c4:	3568      	adds	r5, #104	; 0x68
 800c1c6:	e7e9      	b.n	800c19c <_fwalk_sglue+0x10>

0800c1c8 <iprintf>:
 800c1c8:	b40f      	push	{r0, r1, r2, r3}
 800c1ca:	b507      	push	{r0, r1, r2, lr}
 800c1cc:	4906      	ldr	r1, [pc, #24]	; (800c1e8 <iprintf+0x20>)
 800c1ce:	ab04      	add	r3, sp, #16
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d6:	6881      	ldr	r1, [r0, #8]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	f000 f9e9 	bl	800c5b0 <_vfiprintf_r>
 800c1de:	b003      	add	sp, #12
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b004      	add	sp, #16
 800c1e6:	4770      	bx	lr
 800c1e8:	20000190 	.word	0x20000190

0800c1ec <__sread>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f4:	f000 f868 	bl	800c2c8 <_read_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	bfab      	itete	ge
 800c1fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c200:	181b      	addge	r3, r3, r0
 800c202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c206:	bfac      	ite	ge
 800c208:	6563      	strge	r3, [r4, #84]	; 0x54
 800c20a:	81a3      	strhlt	r3, [r4, #12]
 800c20c:	bd10      	pop	{r4, pc}

0800c20e <__swrite>:
 800c20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c212:	461f      	mov	r7, r3
 800c214:	898b      	ldrh	r3, [r1, #12]
 800c216:	05db      	lsls	r3, r3, #23
 800c218:	4605      	mov	r5, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	4616      	mov	r6, r2
 800c21e:	d505      	bpl.n	800c22c <__swrite+0x1e>
 800c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c224:	2302      	movs	r3, #2
 800c226:	2200      	movs	r2, #0
 800c228:	f000 f83c 	bl	800c2a4 <_lseek_r>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	4632      	mov	r2, r6
 800c23a:	463b      	mov	r3, r7
 800c23c:	4628      	mov	r0, r5
 800c23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	f000 b853 	b.w	800c2ec <_write_r>

0800c246 <__sseek>:
 800c246:	b510      	push	{r4, lr}
 800c248:	460c      	mov	r4, r1
 800c24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24e:	f000 f829 	bl	800c2a4 <_lseek_r>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	bf15      	itete	ne
 800c258:	6560      	strne	r0, [r4, #84]	; 0x54
 800c25a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c25e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c262:	81a3      	strheq	r3, [r4, #12]
 800c264:	bf18      	it	ne
 800c266:	81a3      	strhne	r3, [r4, #12]
 800c268:	bd10      	pop	{r4, pc}

0800c26a <__sclose>:
 800c26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c26e:	f000 b809 	b.w	800c284 <_close_r>

0800c272 <memset>:
 800c272:	4402      	add	r2, r0
 800c274:	4603      	mov	r3, r0
 800c276:	4293      	cmp	r3, r2
 800c278:	d100      	bne.n	800c27c <memset+0xa>
 800c27a:	4770      	bx	lr
 800c27c:	f803 1b01 	strb.w	r1, [r3], #1
 800c280:	e7f9      	b.n	800c276 <memset+0x4>
	...

0800c284 <_close_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	; (800c2a0 <_close_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7f4 fb4f 	bl	8000932 <_close>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_close_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_close_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	20001c30 	.word	0x20001c30

0800c2a4 <_lseek_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_lseek_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f4 fb64 	bl	8000980 <_lseek>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_lseek_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_lseek_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20001c30 	.word	0x20001c30

0800c2c8 <_read_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d07      	ldr	r5, [pc, #28]	; (800c2e8 <_read_r+0x20>)
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	602a      	str	r2, [r5, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f7f4 faf2 	bl	80008c0 <_read>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_read_r+0x1e>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_read_r+0x1e>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	20001c30 	.word	0x20001c30

0800c2ec <_write_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	; (800c30c <_write_r+0x20>)
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7f4 fafd 	bl	80008fa <_write>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_write_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_write_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20001c30 	.word	0x20001c30

0800c310 <__errno>:
 800c310:	4b01      	ldr	r3, [pc, #4]	; (800c318 <__errno+0x8>)
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	20000190 	.word	0x20000190

0800c31c <__libc_init_array>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	4d0d      	ldr	r5, [pc, #52]	; (800c354 <__libc_init_array+0x38>)
 800c320:	4c0d      	ldr	r4, [pc, #52]	; (800c358 <__libc_init_array+0x3c>)
 800c322:	1b64      	subs	r4, r4, r5
 800c324:	10a4      	asrs	r4, r4, #2
 800c326:	2600      	movs	r6, #0
 800c328:	42a6      	cmp	r6, r4
 800c32a:	d109      	bne.n	800c340 <__libc_init_array+0x24>
 800c32c:	4d0b      	ldr	r5, [pc, #44]	; (800c35c <__libc_init_array+0x40>)
 800c32e:	4c0c      	ldr	r4, [pc, #48]	; (800c360 <__libc_init_array+0x44>)
 800c330:	f000 fdc0 	bl	800ceb4 <_init>
 800c334:	1b64      	subs	r4, r4, r5
 800c336:	10a4      	asrs	r4, r4, #2
 800c338:	2600      	movs	r6, #0
 800c33a:	42a6      	cmp	r6, r4
 800c33c:	d105      	bne.n	800c34a <__libc_init_array+0x2e>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	f855 3b04 	ldr.w	r3, [r5], #4
 800c344:	4798      	blx	r3
 800c346:	3601      	adds	r6, #1
 800c348:	e7ee      	b.n	800c328 <__libc_init_array+0xc>
 800c34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34e:	4798      	blx	r3
 800c350:	3601      	adds	r6, #1
 800c352:	e7f2      	b.n	800c33a <__libc_init_array+0x1e>
 800c354:	0800cfd8 	.word	0x0800cfd8
 800c358:	0800cfd8 	.word	0x0800cfd8
 800c35c:	0800cfd8 	.word	0x0800cfd8
 800c360:	0800cfdc 	.word	0x0800cfdc

0800c364 <__retarget_lock_init_recursive>:
 800c364:	4770      	bx	lr

0800c366 <__retarget_lock_acquire_recursive>:
 800c366:	4770      	bx	lr

0800c368 <__retarget_lock_release_recursive>:
 800c368:	4770      	bx	lr
	...

0800c36c <_free_r>:
 800c36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c36e:	2900      	cmp	r1, #0
 800c370:	d044      	beq.n	800c3fc <_free_r+0x90>
 800c372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c376:	9001      	str	r0, [sp, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f1a1 0404 	sub.w	r4, r1, #4
 800c37e:	bfb8      	it	lt
 800c380:	18e4      	addlt	r4, r4, r3
 800c382:	f000 f8df 	bl	800c544 <__malloc_lock>
 800c386:	4a1e      	ldr	r2, [pc, #120]	; (800c400 <_free_r+0x94>)
 800c388:	9801      	ldr	r0, [sp, #4]
 800c38a:	6813      	ldr	r3, [r2, #0]
 800c38c:	b933      	cbnz	r3, 800c39c <_free_r+0x30>
 800c38e:	6063      	str	r3, [r4, #4]
 800c390:	6014      	str	r4, [r2, #0]
 800c392:	b003      	add	sp, #12
 800c394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c398:	f000 b8da 	b.w	800c550 <__malloc_unlock>
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d908      	bls.n	800c3b2 <_free_r+0x46>
 800c3a0:	6825      	ldr	r5, [r4, #0]
 800c3a2:	1961      	adds	r1, r4, r5
 800c3a4:	428b      	cmp	r3, r1
 800c3a6:	bf01      	itttt	eq
 800c3a8:	6819      	ldreq	r1, [r3, #0]
 800c3aa:	685b      	ldreq	r3, [r3, #4]
 800c3ac:	1949      	addeq	r1, r1, r5
 800c3ae:	6021      	streq	r1, [r4, #0]
 800c3b0:	e7ed      	b.n	800c38e <_free_r+0x22>
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	b10b      	cbz	r3, 800c3bc <_free_r+0x50>
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	d9fa      	bls.n	800c3b2 <_free_r+0x46>
 800c3bc:	6811      	ldr	r1, [r2, #0]
 800c3be:	1855      	adds	r5, r2, r1
 800c3c0:	42a5      	cmp	r5, r4
 800c3c2:	d10b      	bne.n	800c3dc <_free_r+0x70>
 800c3c4:	6824      	ldr	r4, [r4, #0]
 800c3c6:	4421      	add	r1, r4
 800c3c8:	1854      	adds	r4, r2, r1
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	6011      	str	r1, [r2, #0]
 800c3ce:	d1e0      	bne.n	800c392 <_free_r+0x26>
 800c3d0:	681c      	ldr	r4, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	6053      	str	r3, [r2, #4]
 800c3d6:	440c      	add	r4, r1
 800c3d8:	6014      	str	r4, [r2, #0]
 800c3da:	e7da      	b.n	800c392 <_free_r+0x26>
 800c3dc:	d902      	bls.n	800c3e4 <_free_r+0x78>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	e7d6      	b.n	800c392 <_free_r+0x26>
 800c3e4:	6825      	ldr	r5, [r4, #0]
 800c3e6:	1961      	adds	r1, r4, r5
 800c3e8:	428b      	cmp	r3, r1
 800c3ea:	bf04      	itt	eq
 800c3ec:	6819      	ldreq	r1, [r3, #0]
 800c3ee:	685b      	ldreq	r3, [r3, #4]
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	bf04      	itt	eq
 800c3f4:	1949      	addeq	r1, r1, r5
 800c3f6:	6021      	streq	r1, [r4, #0]
 800c3f8:	6054      	str	r4, [r2, #4]
 800c3fa:	e7ca      	b.n	800c392 <_free_r+0x26>
 800c3fc:	b003      	add	sp, #12
 800c3fe:	bd30      	pop	{r4, r5, pc}
 800c400:	20001c38 	.word	0x20001c38

0800c404 <sbrk_aligned>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4e0e      	ldr	r6, [pc, #56]	; (800c440 <sbrk_aligned+0x3c>)
 800c408:	460c      	mov	r4, r1
 800c40a:	6831      	ldr	r1, [r6, #0]
 800c40c:	4605      	mov	r5, r0
 800c40e:	b911      	cbnz	r1, 800c416 <sbrk_aligned+0x12>
 800c410:	f000 fcbc 	bl	800cd8c <_sbrk_r>
 800c414:	6030      	str	r0, [r6, #0]
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 fcb7 	bl	800cd8c <_sbrk_r>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d00a      	beq.n	800c438 <sbrk_aligned+0x34>
 800c422:	1cc4      	adds	r4, r0, #3
 800c424:	f024 0403 	bic.w	r4, r4, #3
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d007      	beq.n	800c43c <sbrk_aligned+0x38>
 800c42c:	1a21      	subs	r1, r4, r0
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 fcac 	bl	800cd8c <_sbrk_r>
 800c434:	3001      	adds	r0, #1
 800c436:	d101      	bne.n	800c43c <sbrk_aligned+0x38>
 800c438:	f04f 34ff 	mov.w	r4, #4294967295
 800c43c:	4620      	mov	r0, r4
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	20001c3c 	.word	0x20001c3c

0800c444 <_malloc_r>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	1ccd      	adds	r5, r1, #3
 800c44a:	f025 0503 	bic.w	r5, r5, #3
 800c44e:	3508      	adds	r5, #8
 800c450:	2d0c      	cmp	r5, #12
 800c452:	bf38      	it	cc
 800c454:	250c      	movcc	r5, #12
 800c456:	2d00      	cmp	r5, #0
 800c458:	4607      	mov	r7, r0
 800c45a:	db01      	blt.n	800c460 <_malloc_r+0x1c>
 800c45c:	42a9      	cmp	r1, r5
 800c45e:	d905      	bls.n	800c46c <_malloc_r+0x28>
 800c460:	230c      	movs	r3, #12
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	2600      	movs	r6, #0
 800c466:	4630      	mov	r0, r6
 800c468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c540 <_malloc_r+0xfc>
 800c470:	f000 f868 	bl	800c544 <__malloc_lock>
 800c474:	f8d8 3000 	ldr.w	r3, [r8]
 800c478:	461c      	mov	r4, r3
 800c47a:	bb5c      	cbnz	r4, 800c4d4 <_malloc_r+0x90>
 800c47c:	4629      	mov	r1, r5
 800c47e:	4638      	mov	r0, r7
 800c480:	f7ff ffc0 	bl	800c404 <sbrk_aligned>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	4604      	mov	r4, r0
 800c488:	d155      	bne.n	800c536 <_malloc_r+0xf2>
 800c48a:	f8d8 4000 	ldr.w	r4, [r8]
 800c48e:	4626      	mov	r6, r4
 800c490:	2e00      	cmp	r6, #0
 800c492:	d145      	bne.n	800c520 <_malloc_r+0xdc>
 800c494:	2c00      	cmp	r4, #0
 800c496:	d048      	beq.n	800c52a <_malloc_r+0xe6>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	4631      	mov	r1, r6
 800c49c:	4638      	mov	r0, r7
 800c49e:	eb04 0903 	add.w	r9, r4, r3
 800c4a2:	f000 fc73 	bl	800cd8c <_sbrk_r>
 800c4a6:	4581      	cmp	r9, r0
 800c4a8:	d13f      	bne.n	800c52a <_malloc_r+0xe6>
 800c4aa:	6821      	ldr	r1, [r4, #0]
 800c4ac:	1a6d      	subs	r5, r5, r1
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ffa7 	bl	800c404 <sbrk_aligned>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	d037      	beq.n	800c52a <_malloc_r+0xe6>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	442b      	add	r3, r5
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d038      	beq.n	800c53a <_malloc_r+0xf6>
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	42a2      	cmp	r2, r4
 800c4cc:	d12b      	bne.n	800c526 <_malloc_r+0xe2>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	e00f      	b.n	800c4f4 <_malloc_r+0xb0>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	1b52      	subs	r2, r2, r5
 800c4d8:	d41f      	bmi.n	800c51a <_malloc_r+0xd6>
 800c4da:	2a0b      	cmp	r2, #11
 800c4dc:	d917      	bls.n	800c50e <_malloc_r+0xca>
 800c4de:	1961      	adds	r1, r4, r5
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	6025      	str	r5, [r4, #0]
 800c4e4:	bf18      	it	ne
 800c4e6:	6059      	strne	r1, [r3, #4]
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	bf08      	it	eq
 800c4ec:	f8c8 1000 	streq.w	r1, [r8]
 800c4f0:	5162      	str	r2, [r4, r5]
 800c4f2:	604b      	str	r3, [r1, #4]
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f104 060b 	add.w	r6, r4, #11
 800c4fa:	f000 f829 	bl	800c550 <__malloc_unlock>
 800c4fe:	f026 0607 	bic.w	r6, r6, #7
 800c502:	1d23      	adds	r3, r4, #4
 800c504:	1af2      	subs	r2, r6, r3
 800c506:	d0ae      	beq.n	800c466 <_malloc_r+0x22>
 800c508:	1b9b      	subs	r3, r3, r6
 800c50a:	50a3      	str	r3, [r4, r2]
 800c50c:	e7ab      	b.n	800c466 <_malloc_r+0x22>
 800c50e:	42a3      	cmp	r3, r4
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	d1dd      	bne.n	800c4d0 <_malloc_r+0x8c>
 800c514:	f8c8 2000 	str.w	r2, [r8]
 800c518:	e7ec      	b.n	800c4f4 <_malloc_r+0xb0>
 800c51a:	4623      	mov	r3, r4
 800c51c:	6864      	ldr	r4, [r4, #4]
 800c51e:	e7ac      	b.n	800c47a <_malloc_r+0x36>
 800c520:	4634      	mov	r4, r6
 800c522:	6876      	ldr	r6, [r6, #4]
 800c524:	e7b4      	b.n	800c490 <_malloc_r+0x4c>
 800c526:	4613      	mov	r3, r2
 800c528:	e7cc      	b.n	800c4c4 <_malloc_r+0x80>
 800c52a:	230c      	movs	r3, #12
 800c52c:	603b      	str	r3, [r7, #0]
 800c52e:	4638      	mov	r0, r7
 800c530:	f000 f80e 	bl	800c550 <__malloc_unlock>
 800c534:	e797      	b.n	800c466 <_malloc_r+0x22>
 800c536:	6025      	str	r5, [r4, #0]
 800c538:	e7dc      	b.n	800c4f4 <_malloc_r+0xb0>
 800c53a:	605b      	str	r3, [r3, #4]
 800c53c:	deff      	udf	#255	; 0xff
 800c53e:	bf00      	nop
 800c540:	20001c38 	.word	0x20001c38

0800c544 <__malloc_lock>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__malloc_lock+0x8>)
 800c546:	f7ff bf0e 	b.w	800c366 <__retarget_lock_acquire_recursive>
 800c54a:	bf00      	nop
 800c54c:	20001c34 	.word	0x20001c34

0800c550 <__malloc_unlock>:
 800c550:	4801      	ldr	r0, [pc, #4]	; (800c558 <__malloc_unlock+0x8>)
 800c552:	f7ff bf09 	b.w	800c368 <__retarget_lock_release_recursive>
 800c556:	bf00      	nop
 800c558:	20001c34 	.word	0x20001c34

0800c55c <__sfputc_r>:
 800c55c:	6893      	ldr	r3, [r2, #8]
 800c55e:	3b01      	subs	r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	b410      	push	{r4}
 800c564:	6093      	str	r3, [r2, #8]
 800c566:	da08      	bge.n	800c57a <__sfputc_r+0x1e>
 800c568:	6994      	ldr	r4, [r2, #24]
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	db01      	blt.n	800c572 <__sfputc_r+0x16>
 800c56e:	290a      	cmp	r1, #10
 800c570:	d103      	bne.n	800c57a <__sfputc_r+0x1e>
 800c572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c576:	f000 bb73 	b.w	800cc60 <__swbuf_r>
 800c57a:	6813      	ldr	r3, [r2, #0]
 800c57c:	1c58      	adds	r0, r3, #1
 800c57e:	6010      	str	r0, [r2, #0]
 800c580:	7019      	strb	r1, [r3, #0]
 800c582:	4608      	mov	r0, r1
 800c584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <__sfputs_r>:
 800c58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58c:	4606      	mov	r6, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	4614      	mov	r4, r2
 800c592:	18d5      	adds	r5, r2, r3
 800c594:	42ac      	cmp	r4, r5
 800c596:	d101      	bne.n	800c59c <__sfputs_r+0x12>
 800c598:	2000      	movs	r0, #0
 800c59a:	e007      	b.n	800c5ac <__sfputs_r+0x22>
 800c59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a0:	463a      	mov	r2, r7
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7ff ffda 	bl	800c55c <__sfputc_r>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d1f3      	bne.n	800c594 <__sfputs_r+0xa>
 800c5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5b0 <_vfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	b09d      	sub	sp, #116	; 0x74
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	4606      	mov	r6, r0
 800c5be:	b118      	cbz	r0, 800c5c8 <_vfiprintf_r+0x18>
 800c5c0:	6a03      	ldr	r3, [r0, #32]
 800c5c2:	b90b      	cbnz	r3, 800c5c8 <_vfiprintf_r+0x18>
 800c5c4:	f7ff fdca 	bl	800c15c <__sinit>
 800c5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d405      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	059a      	lsls	r2, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5d6:	f7ff fec6 	bl	800c366 <__retarget_lock_acquire_recursive>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	071b      	lsls	r3, r3, #28
 800c5de:	d501      	bpl.n	800c5e4 <_vfiprintf_r+0x34>
 800c5e0:	692b      	ldr	r3, [r5, #16]
 800c5e2:	b99b      	cbnz	r3, 800c60c <_vfiprintf_r+0x5c>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 fb78 	bl	800ccdc <__swsetup_r>
 800c5ec:	b170      	cbz	r0, 800c60c <_vfiprintf_r+0x5c>
 800c5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f0:	07dc      	lsls	r4, r3, #31
 800c5f2:	d504      	bpl.n	800c5fe <_vfiprintf_r+0x4e>
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	b01d      	add	sp, #116	; 0x74
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	0598      	lsls	r0, r3, #22
 800c602:	d4f7      	bmi.n	800c5f4 <_vfiprintf_r+0x44>
 800c604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c606:	f7ff feaf 	bl	800c368 <__retarget_lock_release_recursive>
 800c60a:	e7f3      	b.n	800c5f4 <_vfiprintf_r+0x44>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9309      	str	r3, [sp, #36]	; 0x24
 800c610:	2320      	movs	r3, #32
 800c612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c616:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7d0 <_vfiprintf_r+0x220>
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c624:	f04f 0901 	mov.w	r9, #1
 800c628:	4623      	mov	r3, r4
 800c62a:	469a      	mov	sl, r3
 800c62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c630:	b10a      	cbz	r2, 800c636 <_vfiprintf_r+0x86>
 800c632:	2a25      	cmp	r2, #37	; 0x25
 800c634:	d1f9      	bne.n	800c62a <_vfiprintf_r+0x7a>
 800c636:	ebba 0b04 	subs.w	fp, sl, r4
 800c63a:	d00b      	beq.n	800c654 <_vfiprintf_r+0xa4>
 800c63c:	465b      	mov	r3, fp
 800c63e:	4622      	mov	r2, r4
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ffa1 	bl	800c58a <__sfputs_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	f000 80a9 	beq.w	800c7a0 <_vfiprintf_r+0x1f0>
 800c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c650:	445a      	add	r2, fp
 800c652:	9209      	str	r2, [sp, #36]	; 0x24
 800c654:	f89a 3000 	ldrb.w	r3, [sl]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 80a1 	beq.w	800c7a0 <_vfiprintf_r+0x1f0>
 800c65e:	2300      	movs	r3, #0
 800c660:	f04f 32ff 	mov.w	r2, #4294967295
 800c664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c668:	f10a 0a01 	add.w	sl, sl, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c674:	931a      	str	r3, [sp, #104]	; 0x68
 800c676:	4654      	mov	r4, sl
 800c678:	2205      	movs	r2, #5
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4854      	ldr	r0, [pc, #336]	; (800c7d0 <_vfiprintf_r+0x220>)
 800c680:	f7f3 fda6 	bl	80001d0 <memchr>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	b9d8      	cbnz	r0, 800c6c0 <_vfiprintf_r+0x110>
 800c688:	06d1      	lsls	r1, r2, #27
 800c68a:	bf44      	itt	mi
 800c68c:	2320      	movmi	r3, #32
 800c68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c692:	0713      	lsls	r3, r2, #28
 800c694:	bf44      	itt	mi
 800c696:	232b      	movmi	r3, #43	; 0x2b
 800c698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a2:	d015      	beq.n	800c6d0 <_vfiprintf_r+0x120>
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b4:	3b30      	subs	r3, #48	; 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d94d      	bls.n	800c756 <_vfiprintf_r+0x1a6>
 800c6ba:	b1b0      	cbz	r0, 800c6ea <_vfiprintf_r+0x13a>
 800c6bc:	9207      	str	r2, [sp, #28]
 800c6be:	e014      	b.n	800c6ea <_vfiprintf_r+0x13a>
 800c6c0:	eba0 0308 	sub.w	r3, r0, r8
 800c6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	46a2      	mov	sl, r4
 800c6ce:	e7d2      	b.n	800c676 <_vfiprintf_r+0xc6>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	1d19      	adds	r1, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bfbb      	ittet	lt
 800c6dc:	425b      	neglt	r3, r3
 800c6de:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e2:	9307      	strge	r3, [sp, #28]
 800c6e4:	9307      	strlt	r3, [sp, #28]
 800c6e6:	bfb8      	it	lt
 800c6e8:	9204      	strlt	r2, [sp, #16]
 800c6ea:	7823      	ldrb	r3, [r4, #0]
 800c6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ee:	d10c      	bne.n	800c70a <_vfiprintf_r+0x15a>
 800c6f0:	7863      	ldrb	r3, [r4, #1]
 800c6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f4:	d134      	bne.n	800c760 <_vfiprintf_r+0x1b0>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9203      	str	r2, [sp, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	f04f 33ff 	movlt.w	r3, #4294967295
 800c706:	3402      	adds	r4, #2
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7e0 <_vfiprintf_r+0x230>
 800c70e:	7821      	ldrb	r1, [r4, #0]
 800c710:	2203      	movs	r2, #3
 800c712:	4650      	mov	r0, sl
 800c714:	f7f3 fd5c 	bl	80001d0 <memchr>
 800c718:	b138      	cbz	r0, 800c72a <_vfiprintf_r+0x17a>
 800c71a:	9b04      	ldr	r3, [sp, #16]
 800c71c:	eba0 000a 	sub.w	r0, r0, sl
 800c720:	2240      	movs	r2, #64	; 0x40
 800c722:	4082      	lsls	r2, r0
 800c724:	4313      	orrs	r3, r2
 800c726:	3401      	adds	r4, #1
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72e:	4829      	ldr	r0, [pc, #164]	; (800c7d4 <_vfiprintf_r+0x224>)
 800c730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c734:	2206      	movs	r2, #6
 800c736:	f7f3 fd4b 	bl	80001d0 <memchr>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d03f      	beq.n	800c7be <_vfiprintf_r+0x20e>
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <_vfiprintf_r+0x228>)
 800c740:	bb1b      	cbnz	r3, 800c78a <_vfiprintf_r+0x1da>
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	3307      	adds	r3, #7
 800c746:	f023 0307 	bic.w	r3, r3, #7
 800c74a:	3308      	adds	r3, #8
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c750:	443b      	add	r3, r7
 800c752:	9309      	str	r3, [sp, #36]	; 0x24
 800c754:	e768      	b.n	800c628 <_vfiprintf_r+0x78>
 800c756:	fb0c 3202 	mla	r2, ip, r2, r3
 800c75a:	460c      	mov	r4, r1
 800c75c:	2001      	movs	r0, #1
 800c75e:	e7a6      	b.n	800c6ae <_vfiprintf_r+0xfe>
 800c760:	2300      	movs	r3, #0
 800c762:	3401      	adds	r4, #1
 800c764:	9305      	str	r3, [sp, #20]
 800c766:	4619      	mov	r1, r3
 800c768:	f04f 0c0a 	mov.w	ip, #10
 800c76c:	4620      	mov	r0, r4
 800c76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c772:	3a30      	subs	r2, #48	; 0x30
 800c774:	2a09      	cmp	r2, #9
 800c776:	d903      	bls.n	800c780 <_vfiprintf_r+0x1d0>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0c6      	beq.n	800c70a <_vfiprintf_r+0x15a>
 800c77c:	9105      	str	r1, [sp, #20]
 800c77e:	e7c4      	b.n	800c70a <_vfiprintf_r+0x15a>
 800c780:	fb0c 2101 	mla	r1, ip, r1, r2
 800c784:	4604      	mov	r4, r0
 800c786:	2301      	movs	r3, #1
 800c788:	e7f0      	b.n	800c76c <_vfiprintf_r+0x1bc>
 800c78a:	ab03      	add	r3, sp, #12
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	462a      	mov	r2, r5
 800c790:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <_vfiprintf_r+0x22c>)
 800c792:	a904      	add	r1, sp, #16
 800c794:	4630      	mov	r0, r6
 800c796:	f3af 8000 	nop.w
 800c79a:	4607      	mov	r7, r0
 800c79c:	1c78      	adds	r0, r7, #1
 800c79e:	d1d6      	bne.n	800c74e <_vfiprintf_r+0x19e>
 800c7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a2:	07d9      	lsls	r1, r3, #31
 800c7a4:	d405      	bmi.n	800c7b2 <_vfiprintf_r+0x202>
 800c7a6:	89ab      	ldrh	r3, [r5, #12]
 800c7a8:	059a      	lsls	r2, r3, #22
 800c7aa:	d402      	bmi.n	800c7b2 <_vfiprintf_r+0x202>
 800c7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ae:	f7ff fddb 	bl	800c368 <__retarget_lock_release_recursive>
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	065b      	lsls	r3, r3, #25
 800c7b6:	f53f af1d 	bmi.w	800c5f4 <_vfiprintf_r+0x44>
 800c7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7bc:	e71c      	b.n	800c5f8 <_vfiprintf_r+0x48>
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <_vfiprintf_r+0x22c>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f000 f879 	bl	800c8c0 <_printf_i>
 800c7ce:	e7e4      	b.n	800c79a <_vfiprintf_r+0x1ea>
 800c7d0:	0800cf9c 	.word	0x0800cf9c
 800c7d4:	0800cfa6 	.word	0x0800cfa6
 800c7d8:	00000000 	.word	0x00000000
 800c7dc:	0800c58b 	.word	0x0800c58b
 800c7e0:	0800cfa2 	.word	0x0800cfa2

0800c7e4 <_printf_common>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	4699      	mov	r9, r3
 800c7ec:	688a      	ldr	r2, [r1, #8]
 800c7ee:	690b      	ldr	r3, [r1, #16]
 800c7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	bfb8      	it	lt
 800c7f8:	4613      	movlt	r3, r2
 800c7fa:	6033      	str	r3, [r6, #0]
 800c7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c800:	4607      	mov	r7, r0
 800c802:	460c      	mov	r4, r1
 800c804:	b10a      	cbz	r2, 800c80a <_printf_common+0x26>
 800c806:	3301      	adds	r3, #1
 800c808:	6033      	str	r3, [r6, #0]
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	0699      	lsls	r1, r3, #26
 800c80e:	bf42      	ittt	mi
 800c810:	6833      	ldrmi	r3, [r6, #0]
 800c812:	3302      	addmi	r3, #2
 800c814:	6033      	strmi	r3, [r6, #0]
 800c816:	6825      	ldr	r5, [r4, #0]
 800c818:	f015 0506 	ands.w	r5, r5, #6
 800c81c:	d106      	bne.n	800c82c <_printf_common+0x48>
 800c81e:	f104 0a19 	add.w	sl, r4, #25
 800c822:	68e3      	ldr	r3, [r4, #12]
 800c824:	6832      	ldr	r2, [r6, #0]
 800c826:	1a9b      	subs	r3, r3, r2
 800c828:	42ab      	cmp	r3, r5
 800c82a:	dc26      	bgt.n	800c87a <_printf_common+0x96>
 800c82c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c830:	1e13      	subs	r3, r2, #0
 800c832:	6822      	ldr	r2, [r4, #0]
 800c834:	bf18      	it	ne
 800c836:	2301      	movne	r3, #1
 800c838:	0692      	lsls	r2, r2, #26
 800c83a:	d42b      	bmi.n	800c894 <_printf_common+0xb0>
 800c83c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c840:	4649      	mov	r1, r9
 800c842:	4638      	mov	r0, r7
 800c844:	47c0      	blx	r8
 800c846:	3001      	adds	r0, #1
 800c848:	d01e      	beq.n	800c888 <_printf_common+0xa4>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	6922      	ldr	r2, [r4, #16]
 800c84e:	f003 0306 	and.w	r3, r3, #6
 800c852:	2b04      	cmp	r3, #4
 800c854:	bf02      	ittt	eq
 800c856:	68e5      	ldreq	r5, [r4, #12]
 800c858:	6833      	ldreq	r3, [r6, #0]
 800c85a:	1aed      	subeq	r5, r5, r3
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	bf0c      	ite	eq
 800c860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c864:	2500      	movne	r5, #0
 800c866:	4293      	cmp	r3, r2
 800c868:	bfc4      	itt	gt
 800c86a:	1a9b      	subgt	r3, r3, r2
 800c86c:	18ed      	addgt	r5, r5, r3
 800c86e:	2600      	movs	r6, #0
 800c870:	341a      	adds	r4, #26
 800c872:	42b5      	cmp	r5, r6
 800c874:	d11a      	bne.n	800c8ac <_printf_common+0xc8>
 800c876:	2000      	movs	r0, #0
 800c878:	e008      	b.n	800c88c <_printf_common+0xa8>
 800c87a:	2301      	movs	r3, #1
 800c87c:	4652      	mov	r2, sl
 800c87e:	4649      	mov	r1, r9
 800c880:	4638      	mov	r0, r7
 800c882:	47c0      	blx	r8
 800c884:	3001      	adds	r0, #1
 800c886:	d103      	bne.n	800c890 <_printf_common+0xac>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c890:	3501      	adds	r5, #1
 800c892:	e7c6      	b.n	800c822 <_printf_common+0x3e>
 800c894:	18e1      	adds	r1, r4, r3
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	2030      	movs	r0, #48	; 0x30
 800c89a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c89e:	4422      	add	r2, r4
 800c8a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8a8:	3302      	adds	r3, #2
 800c8aa:	e7c7      	b.n	800c83c <_printf_common+0x58>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	4638      	mov	r0, r7
 800c8b4:	47c0      	blx	r8
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d0e6      	beq.n	800c888 <_printf_common+0xa4>
 800c8ba:	3601      	adds	r6, #1
 800c8bc:	e7d9      	b.n	800c872 <_printf_common+0x8e>
	...

0800c8c0 <_printf_i>:
 800c8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c4:	7e0f      	ldrb	r7, [r1, #24]
 800c8c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8c8:	2f78      	cmp	r7, #120	; 0x78
 800c8ca:	4691      	mov	r9, r2
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	460c      	mov	r4, r1
 800c8d0:	469a      	mov	sl, r3
 800c8d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8d6:	d807      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8d8:	2f62      	cmp	r7, #98	; 0x62
 800c8da:	d80a      	bhi.n	800c8f2 <_printf_i+0x32>
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	f000 80d4 	beq.w	800ca8a <_printf_i+0x1ca>
 800c8e2:	2f58      	cmp	r7, #88	; 0x58
 800c8e4:	f000 80c0 	beq.w	800ca68 <_printf_i+0x1a8>
 800c8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f0:	e03a      	b.n	800c968 <_printf_i+0xa8>
 800c8f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8f6:	2b15      	cmp	r3, #21
 800c8f8:	d8f6      	bhi.n	800c8e8 <_printf_i+0x28>
 800c8fa:	a101      	add	r1, pc, #4	; (adr r1, 800c900 <_printf_i+0x40>)
 800c8fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c900:	0800c959 	.word	0x0800c959
 800c904:	0800c96d 	.word	0x0800c96d
 800c908:	0800c8e9 	.word	0x0800c8e9
 800c90c:	0800c8e9 	.word	0x0800c8e9
 800c910:	0800c8e9 	.word	0x0800c8e9
 800c914:	0800c8e9 	.word	0x0800c8e9
 800c918:	0800c96d 	.word	0x0800c96d
 800c91c:	0800c8e9 	.word	0x0800c8e9
 800c920:	0800c8e9 	.word	0x0800c8e9
 800c924:	0800c8e9 	.word	0x0800c8e9
 800c928:	0800c8e9 	.word	0x0800c8e9
 800c92c:	0800ca71 	.word	0x0800ca71
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800ca2b 	.word	0x0800ca2b
 800c938:	0800c8e9 	.word	0x0800c8e9
 800c93c:	0800c8e9 	.word	0x0800c8e9
 800c940:	0800ca93 	.word	0x0800ca93
 800c944:	0800c8e9 	.word	0x0800c8e9
 800c948:	0800c999 	.word	0x0800c999
 800c94c:	0800c8e9 	.word	0x0800c8e9
 800c950:	0800c8e9 	.word	0x0800c8e9
 800c954:	0800ca33 	.word	0x0800ca33
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	1d1a      	adds	r2, r3, #4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c968:	2301      	movs	r3, #1
 800c96a:	e09f      	b.n	800caac <_printf_i+0x1ec>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	0607      	lsls	r7, r0, #24
 800c972:	f103 0104 	add.w	r1, r3, #4
 800c976:	6029      	str	r1, [r5, #0]
 800c978:	d501      	bpl.n	800c97e <_printf_i+0xbe>
 800c97a:	681e      	ldr	r6, [r3, #0]
 800c97c:	e003      	b.n	800c986 <_printf_i+0xc6>
 800c97e:	0646      	lsls	r6, r0, #25
 800c980:	d5fb      	bpl.n	800c97a <_printf_i+0xba>
 800c982:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c986:	2e00      	cmp	r6, #0
 800c988:	da03      	bge.n	800c992 <_printf_i+0xd2>
 800c98a:	232d      	movs	r3, #45	; 0x2d
 800c98c:	4276      	negs	r6, r6
 800c98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c992:	485a      	ldr	r0, [pc, #360]	; (800cafc <_printf_i+0x23c>)
 800c994:	230a      	movs	r3, #10
 800c996:	e012      	b.n	800c9be <_printf_i+0xfe>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	6820      	ldr	r0, [r4, #0]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	6029      	str	r1, [r5, #0]
 800c9a0:	0605      	lsls	r5, r0, #24
 800c9a2:	d501      	bpl.n	800c9a8 <_printf_i+0xe8>
 800c9a4:	681e      	ldr	r6, [r3, #0]
 800c9a6:	e002      	b.n	800c9ae <_printf_i+0xee>
 800c9a8:	0641      	lsls	r1, r0, #25
 800c9aa:	d5fb      	bpl.n	800c9a4 <_printf_i+0xe4>
 800c9ac:	881e      	ldrh	r6, [r3, #0]
 800c9ae:	4853      	ldr	r0, [pc, #332]	; (800cafc <_printf_i+0x23c>)
 800c9b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c9b2:	bf0c      	ite	eq
 800c9b4:	2308      	moveq	r3, #8
 800c9b6:	230a      	movne	r3, #10
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9be:	6865      	ldr	r5, [r4, #4]
 800c9c0:	60a5      	str	r5, [r4, #8]
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	bfa2      	ittt	ge
 800c9c6:	6821      	ldrge	r1, [r4, #0]
 800c9c8:	f021 0104 	bicge.w	r1, r1, #4
 800c9cc:	6021      	strge	r1, [r4, #0]
 800c9ce:	b90e      	cbnz	r6, 800c9d4 <_printf_i+0x114>
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	d04b      	beq.n	800ca6c <_printf_i+0x1ac>
 800c9d4:	4615      	mov	r5, r2
 800c9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9da:	fb03 6711 	mls	r7, r3, r1, r6
 800c9de:	5dc7      	ldrb	r7, [r0, r7]
 800c9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	460e      	mov	r6, r1
 800c9ea:	d9f4      	bls.n	800c9d6 <_printf_i+0x116>
 800c9ec:	2b08      	cmp	r3, #8
 800c9ee:	d10b      	bne.n	800ca08 <_printf_i+0x148>
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	07de      	lsls	r6, r3, #31
 800c9f4:	d508      	bpl.n	800ca08 <_printf_i+0x148>
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	6861      	ldr	r1, [r4, #4]
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	bfde      	ittt	le
 800c9fe:	2330      	movle	r3, #48	; 0x30
 800ca00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca08:	1b52      	subs	r2, r2, r5
 800ca0a:	6122      	str	r2, [r4, #16]
 800ca0c:	f8cd a000 	str.w	sl, [sp]
 800ca10:	464b      	mov	r3, r9
 800ca12:	aa03      	add	r2, sp, #12
 800ca14:	4621      	mov	r1, r4
 800ca16:	4640      	mov	r0, r8
 800ca18:	f7ff fee4 	bl	800c7e4 <_printf_common>
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	d14a      	bne.n	800cab6 <_printf_i+0x1f6>
 800ca20:	f04f 30ff 	mov.w	r0, #4294967295
 800ca24:	b004      	add	sp, #16
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	f043 0320 	orr.w	r3, r3, #32
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	4833      	ldr	r0, [pc, #204]	; (800cb00 <_printf_i+0x240>)
 800ca34:	2778      	movs	r7, #120	; 0x78
 800ca36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	6829      	ldr	r1, [r5, #0]
 800ca3e:	061f      	lsls	r7, r3, #24
 800ca40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca44:	d402      	bmi.n	800ca4c <_printf_i+0x18c>
 800ca46:	065f      	lsls	r7, r3, #25
 800ca48:	bf48      	it	mi
 800ca4a:	b2b6      	uxthmi	r6, r6
 800ca4c:	07df      	lsls	r7, r3, #31
 800ca4e:	bf48      	it	mi
 800ca50:	f043 0320 	orrmi.w	r3, r3, #32
 800ca54:	6029      	str	r1, [r5, #0]
 800ca56:	bf48      	it	mi
 800ca58:	6023      	strmi	r3, [r4, #0]
 800ca5a:	b91e      	cbnz	r6, 800ca64 <_printf_i+0x1a4>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	f023 0320 	bic.w	r3, r3, #32
 800ca62:	6023      	str	r3, [r4, #0]
 800ca64:	2310      	movs	r3, #16
 800ca66:	e7a7      	b.n	800c9b8 <_printf_i+0xf8>
 800ca68:	4824      	ldr	r0, [pc, #144]	; (800cafc <_printf_i+0x23c>)
 800ca6a:	e7e4      	b.n	800ca36 <_printf_i+0x176>
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	e7bd      	b.n	800c9ec <_printf_i+0x12c>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	6826      	ldr	r6, [r4, #0]
 800ca74:	6961      	ldr	r1, [r4, #20]
 800ca76:	1d18      	adds	r0, r3, #4
 800ca78:	6028      	str	r0, [r5, #0]
 800ca7a:	0635      	lsls	r5, r6, #24
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	d501      	bpl.n	800ca84 <_printf_i+0x1c4>
 800ca80:	6019      	str	r1, [r3, #0]
 800ca82:	e002      	b.n	800ca8a <_printf_i+0x1ca>
 800ca84:	0670      	lsls	r0, r6, #25
 800ca86:	d5fb      	bpl.n	800ca80 <_printf_i+0x1c0>
 800ca88:	8019      	strh	r1, [r3, #0]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	4615      	mov	r5, r2
 800ca90:	e7bc      	b.n	800ca0c <_printf_i+0x14c>
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	1d1a      	adds	r2, r3, #4
 800ca96:	602a      	str	r2, [r5, #0]
 800ca98:	681d      	ldr	r5, [r3, #0]
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7f3 fb96 	bl	80001d0 <memchr>
 800caa4:	b108      	cbz	r0, 800caaa <_printf_i+0x1ea>
 800caa6:	1b40      	subs	r0, r0, r5
 800caa8:	6060      	str	r0, [r4, #4]
 800caaa:	6863      	ldr	r3, [r4, #4]
 800caac:	6123      	str	r3, [r4, #16]
 800caae:	2300      	movs	r3, #0
 800cab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab4:	e7aa      	b.n	800ca0c <_printf_i+0x14c>
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	462a      	mov	r2, r5
 800caba:	4649      	mov	r1, r9
 800cabc:	4640      	mov	r0, r8
 800cabe:	47d0      	blx	sl
 800cac0:	3001      	adds	r0, #1
 800cac2:	d0ad      	beq.n	800ca20 <_printf_i+0x160>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	079b      	lsls	r3, r3, #30
 800cac8:	d413      	bmi.n	800caf2 <_printf_i+0x232>
 800caca:	68e0      	ldr	r0, [r4, #12]
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	4298      	cmp	r0, r3
 800cad0:	bfb8      	it	lt
 800cad2:	4618      	movlt	r0, r3
 800cad4:	e7a6      	b.n	800ca24 <_printf_i+0x164>
 800cad6:	2301      	movs	r3, #1
 800cad8:	4632      	mov	r2, r6
 800cada:	4649      	mov	r1, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	47d0      	blx	sl
 800cae0:	3001      	adds	r0, #1
 800cae2:	d09d      	beq.n	800ca20 <_printf_i+0x160>
 800cae4:	3501      	adds	r5, #1
 800cae6:	68e3      	ldr	r3, [r4, #12]
 800cae8:	9903      	ldr	r1, [sp, #12]
 800caea:	1a5b      	subs	r3, r3, r1
 800caec:	42ab      	cmp	r3, r5
 800caee:	dcf2      	bgt.n	800cad6 <_printf_i+0x216>
 800caf0:	e7eb      	b.n	800caca <_printf_i+0x20a>
 800caf2:	2500      	movs	r5, #0
 800caf4:	f104 0619 	add.w	r6, r4, #25
 800caf8:	e7f5      	b.n	800cae6 <_printf_i+0x226>
 800cafa:	bf00      	nop
 800cafc:	0800cfad 	.word	0x0800cfad
 800cb00:	0800cfbe 	.word	0x0800cfbe

0800cb04 <__sflush_r>:
 800cb04:	898a      	ldrh	r2, [r1, #12]
 800cb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	0710      	lsls	r0, r2, #28
 800cb0e:	460c      	mov	r4, r1
 800cb10:	d458      	bmi.n	800cbc4 <__sflush_r+0xc0>
 800cb12:	684b      	ldr	r3, [r1, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	dc05      	bgt.n	800cb24 <__sflush_r+0x20>
 800cb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	dc02      	bgt.n	800cb24 <__sflush_r+0x20>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	d0f9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb30:	682f      	ldr	r7, [r5, #0]
 800cb32:	6a21      	ldr	r1, [r4, #32]
 800cb34:	602b      	str	r3, [r5, #0]
 800cb36:	d032      	beq.n	800cb9e <__sflush_r+0x9a>
 800cb38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	075a      	lsls	r2, r3, #29
 800cb3e:	d505      	bpl.n	800cb4c <__sflush_r+0x48>
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	1ac0      	subs	r0, r0, r3
 800cb44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb46:	b10b      	cbz	r3, 800cb4c <__sflush_r+0x48>
 800cb48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb4a:	1ac0      	subs	r0, r0, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4602      	mov	r2, r0
 800cb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb52:	6a21      	ldr	r1, [r4, #32]
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b0      	blx	r6
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	d106      	bne.n	800cb6c <__sflush_r+0x68>
 800cb5e:	6829      	ldr	r1, [r5, #0]
 800cb60:	291d      	cmp	r1, #29
 800cb62:	d82b      	bhi.n	800cbbc <__sflush_r+0xb8>
 800cb64:	4a29      	ldr	r2, [pc, #164]	; (800cc0c <__sflush_r+0x108>)
 800cb66:	410a      	asrs	r2, r1
 800cb68:	07d6      	lsls	r6, r2, #31
 800cb6a:	d427      	bmi.n	800cbbc <__sflush_r+0xb8>
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	6062      	str	r2, [r4, #4]
 800cb70:	04d9      	lsls	r1, r3, #19
 800cb72:	6922      	ldr	r2, [r4, #16]
 800cb74:	6022      	str	r2, [r4, #0]
 800cb76:	d504      	bpl.n	800cb82 <__sflush_r+0x7e>
 800cb78:	1c42      	adds	r2, r0, #1
 800cb7a:	d101      	bne.n	800cb80 <__sflush_r+0x7c>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b903      	cbnz	r3, 800cb82 <__sflush_r+0x7e>
 800cb80:	6560      	str	r0, [r4, #84]	; 0x54
 800cb82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb84:	602f      	str	r7, [r5, #0]
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d0c9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cb8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	d002      	beq.n	800cb98 <__sflush_r+0x94>
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7ff fbea 	bl	800c36c <_free_r>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	6360      	str	r0, [r4, #52]	; 0x34
 800cb9c:	e7c0      	b.n	800cb20 <__sflush_r+0x1c>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b0      	blx	r6
 800cba4:	1c41      	adds	r1, r0, #1
 800cba6:	d1c8      	bne.n	800cb3a <__sflush_r+0x36>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0c5      	beq.n	800cb3a <__sflush_r+0x36>
 800cbae:	2b1d      	cmp	r3, #29
 800cbb0:	d001      	beq.n	800cbb6 <__sflush_r+0xb2>
 800cbb2:	2b16      	cmp	r3, #22
 800cbb4:	d101      	bne.n	800cbba <__sflush_r+0xb6>
 800cbb6:	602f      	str	r7, [r5, #0]
 800cbb8:	e7b1      	b.n	800cb1e <__sflush_r+0x1a>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	e7ad      	b.n	800cb20 <__sflush_r+0x1c>
 800cbc4:	690f      	ldr	r7, [r1, #16]
 800cbc6:	2f00      	cmp	r7, #0
 800cbc8:	d0a9      	beq.n	800cb1e <__sflush_r+0x1a>
 800cbca:	0793      	lsls	r3, r2, #30
 800cbcc:	680e      	ldr	r6, [r1, #0]
 800cbce:	bf08      	it	eq
 800cbd0:	694b      	ldreq	r3, [r1, #20]
 800cbd2:	600f      	str	r7, [r1, #0]
 800cbd4:	bf18      	it	ne
 800cbd6:	2300      	movne	r3, #0
 800cbd8:	eba6 0807 	sub.w	r8, r6, r7
 800cbdc:	608b      	str	r3, [r1, #8]
 800cbde:	f1b8 0f00 	cmp.w	r8, #0
 800cbe2:	dd9c      	ble.n	800cb1e <__sflush_r+0x1a>
 800cbe4:	6a21      	ldr	r1, [r4, #32]
 800cbe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbe8:	4643      	mov	r3, r8
 800cbea:	463a      	mov	r2, r7
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b0      	blx	r6
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	dc06      	bgt.n	800cc02 <__sflush_r+0xfe>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cc00:	e78e      	b.n	800cb20 <__sflush_r+0x1c>
 800cc02:	4407      	add	r7, r0
 800cc04:	eba8 0800 	sub.w	r8, r8, r0
 800cc08:	e7e9      	b.n	800cbde <__sflush_r+0xda>
 800cc0a:	bf00      	nop
 800cc0c:	dfbffffe 	.word	0xdfbffffe

0800cc10 <_fflush_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	690b      	ldr	r3, [r1, #16]
 800cc14:	4605      	mov	r5, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	b913      	cbnz	r3, 800cc20 <_fflush_r+0x10>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	b118      	cbz	r0, 800cc2a <_fflush_r+0x1a>
 800cc22:	6a03      	ldr	r3, [r0, #32]
 800cc24:	b90b      	cbnz	r3, 800cc2a <_fflush_r+0x1a>
 800cc26:	f7ff fa99 	bl	800c15c <__sinit>
 800cc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0f3      	beq.n	800cc1a <_fflush_r+0xa>
 800cc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc34:	07d0      	lsls	r0, r2, #31
 800cc36:	d404      	bmi.n	800cc42 <_fflush_r+0x32>
 800cc38:	0599      	lsls	r1, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_fflush_r+0x32>
 800cc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc3e:	f7ff fb92 	bl	800c366 <__retarget_lock_acquire_recursive>
 800cc42:	4628      	mov	r0, r5
 800cc44:	4621      	mov	r1, r4
 800cc46:	f7ff ff5d 	bl	800cb04 <__sflush_r>
 800cc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc4c:	07da      	lsls	r2, r3, #31
 800cc4e:	4605      	mov	r5, r0
 800cc50:	d4e4      	bmi.n	800cc1c <_fflush_r+0xc>
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	059b      	lsls	r3, r3, #22
 800cc56:	d4e1      	bmi.n	800cc1c <_fflush_r+0xc>
 800cc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc5a:	f7ff fb85 	bl	800c368 <__retarget_lock_release_recursive>
 800cc5e:	e7dd      	b.n	800cc1c <_fflush_r+0xc>

0800cc60 <__swbuf_r>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	460e      	mov	r6, r1
 800cc64:	4614      	mov	r4, r2
 800cc66:	4605      	mov	r5, r0
 800cc68:	b118      	cbz	r0, 800cc72 <__swbuf_r+0x12>
 800cc6a:	6a03      	ldr	r3, [r0, #32]
 800cc6c:	b90b      	cbnz	r3, 800cc72 <__swbuf_r+0x12>
 800cc6e:	f7ff fa75 	bl	800c15c <__sinit>
 800cc72:	69a3      	ldr	r3, [r4, #24]
 800cc74:	60a3      	str	r3, [r4, #8]
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	071a      	lsls	r2, r3, #28
 800cc7a:	d525      	bpl.n	800ccc8 <__swbuf_r+0x68>
 800cc7c:	6923      	ldr	r3, [r4, #16]
 800cc7e:	b31b      	cbz	r3, 800ccc8 <__swbuf_r+0x68>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	6922      	ldr	r2, [r4, #16]
 800cc84:	1a98      	subs	r0, r3, r2
 800cc86:	6963      	ldr	r3, [r4, #20]
 800cc88:	b2f6      	uxtb	r6, r6
 800cc8a:	4283      	cmp	r3, r0
 800cc8c:	4637      	mov	r7, r6
 800cc8e:	dc04      	bgt.n	800cc9a <__swbuf_r+0x3a>
 800cc90:	4621      	mov	r1, r4
 800cc92:	4628      	mov	r0, r5
 800cc94:	f7ff ffbc 	bl	800cc10 <_fflush_r>
 800cc98:	b9e0      	cbnz	r0, 800ccd4 <__swbuf_r+0x74>
 800cc9a:	68a3      	ldr	r3, [r4, #8]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	60a3      	str	r3, [r4, #8]
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	701e      	strb	r6, [r3, #0]
 800cca8:	6962      	ldr	r2, [r4, #20]
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d004      	beq.n	800ccba <__swbuf_r+0x5a>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	07db      	lsls	r3, r3, #31
 800ccb4:	d506      	bpl.n	800ccc4 <__swbuf_r+0x64>
 800ccb6:	2e0a      	cmp	r6, #10
 800ccb8:	d104      	bne.n	800ccc4 <__swbuf_r+0x64>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff ffa7 	bl	800cc10 <_fflush_r>
 800ccc2:	b938      	cbnz	r0, 800ccd4 <__swbuf_r+0x74>
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 f806 	bl	800ccdc <__swsetup_r>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d0d5      	beq.n	800cc80 <__swbuf_r+0x20>
 800ccd4:	f04f 37ff 	mov.w	r7, #4294967295
 800ccd8:	e7f4      	b.n	800ccc4 <__swbuf_r+0x64>
	...

0800ccdc <__swsetup_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4b2a      	ldr	r3, [pc, #168]	; (800cd88 <__swsetup_r+0xac>)
 800cce0:	4605      	mov	r5, r0
 800cce2:	6818      	ldr	r0, [r3, #0]
 800cce4:	460c      	mov	r4, r1
 800cce6:	b118      	cbz	r0, 800ccf0 <__swsetup_r+0x14>
 800cce8:	6a03      	ldr	r3, [r0, #32]
 800ccea:	b90b      	cbnz	r3, 800ccf0 <__swsetup_r+0x14>
 800ccec:	f7ff fa36 	bl	800c15c <__sinit>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccf6:	0718      	lsls	r0, r3, #28
 800ccf8:	d422      	bmi.n	800cd40 <__swsetup_r+0x64>
 800ccfa:	06d9      	lsls	r1, r3, #27
 800ccfc:	d407      	bmi.n	800cd0e <__swsetup_r+0x32>
 800ccfe:	2309      	movs	r3, #9
 800cd00:	602b      	str	r3, [r5, #0]
 800cd02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd06:	81a3      	strh	r3, [r4, #12]
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0c:	e034      	b.n	800cd78 <__swsetup_r+0x9c>
 800cd0e:	0758      	lsls	r0, r3, #29
 800cd10:	d512      	bpl.n	800cd38 <__swsetup_r+0x5c>
 800cd12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd14:	b141      	cbz	r1, 800cd28 <__swsetup_r+0x4c>
 800cd16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd1a:	4299      	cmp	r1, r3
 800cd1c:	d002      	beq.n	800cd24 <__swsetup_r+0x48>
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f7ff fb24 	bl	800c36c <_free_r>
 800cd24:	2300      	movs	r3, #0
 800cd26:	6363      	str	r3, [r4, #52]	; 0x34
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd2e:	81a3      	strh	r3, [r4, #12]
 800cd30:	2300      	movs	r3, #0
 800cd32:	6063      	str	r3, [r4, #4]
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	6023      	str	r3, [r4, #0]
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f043 0308 	orr.w	r3, r3, #8
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	b94b      	cbnz	r3, 800cd58 <__swsetup_r+0x7c>
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd4e:	d003      	beq.n	800cd58 <__swsetup_r+0x7c>
 800cd50:	4621      	mov	r1, r4
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f850 	bl	800cdf8 <__smakebuf_r>
 800cd58:	89a0      	ldrh	r0, [r4, #12]
 800cd5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd5e:	f010 0301 	ands.w	r3, r0, #1
 800cd62:	d00a      	beq.n	800cd7a <__swsetup_r+0x9e>
 800cd64:	2300      	movs	r3, #0
 800cd66:	60a3      	str	r3, [r4, #8]
 800cd68:	6963      	ldr	r3, [r4, #20]
 800cd6a:	425b      	negs	r3, r3
 800cd6c:	61a3      	str	r3, [r4, #24]
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	b943      	cbnz	r3, 800cd84 <__swsetup_r+0xa8>
 800cd72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd76:	d1c4      	bne.n	800cd02 <__swsetup_r+0x26>
 800cd78:	bd38      	pop	{r3, r4, r5, pc}
 800cd7a:	0781      	lsls	r1, r0, #30
 800cd7c:	bf58      	it	pl
 800cd7e:	6963      	ldrpl	r3, [r4, #20]
 800cd80:	60a3      	str	r3, [r4, #8]
 800cd82:	e7f4      	b.n	800cd6e <__swsetup_r+0x92>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7f7      	b.n	800cd78 <__swsetup_r+0x9c>
 800cd88:	20000190 	.word	0x20000190

0800cd8c <_sbrk_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d06      	ldr	r5, [pc, #24]	; (800cda8 <_sbrk_r+0x1c>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	f7f3 fe00 	bl	800099c <_sbrk>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_sbrk_r+0x1a>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_sbrk_r+0x1a>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20001c30 	.word	0x20001c30

0800cdac <__swhatbuf_r>:
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	460c      	mov	r4, r1
 800cdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	b096      	sub	sp, #88	; 0x58
 800cdb8:	4615      	mov	r5, r2
 800cdba:	461e      	mov	r6, r3
 800cdbc:	da0d      	bge.n	800cdda <__swhatbuf_r+0x2e>
 800cdbe:	89a3      	ldrh	r3, [r4, #12]
 800cdc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdc4:	f04f 0100 	mov.w	r1, #0
 800cdc8:	bf0c      	ite	eq
 800cdca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdce:	2340      	movne	r3, #64	; 0x40
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	6031      	str	r1, [r6, #0]
 800cdd4:	602b      	str	r3, [r5, #0]
 800cdd6:	b016      	add	sp, #88	; 0x58
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}
 800cdda:	466a      	mov	r2, sp
 800cddc:	f000 f848 	bl	800ce70 <_fstat_r>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dbec      	blt.n	800cdbe <__swhatbuf_r+0x12>
 800cde4:	9901      	ldr	r1, [sp, #4]
 800cde6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdee:	4259      	negs	r1, r3
 800cdf0:	4159      	adcs	r1, r3
 800cdf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf6:	e7eb      	b.n	800cdd0 <__swhatbuf_r+0x24>

0800cdf8 <__smakebuf_r>:
 800cdf8:	898b      	ldrh	r3, [r1, #12]
 800cdfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdfc:	079d      	lsls	r5, r3, #30
 800cdfe:	4606      	mov	r6, r0
 800ce00:	460c      	mov	r4, r1
 800ce02:	d507      	bpl.n	800ce14 <__smakebuf_r+0x1c>
 800ce04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	6123      	str	r3, [r4, #16]
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	6163      	str	r3, [r4, #20]
 800ce10:	b002      	add	sp, #8
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	ab01      	add	r3, sp, #4
 800ce16:	466a      	mov	r2, sp
 800ce18:	f7ff ffc8 	bl	800cdac <__swhatbuf_r>
 800ce1c:	9900      	ldr	r1, [sp, #0]
 800ce1e:	4605      	mov	r5, r0
 800ce20:	4630      	mov	r0, r6
 800ce22:	f7ff fb0f 	bl	800c444 <_malloc_r>
 800ce26:	b948      	cbnz	r0, 800ce3c <__smakebuf_r+0x44>
 800ce28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2c:	059a      	lsls	r2, r3, #22
 800ce2e:	d4ef      	bmi.n	800ce10 <__smakebuf_r+0x18>
 800ce30:	f023 0303 	bic.w	r3, r3, #3
 800ce34:	f043 0302 	orr.w	r3, r3, #2
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	e7e3      	b.n	800ce04 <__smakebuf_r+0xc>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	6020      	str	r0, [r4, #0]
 800ce40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	9b00      	ldr	r3, [sp, #0]
 800ce48:	6163      	str	r3, [r4, #20]
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	6120      	str	r0, [r4, #16]
 800ce4e:	b15b      	cbz	r3, 800ce68 <__smakebuf_r+0x70>
 800ce50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce54:	4630      	mov	r0, r6
 800ce56:	f000 f81d 	bl	800ce94 <_isatty_r>
 800ce5a:	b128      	cbz	r0, 800ce68 <__smakebuf_r+0x70>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f023 0303 	bic.w	r3, r3, #3
 800ce62:	f043 0301 	orr.w	r3, r3, #1
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	431d      	orrs	r5, r3
 800ce6c:	81a5      	strh	r5, [r4, #12]
 800ce6e:	e7cf      	b.n	800ce10 <__smakebuf_r+0x18>

0800ce70 <_fstat_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_fstat_r+0x20>)
 800ce74:	2300      	movs	r3, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	f7f3 fd64 	bl	800094a <_fstat>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d102      	bne.n	800ce8c <_fstat_r+0x1c>
 800ce86:	682b      	ldr	r3, [r5, #0]
 800ce88:	b103      	cbz	r3, 800ce8c <_fstat_r+0x1c>
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	bd38      	pop	{r3, r4, r5, pc}
 800ce8e:	bf00      	nop
 800ce90:	20001c30 	.word	0x20001c30

0800ce94 <_isatty_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d06      	ldr	r5, [pc, #24]	; (800ceb0 <_isatty_r+0x1c>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	602b      	str	r3, [r5, #0]
 800cea0:	f7f3 fd63 	bl	800096a <_isatty>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_isatty_r+0x1a>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_isatty_r+0x1a>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	20001c30 	.word	0x20001c30

0800ceb4 <_init>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr

0800cec0 <_fini>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	bf00      	nop
 800cec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cec6:	bc08      	pop	{r3}
 800cec8:	469e      	mov	lr, r3
 800ceca:	4770      	bx	lr
