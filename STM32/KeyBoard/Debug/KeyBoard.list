
KeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004284  08004284  00014284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800435c  0800435c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800435c  0800435c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800435c  0800435c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  20000210  08004574  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  08004574  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d054  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004798  00000000  00000000  0003d2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00041a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013dc  00000000  00000000  00042b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c803  00000000  00000000  00043f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d98  00000000  00000000  0006070f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000986e5  00000000  00000000  000824a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032bc  00000000  00000000  0011ab8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000bda3  00000000  00000000  0011de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00129beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800426c 	.word	0x0800426c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800426c 	.word	0x0800426c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	2214      	movs	r2, #20
 8000432:	2100      	movs	r1, #0
 8000434:	a803      	add	r0, sp, #12
 8000436:	f003 fee4 	bl	8004202 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_GPIO_Init+0x88>)
 800043e:	03c9      	lsls	r1, r1, #15
 8000440:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000442:	2501      	movs	r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800045e:	4c16      	ldr	r4, [pc, #88]	; (80004b8 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	02c9      	lsls	r1, r1, #11
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000472:	0020      	movs	r0, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	400b      	ands	r3, r1
 8000476:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800047e:	f000 fc35 	bl	8000cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8000482:	2201      	movs	r2, #1
 8000484:	0020      	movs	r0, r4
 8000486:	2108      	movs	r1, #8
 8000488:	f000 fc30 	bl	8000cec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800048c:	0020      	movs	r0, r4
 800048e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000490:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000498:	f000 fb76 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 800049c:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 800049e:	0020      	movs	r0, r4
 80004a0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80004a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f000 fb6d 	bl	8000b88 <HAL_GPIO_Init>

}
 80004ae:	b008      	add	sp, #32
 80004b0:	bd70      	pop	{r4, r5, r6, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000400 	.word	0x48000400

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b510      	push	{r4, lr}
 80004be:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c0:	2230      	movs	r2, #48	; 0x30
 80004c2:	2100      	movs	r1, #0
 80004c4:	a80c      	add	r0, sp, #48	; 0x30
 80004c6:	f003 fe9c 	bl	8004202 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ca:	2210      	movs	r2, #16
 80004cc:	2100      	movs	r1, #0
 80004ce:	a801      	add	r0, sp, #4
 80004d0:	f003 fe97 	bl	8004202 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d4:	2218      	movs	r2, #24
 80004d6:	2100      	movs	r1, #0
 80004d8:	a805      	add	r0, sp, #20
 80004da:	f003 fe92 	bl	8004202 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004de:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004e0:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004e4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004e6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	f001 fa98 	bl	8001a1c <HAL_RCC_OscConfig>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fa:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004fc:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fe:	0021      	movs	r1, r4
 8000500:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000502:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000504:	f001 fd10 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000508:	2800      	cmp	r0, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x54>
 800050c:	b672      	cpsid	i
  while (1)
 800050e:	e7fe      	b.n	800050e <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000510:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000512:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000514:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000516:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000518:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051a:	f001 fd9f 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 800051e:	2800      	cmp	r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x6a>
 8000522:	b672      	cpsid	i
  while (1)
 8000524:	e7fe      	b.n	8000524 <SystemClock_Config+0x68>
}
 8000526:	b018      	add	sp, #96	; 0x60
 8000528:	bd10      	pop	{r4, pc}
	...

0800052c <Get_Descriptor>:
void Get_Descriptor(uint8_t ascii){
 800052c:	b570      	push	{r4, r5, r6, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800052e:	4c0b      	ldr	r4, [pc, #44]	; (800055c <Get_Descriptor+0x30>)
void Get_Descriptor(uint8_t ascii){
 8000530:	0005      	movs	r5, r0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000532:	220f      	movs	r2, #15
 8000534:	2100      	movs	r1, #0
 8000536:	0020      	movs	r0, r4
 8000538:	f003 fe63 	bl	8004202 <memset>
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800053c:	2107      	movs	r1, #7
 800053e:	2201      	movs	r2, #1
	uint8_t pos = Map[ascii];
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <Get_Descriptor+0x34>)
 8000542:	5d5b      	ldrb	r3, [r3, r5]
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000544:	4019      	ands	r1, r3
 8000546:	408a      	lsls	r2, r1
 8000548:	0918      	lsrs	r0, r3, #4
 800054a:	5422      	strb	r2, [r4, r0]
	if((pos&0x08) == 8)
 800054c:	071b      	lsls	r3, r3, #28
 800054e:	d503      	bpl.n	8000558 <Get_Descriptor+0x2c>
		sent_buffer[0] |= 0x02;
 8000550:	2302      	movs	r3, #2
 8000552:	7822      	ldrb	r2, [r4, #0]
 8000554:	4313      	orrs	r3, r2
 8000556:	7023      	strb	r3, [r4, #0]
}
 8000558:	bd70      	pop	{r4, r5, r6, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	2000033d 	.word	0x2000033d
 8000560:	20000000 	.word	0x20000000

08000564 <SimulateKeyPress>:
void SimulateKeyPress(uint8_t ascii){
 8000564:	b510      	push	{r4, lr}
    Get_Descriptor(ascii);
 8000566:	f7ff ffe1 	bl	800052c <Get_Descriptor>
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800056a:	220f      	movs	r2, #15
 800056c:	4905      	ldr	r1, [pc, #20]	; (8000584 <SimulateKeyPress+0x20>)
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <SimulateKeyPress+0x24>)
 8000570:	f003 f85a 	bl	8003628 <USBD_CUSTOM_HID_SendReport>
    if((recv_buffer[0]&0x02) != 0x02)
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <SimulateKeyPress+0x28>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	079b      	lsls	r3, r3, #30
 800057a:	d402      	bmi.n	8000582 <SimulateKeyPress+0x1e>
    	NeedRollBack = 1;
 800057c:	2201      	movs	r2, #1
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <SimulateKeyPress+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bd10      	pop	{r4, pc}
 8000584:	2000033d 	.word	0x2000033d
 8000588:	20000488 	.word	0x20000488
 800058c:	2000033c 	.word	0x2000033c
 8000590:	20000334 	.word	0x20000334

08000594 <SimulateKeyRelease>:
void SimulateKeyRelease(){
 8000594:	b570      	push	{r4, r5, r6, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000596:	250f      	movs	r5, #15
 8000598:	4c05      	ldr	r4, [pc, #20]	; (80005b0 <SimulateKeyRelease+0x1c>)
 800059a:	002a      	movs	r2, r5
 800059c:	2100      	movs	r1, #0
 800059e:	0020      	movs	r0, r4
 80005a0:	f003 fe2f 	bl	8004202 <memset>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005a4:	002a      	movs	r2, r5
 80005a6:	0021      	movs	r1, r4
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <SimulateKeyRelease+0x20>)
 80005aa:	f003 f83d 	bl	8003628 <USBD_CUSTOM_HID_SendReport>
}
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	2000033d 	.word	0x2000033d
 80005b4:	20000488 	.word	0x20000488

080005b8 <SimulateKeyStroke>:
void SimulateKeyStroke(uint8_t ascii){
 80005b8:	b510      	push	{r4, lr}
	SimulateKeyPress(ascii);
 80005ba:	f7ff ffd3 	bl	8000564 <SimulateKeyPress>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80005be:	2023      	movs	r0, #35	; 0x23
 80005c0:	f000 fa80 	bl	8000ac4 <HAL_Delay>
    SimulateKeyRelease();
 80005c4:	f7ff ffe6 	bl	8000594 <SimulateKeyRelease>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80005c8:	2023      	movs	r0, #35	; 0x23
 80005ca:	f000 fa7b 	bl	8000ac4 <HAL_Delay>
}
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <SimulateKeyStrokes>:
void SimulateKeyStrokes(char *str, int len, int *cntNow){
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	000d      	movs	r5, r1
 80005d6:	0014      	movs	r4, r2
    	if((recv_buffer[0]&0x02) != 0x02){
 80005d8:	2702      	movs	r7, #2
    for(; *cntNow < len; (*cntNow)++){
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	42ab      	cmp	r3, r5
 80005de:	db00      	blt.n	80005e2 <SimulateKeyStrokes+0x12>
}
 80005e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	if((recv_buffer[0]&0x02) != 0x02){
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <SimulateKeyStrokes+0x48>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	423b      	tst	r3, r7
 80005e8:	d102      	bne.n	80005f0 <SimulateKeyStrokes+0x20>
    		SimulateKeyStroke(128);
 80005ea:	2080      	movs	r0, #128	; 0x80
 80005ec:	f7ff ffe4 	bl	80005b8 <SimulateKeyStroke>
    	SimulateKeyStroke(str[*cntNow]);
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	5cf0      	ldrb	r0, [r6, r3]
 80005f4:	f7ff ffe0 	bl	80005b8 <SimulateKeyStroke>
    	if(NeedRollBack == 1){
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <SimulateKeyStrokes+0x4c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d107      	bne.n	8000610 <SimulateKeyStrokes+0x40>
    		NeedRollBack = 0;
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
    		(*cntNow)--;
 8000604:	6823      	ldr	r3, [r4, #0]
    		SimulateKeyStroke(129);
 8000606:	2081      	movs	r0, #129	; 0x81
    		(*cntNow)--;
 8000608:	3b01      	subs	r3, #1
 800060a:	6023      	str	r3, [r4, #0]
    		SimulateKeyStroke(129);
 800060c:	f7ff ffd4 	bl	80005b8 <SimulateKeyStroke>
    for(; *cntNow < len; (*cntNow)++){
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	6023      	str	r3, [r4, #0]
 8000616:	e7e0      	b.n	80005da <SimulateKeyStrokes+0xa>
 8000618:	2000033c 	.word	0x2000033c
 800061c:	20000334 	.word	0x20000334

08000620 <Convert2CapsMap>:
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000620:	0002      	movs	r2, r0
 8000622:	0003      	movs	r3, r0
void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000624:	b510      	push	{r4, lr}
		LowerCaseMap[cnt] &= 0xf7;
 8000626:	2408      	movs	r4, #8
 8000628:	3241      	adds	r2, #65	; 0x41
 800062a:	3361      	adds	r3, #97	; 0x61
 800062c:	307b      	adds	r0, #123	; 0x7b
 800062e:	7811      	ldrb	r1, [r2, #0]
 8000630:	43a1      	bics	r1, r4
 8000632:	7011      	strb	r1, [r2, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000634:	7819      	ldrb	r1, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000636:	3201      	adds	r2, #1
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000638:	4321      	orrs	r1, r4
 800063a:	7019      	strb	r1, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 800063c:	3301      	adds	r3, #1
 800063e:	4283      	cmp	r3, r0
 8000640:	d1f5      	bne.n	800062e <Convert2CapsMap+0xe>
}
 8000642:	bd10      	pop	{r4, pc}

08000644 <InterruptTrap>:
	if(*InterruptFlag == 1){
 8000644:	6803      	ldr	r3, [r0, #0]
void InterruptTrap(int *InterruptFlag){
 8000646:	b510      	push	{r4, lr}
	if(*InterruptFlag == 1){
 8000648:	2b01      	cmp	r3, #1
 800064a:	d10b      	bne.n	8000664 <InterruptTrap+0x20>
		*InterruptFlag = 0;
 800064c:	2200      	movs	r2, #0
 800064e:	6002      	str	r2, [r0, #0]
		TIM2->EGR |= TIM_EGR_UG;
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	05d2      	lsls	r2, r2, #23
 8000654:	6951      	ldr	r1, [r2, #20]
 8000656:	430b      	orrs	r3, r1
 8000658:	6153      	str	r3, [r2, #20]
		MX_TIM2_Init();
 800065a:	f000 f905 	bl	8000868 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <InterruptTrap+0x24>)
 8000660:	f001 fe0c 	bl	800227c <HAL_TIM_Base_Start_IT>
}
 8000664:	bd10      	pop	{r4, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	200003b0 	.word	0x200003b0

0800066c <main>:
{
 800066c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800066e:	f000 fa07 	bl	8000a80 <HAL_Init>
  SystemClock_Config();
 8000672:	f7ff ff23 	bl	80004bc <SystemClock_Config>
  MX_GPIO_Init();
 8000676:	f7ff fed9 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067a:	f000 f94d 	bl	8000918 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800067e:	f003 fbdf 	bl	8003e40 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000682:	f000 f8f1 	bl	8000868 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000686:	f000 f865 	bl	8000754 <MX_SPI1_Init>
  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800068a:	220f      	movs	r2, #15
 800068c:	2100      	movs	r1, #0
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0x64>)
 8000690:	f003 fdb7 	bl	8004202 <memset>
		  HAL_Delay(500);
 8000694:	25fa      	movs	r5, #250	; 0xfa
  Convert2CapsMap(Map);
 8000696:	480f      	ldr	r0, [pc, #60]	; (80006d4 <main+0x68>)
 8000698:	f7ff ffc2 	bl	8000620 <Convert2CapsMap>
  int flag = 1;
 800069c:	2401      	movs	r4, #1
		  HAL_Delay(500);
 800069e:	006d      	lsls	r5, r5, #1
	  InterruptTrap(&InterruptFlag);
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0x6c>)
 80006a2:	f7ff ffcf 	bl	8000644 <InterruptTrap>
	  if(flag == 1){
 80006a6:	2c01      	cmp	r4, #1
 80006a8:	d1fa      	bne.n	80006a0 <main+0x34>
		  HAL_Delay(500);
 80006aa:	0028      	movs	r0, r5
 80006ac:	f000 fa0a 	bl	8000ac4 <HAL_Delay>
		  strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <main+0x70>)
 80006b2:	490b      	ldr	r1, [pc, #44]	; (80006e0 <main+0x74>)
 80006b4:	0020      	movs	r0, r4
 80006b6:	f003 fdd1 	bl	800425c <strcpy>
		  SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 80006ba:	0020      	movs	r0, r4
 80006bc:	f7ff fd24 	bl	8000108 <strlen>
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <main+0x78>)
 80006c2:	0001      	movs	r1, r0
 80006c4:	0020      	movs	r0, r4
 80006c6:	f7ff ff83 	bl	80005d0 <SimulateKeyStrokes>
		  flag = 0;
 80006ca:	2400      	movs	r4, #0
 80006cc:	e7e8      	b.n	80006a0 <main+0x34>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	2000033d 	.word	0x2000033d
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000330 	.word	0x20000330
 80006dc:	2000022c 	.word	0x2000022c
 80006e0:	08004284 	.word	0x08004284
 80006e4:	20000338 	.word	0x20000338

080006e8 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x54>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006ea:	b510      	push	{r4, lr}
	if(htim == &htim2){
 80006ec:	4283      	cmp	r3, r0
 80006ee:	d111      	bne.n	8000714 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(InterruptCnt == 0){
 80006f0:	4c13      	ldr	r4, [pc, #76]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10e      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x2e>
			Get_Descriptor(128);
 80006f8:	2080      	movs	r0, #128	; 0x80
 80006fa:	f7ff ff17 	bl	800052c <Get_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80006fe:	220f      	movs	r2, #15
 8000700:	4910      	ldr	r1, [pc, #64]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000704:	f002 ff90 	bl	8003628 <USBD_CUSTOM_HID_SendReport>
		InterruptCnt = (InterruptCnt+1)%3;
 8000708:	6820      	ldr	r0, [r4, #0]
 800070a:	2103      	movs	r1, #3
 800070c:	3001      	adds	r0, #1
 800070e:	f7ff fe87 	bl	8000420 <__aeabi_idivmod>
 8000712:	6021      	str	r1, [r4, #0]
}
 8000714:	bd10      	pop	{r4, pc}
		}else if(InterruptCnt == 1){
 8000716:	2b01      	cmp	r3, #1
 8000718:	d109      	bne.n	800072e <HAL_TIM_PeriodElapsedCallback+0x46>
			SimulateKeyRelease();
 800071a:	f7ff ff3b 	bl	8000594 <SimulateKeyRelease>
			if((recv_buffer[0]&0x02) != 0x02)
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	079b      	lsls	r3, r3, #30
 8000724:	d4f0      	bmi.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x20>
				InterruptCnt = -1;
 8000726:	2301      	movs	r3, #1
 8000728:	425b      	negs	r3, r3
 800072a:	6023      	str	r3, [r4, #0]
 800072c:	e7ec      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x20>
			TIM2->CR1 &= ~TIM_CR1_CEN;
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	2101      	movs	r1, #1
 8000732:	05d2      	lsls	r2, r2, #23
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	438b      	bics	r3, r1
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e7e5      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x20>
 800073c:	200003b0 	.word	0x200003b0
 8000740:	2000032c 	.word	0x2000032c
 8000744:	2000033d 	.word	0x2000033d
 8000748:	20000488 	.word	0x20000488
 800074c:	2000033c 	.word	0x2000033c

08000750 <Error_Handler>:
 8000750:	b672      	cpsid	i
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x2>

08000754 <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_SPI1_Init+0x48>)
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI1_Init+0x4c>)
{
 800075a:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800075c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000764:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000770:	3ad9      	subs	r2, #217	; 0xd9
 8000772:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000774:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800077a:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000780:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000782:	3a21      	subs	r2, #33	; 0x21
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000784:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000786:	3308      	adds	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8000788:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800078a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078c:	f001 fcfe 	bl	800218c <HAL_SPI_Init>
 8000790:	2800      	cmp	r0, #0
 8000792:	d001      	beq.n	8000798 <MX_SPI1_Init+0x44>
  {
    Error_Handler();
 8000794:	f7ff ffdc 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	2000034c 	.word	0x2000034c
 80007a0:	40013000 	.word	0x40013000

080007a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007a4:	b510      	push	{r4, lr}
 80007a6:	0004      	movs	r4, r0
 80007a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	2214      	movs	r2, #20
 80007ac:	2100      	movs	r1, #0
 80007ae:	a803      	add	r0, sp, #12
 80007b0:	f003 fd27 	bl	8004202 <memset>
  if(spiHandle->Instance==SPI1)
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_SPI_MspInit+0x58>)
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d11d      	bne.n	80007f8 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_SPI_MspInit+0x5c>)
 80007c0:	0149      	lsls	r1, r1, #5
 80007c2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c6:	430a      	orrs	r2, r1
 80007c8:	619a      	str	r2, [r3, #24]
 80007ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ce:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	0289      	lsls	r1, r1, #10
 80007da:	430a      	orrs	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	400b      	ands	r3, r1
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	23e0      	movs	r3, #224	; 0xe0
 80007e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	3bde      	subs	r3, #222	; 0xde
 80007ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	3301      	adds	r3, #1
 80007f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f000 f9c8 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007f8:	b008      	add	sp, #32
 80007fa:	bd10      	pop	{r4, pc}
 80007fc:	40013000 	.word	0x40013000
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000804:	2101      	movs	r1, #1
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_MspInit+0x2c>)
{
 8000808:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	699a      	ldr	r2, [r3, #24]
 800080c:	430a      	orrs	r2, r1
 800080e:	619a      	str	r2, [r3, #24]
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	0549      	lsls	r1, r1, #21
 800081e:	430a      	orrs	r2, r1
 8000820:	61da      	str	r2, [r3, #28]
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	400b      	ands	r3, r1
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	b002      	add	sp, #8
 800082c:	4770      	bx	lr
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler>

08000836 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler>

08000838 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f92f 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bd10      	pop	{r4, pc}

08000844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000844:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM2_IRQHandler+0xc>)
 8000848:	f001 fd48 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084c:	bd10      	pop	{r4, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	200003b0 	.word	0x200003b0

08000854 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000854:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000856:	4802      	ldr	r0, [pc, #8]	; (8000860 <USB_IRQHandler+0xc>)
 8000858:	f000 fade 	bl	8000e18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800085c:	bd10      	pop	{r4, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000094c 	.word	0x2000094c

08000864 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000864:	4770      	bx	lr
	...

08000868 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000868:	b510      	push	{r4, lr}
 800086a:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086c:	2210      	movs	r2, #16
 800086e:	2100      	movs	r1, #0
 8000870:	a802      	add	r0, sp, #8
 8000872:	f003 fcc6 	bl	8004202 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	2208      	movs	r2, #8
 8000878:	2100      	movs	r1, #0
 800087a:	4668      	mov	r0, sp
 800087c:	f003 fcc1 	bl	8004202 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	4c16      	ldr	r4, [pc, #88]	; (80008dc <MX_TIM2_Init+0x74>)
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 7199;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM2_Init+0x78>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 399;
 800088a:	2290      	movs	r2, #144	; 0x90
  htim2.Init.Prescaler = 7199;
 800088c:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	2300      	movs	r3, #0
  htim2.Init.Period = 399;
 8000890:	32ff      	adds	r2, #255	; 0xff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000896:	0020      	movs	r0, r4
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	3380      	adds	r3, #128	; 0x80
  htim2.Init.Period = 399;
 800089a:	60e2      	str	r2, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089e:	f001 fe09 	bl	80024b4 <HAL_TIM_Base_Init>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x42>
  {
    Error_Handler();
 80008a6:	f7ff ff53 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ac:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b0:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b4:	f001 fe32 	bl	800251c <HAL_TIM_ConfigClockSource>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008bc:	f7ff ff48 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c2:	4669      	mov	r1, sp
 80008c4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	f001 fec1 	bl	8002650 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f7ff ff3d 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d6:	b006      	add	sp, #24
 80008d8:	bd10      	pop	{r4, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200003b0 	.word	0x200003b0
 80008e0:	00001c1f 	.word	0x00001c1f

080008e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80008e4:	2380      	movs	r3, #128	; 0x80
{
 80008e6:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80008e8:	6802      	ldr	r2, [r0, #0]
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d110      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f0:	2101      	movs	r1, #1
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_TIM_Base_MspInit+0x30>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008f4:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	400b      	ands	r3, r1
 8000902:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000904:	0011      	movs	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000906:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000908:	f000 f8ee 	bl	8000ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800090c:	200f      	movs	r0, #15
 800090e:	f000 f915 	bl	8000b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000912:	bd07      	pop	{r0, r1, r2, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x30>)
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x34>)
{
 800091c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800091e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8000920:	2396      	movs	r3, #150	; 0x96
 8000922:	021b      	lsls	r3, r3, #8
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 38400;
 8000926:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000928:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000930:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	f002 f88b 	bl	8002a54 <HAL_UART_Init>
 800093e:	2800      	cmp	r0, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8000942:	f7ff ff05 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bd10      	pop	{r4, pc}
 8000948:	200003f8 	.word	0x200003f8
 800094c:	40004400 	.word	0x40004400

08000950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000950:	b510      	push	{r4, lr}
 8000952:	0004      	movs	r4, r0
 8000954:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	2214      	movs	r2, #20
 8000958:	2100      	movs	r1, #0
 800095a:	a803      	add	r0, sp, #12
 800095c:	f003 fc51 	bl	8004202 <memset>
  if(uartHandle->Instance==USART2)
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0x58>)
 8000962:	6822      	ldr	r2, [r4, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d11d      	bne.n	80009a4 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x5c>)
 800096c:	0292      	lsls	r2, r2, #10
 800096e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	4311      	orrs	r1, r2
 8000974:	61d9      	str	r1, [r3, #28]
 8000976:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800097a:	4011      	ands	r1, r2
 800097c:	9101      	str	r1, [sp, #4]
 800097e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	6959      	ldr	r1, [r3, #20]
 8000982:	4311      	orrs	r1, r2
 8000984:	6159      	str	r1, [r3, #20]
 8000986:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4013      	ands	r3, r2
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_UART_MspInit+0x60>)
 8000992:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	3301      	adds	r3, #1
 800099a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800099c:	3b02      	subs	r3, #2
 800099e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f000 f8f2 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a4:	b008      	add	sp, #32
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	00008004 	.word	0x00008004

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b8:	f7ff ff54 	bl	8000864 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <LoopForever+0x6>)
    LDR R1, [R0]
 80009be:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009c0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <LoopForever+0xa>)
    CMP R1, R2
 80009c4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009c6:	d105      	bne.n	80009d4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009ca:	4912      	ldr	r1, [pc, #72]	; (8000a14 <LoopForever+0x12>)
    STR R1, [R0]
 80009cc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009d0:	4912      	ldr	r1, [pc, #72]	; (8000a1c <LoopForever+0x1a>)
    STR R1, [R0]
 80009d2:	6001      	str	r1, [r0, #0]

080009d4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009d6:	4913      	ldr	r1, [pc, #76]	; (8000a24 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <LoopForever+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009ec:	4c10      	ldr	r4, [pc, #64]	; (8000a30 <LoopForever+0x2e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009fa:	f003 fc0b 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fe35 	bl	800066c <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   r0, =_estack
 8000a04:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a08:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a0c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a10:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a14:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a18:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a1c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8000a28:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8000a2c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000a30:	20000c68 	.word	0x20000c68

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	20fa      	movs	r0, #250	; 0xfa
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_InitTick+0x3c>)
 8000a40:	0080      	lsls	r0, r0, #2
 8000a42:	7819      	ldrb	r1, [r3, #0]
 8000a44:	f7ff fb7c 	bl	8000140 <__udivsi3>
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <HAL_InitTick+0x40>)
 8000a4a:	0001      	movs	r1, r0
 8000a4c:	6820      	ldr	r0, [r4, #0]
 8000a4e:	f7ff fb77 	bl	8000140 <__udivsi3>
 8000a52:	f000 f87f 	bl	8000b54 <HAL_SYSTICK_Config>
 8000a56:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d109      	bne.n	8000a72 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	2d03      	cmp	r5, #3
 8000a60:	d807      	bhi.n	8000a72 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	3802      	subs	r0, #2
 8000a64:	0022      	movs	r2, r4
 8000a66:	0029      	movs	r1, r5
 8000a68:	f000 f83e 	bl	8000ae8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_InitTick+0x44>)
 8000a70:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	20000088 	.word	0x20000088
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	2310      	movs	r3, #16
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_Init+0x1c>)
{
 8000a84:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a86:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a88:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	f7ff ffd3 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000a92:	f7ff feb7 	bl	8000804 <HAL_MspInit>
}
 8000a96:	2000      	movs	r0, #0
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x10>)
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_IncTick+0x14>)
 8000aa4:	6811      	ldr	r1, [r2, #0]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	185b      	adds	r3, r3, r1
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	4770      	bx	lr
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000480 	.word	0x20000480
 8000ab4:	20000088 	.word	0x20000088

08000ab8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <HAL_GetTick+0x8>)
 8000aba:	6818      	ldr	r0, [r3, #0]
}
 8000abc:	4770      	bx	lr
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000480 	.word	0x20000480

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff fff6 	bl	8000ab8 <HAL_GetTick>
 8000acc:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	1c63      	adds	r3, r4, #1
 8000ad0:	d002      	beq.n	8000ad8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_Delay+0x20>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	42a0      	cmp	r0, r4
 8000ae0:	d3fa      	bcc.n	8000ad8 <HAL_Delay+0x14>
  {
  }
}
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	20000088 	.word	0x20000088

08000ae8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aea:	25ff      	movs	r5, #255	; 0xff
 8000aec:	2403      	movs	r4, #3
 8000aee:	002a      	movs	r2, r5
 8000af0:	4004      	ands	r4, r0
 8000af2:	00e4      	lsls	r4, r4, #3
 8000af4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af6:	0189      	lsls	r1, r1, #6
 8000af8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afe:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000b00:	2800      	cmp	r0, #0
 8000b02:	db0a      	blt.n	8000b1a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	24c0      	movs	r4, #192	; 0xc0
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_NVIC_SetPriority+0x4c>)
 8000b08:	0880      	lsrs	r0, r0, #2
 8000b0a:	0080      	lsls	r0, r0, #2
 8000b0c:	18c0      	adds	r0, r0, r3
 8000b0e:	00a4      	lsls	r4, r4, #2
 8000b10:	5903      	ldr	r3, [r0, r4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	430b      	orrs	r3, r1
 8000b16:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b18:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	4003      	ands	r3, r0
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_NVIC_SetPriority+0x50>)
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	181b      	adds	r3, r3, r0
 8000b28:	69d8      	ldr	r0, [r3, #28]
 8000b2a:	4002      	ands	r2, r0
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	61da      	str	r2, [r3, #28]
 8000b30:	e7f2      	b.n	8000b18 <HAL_NVIC_SetPriority+0x30>
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	db05      	blt.n	8000b4c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b40:	231f      	movs	r3, #31
 8000b42:	4018      	ands	r0, r3
 8000b44:	3b1e      	subs	r3, #30
 8000b46:	4083      	lsls	r3, r0
 8000b48:	4a01      	ldr	r2, [pc, #4]	; (8000b50 <HAL_NVIC_EnableIRQ+0x14>)
 8000b4a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b4c:	4770      	bx	lr
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	1e43      	subs	r3, r0, #1
 8000b58:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d20d      	bcs.n	8000b7c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	6a03      	ldr	r3, [r0, #32]
 8000b6a:	0609      	lsls	r1, r1, #24
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b7c:	4770      	bx	lr
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000e010 	.word	0xe000e010
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000b88:	2300      	movs	r3, #0
{
 8000b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	680a      	ldr	r2, [r1, #0]
 8000b90:	0014      	movs	r4, r2
 8000b92:	40dc      	lsrs	r4, r3
 8000b94:	d101      	bne.n	8000b9a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000b96:	b007      	add	sp, #28
 8000b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b9a:	2501      	movs	r5, #1
 8000b9c:	0014      	movs	r4, r2
 8000b9e:	409d      	lsls	r5, r3
 8000ba0:	402c      	ands	r4, r5
 8000ba2:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000ba4:	422a      	tst	r2, r5
 8000ba6:	d100      	bne.n	8000baa <HAL_GPIO_Init+0x22>
 8000ba8:	e094      	b.n	8000cd4 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000baa:	684a      	ldr	r2, [r1, #4]
 8000bac:	005f      	lsls	r7, r3, #1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	4664      	mov	r4, ip
 8000bb4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bb6:	2403      	movs	r4, #3
 8000bb8:	40bc      	lsls	r4, r7
 8000bba:	43e4      	mvns	r4, r4
 8000bbc:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bbe:	1e54      	subs	r4, r2, #1
 8000bc0:	2c01      	cmp	r4, #1
 8000bc2:	d82e      	bhi.n	8000c22 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000bc4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc6:	9c01      	ldr	r4, [sp, #4]
 8000bc8:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bca:	68cc      	ldr	r4, [r1, #12]
 8000bcc:	40bc      	lsls	r4, r7
 8000bce:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000bd0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bd2:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd4:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	43ac      	bics	r4, r5
 8000bd8:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	4664      	mov	r4, ip
 8000bdc:	0924      	lsrs	r4, r4, #4
 8000bde:	4034      	ands	r4, r6
 8000be0:	409c      	lsls	r4, r3
 8000be2:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000be4:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000be6:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000be8:	9c01      	ldr	r4, [sp, #4]
 8000bea:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bec:	688c      	ldr	r4, [r1, #8]
 8000bee:	40bc      	lsls	r4, r7
 8000bf0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000bf2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf4:	2a02      	cmp	r2, #2
 8000bf6:	d116      	bne.n	8000c26 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	2507      	movs	r5, #7
 8000bfa:	260f      	movs	r6, #15
 8000bfc:	401d      	ands	r5, r3
 8000bfe:	00ad      	lsls	r5, r5, #2
 8000c00:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000c02:	08dc      	lsrs	r4, r3, #3
 8000c04:	00a4      	lsls	r4, r4, #2
 8000c06:	1904      	adds	r4, r0, r4
 8000c08:	9402      	str	r4, [sp, #8]
 8000c0a:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c0c:	9603      	str	r6, [sp, #12]
 8000c0e:	0026      	movs	r6, r4
 8000c10:	9c03      	ldr	r4, [sp, #12]
 8000c12:	43a6      	bics	r6, r4
 8000c14:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	690e      	ldr	r6, [r1, #16]
 8000c18:	40ae      	lsls	r6, r5
 8000c1a:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000c1c:	9c02      	ldr	r4, [sp, #8]
 8000c1e:	6226      	str	r6, [r4, #32]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c22:	2a03      	cmp	r2, #3
 8000c24:	d1df      	bne.n	8000be6 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c26:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000c28:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c2a:	9d01      	ldr	r5, [sp, #4]
 8000c2c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c2e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c30:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 8000c32:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c34:	4662      	mov	r2, ip
 8000c36:	02a4      	lsls	r4, r4, #10
 8000c38:	4222      	tst	r2, r4
 8000c3a:	d04b      	beq.n	8000cd4 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	2501      	movs	r5, #1
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c40:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c44:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	432c      	orrs	r4, r5
 8000c48:	6194      	str	r4, [r2, #24]
 8000c4a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c4c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	402a      	ands	r2, r5
 8000c50:	9205      	str	r2, [sp, #20]
 8000c52:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <HAL_GPIO_Init+0x154>)
 8000c56:	00a4      	lsls	r4, r4, #2
 8000c58:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	3502      	adds	r5, #2
 8000c5e:	401d      	ands	r5, r3
 8000c60:	00ad      	lsls	r5, r5, #2
 8000c62:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c64:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c68:	2200      	movs	r2, #0
 8000c6a:	42b8      	cmp	r0, r7
 8000c6c:	d008      	beq.n	8000c80 <HAL_GPIO_Init+0xf8>
 8000c6e:	4f1c      	ldr	r7, [pc, #112]	; (8000ce0 <HAL_GPIO_Init+0x158>)
 8000c70:	3201      	adds	r2, #1
 8000c72:	42b8      	cmp	r0, r7
 8000c74:	d004      	beq.n	8000c80 <HAL_GPIO_Init+0xf8>
 8000c76:	4f1b      	ldr	r7, [pc, #108]	; (8000ce4 <HAL_GPIO_Init+0x15c>)
 8000c78:	3201      	adds	r2, #1
 8000c7a:	42b8      	cmp	r0, r7
 8000c7c:	d000      	beq.n	8000c80 <HAL_GPIO_Init+0xf8>
 8000c7e:	3203      	adds	r2, #3
 8000c80:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c82:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c86:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000c8a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000c8c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000c8e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000c90:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000c92:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c94:	02ff      	lsls	r7, r7, #11
 8000c96:	d401      	bmi.n	8000c9c <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000c98:	0035      	movs	r5, r6
 8000c9a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000c9e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000ca0:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000ca2:	9d00      	ldr	r5, [sp, #0]
 8000ca4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca6:	02bf      	lsls	r7, r7, #10
 8000ca8:	d401      	bmi.n	8000cae <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000caa:	0035      	movs	r5, r6
 8000cac:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cae:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000cb0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000cb2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000cb4:	9d00      	ldr	r5, [sp, #0]
 8000cb6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb8:	03bf      	lsls	r7, r7, #14
 8000cba:	d401      	bmi.n	8000cc0 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000cbc:	0035      	movs	r5, r6
 8000cbe:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000cc2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000cc4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000cc6:	9e00      	ldr	r6, [sp, #0]
 8000cc8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cca:	03ff      	lsls	r7, r7, #15
 8000ccc:	d401      	bmi.n	8000cd2 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8000cce:	4025      	ands	r5, r4
 8000cd0:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000cd2:	6016      	str	r6, [r2, #0]
    position++;
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	e75a      	b.n	8000b8e <HAL_GPIO_Init+0x6>
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cf2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cf4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000cf6:	e7fc      	b.n	8000cf2 <HAL_GPIO_WritePin+0x6>

08000cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000cfc:	2501      	movs	r5, #1
{
 8000cfe:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d032      	beq.n	8000d6a <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d04:	4d30      	ldr	r5, [pc, #192]	; (8000dc8 <HAL_PCD_Init+0xd0>)
 8000d06:	5d43      	ldrb	r3, [r0, r5]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d0e:	23aa      	movs	r3, #170	; 0xaa
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d14:	f003 f95c 	bl	8003fd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	f001 fed5 	bl	8002acc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d22:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d24:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d26:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d28:	6860      	ldr	r0, [r4, #4]
 8000d2a:	4283      	cmp	r3, r0
 8000d2c:	d320      	bcc.n	8000d70 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d2e:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d30:	2628      	movs	r6, #40	; 0x28
 8000d32:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d833      	bhi.n	8000da0 <HAL_PCD_Init+0xa8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d38:	0023      	movs	r3, r4
 8000d3a:	466a      	mov	r2, sp
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000d40:	c243      	stmia	r2!, {r0, r1, r6}
 8000d42:	cb03      	ldmia	r3!, {r0, r1}
 8000d44:	c203      	stmia	r2!, {r0, r1}
 8000d46:	68a2      	ldr	r2, [r4, #8]
 8000d48:	68e3      	ldr	r3, [r4, #12]
 8000d4a:	6861      	ldr	r1, [r4, #4]
 8000d4c:	6820      	ldr	r0, [r4, #0]
 8000d4e:	f001 fec7 	bl	8002ae0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	1d62      	adds	r2, r4, #5
 8000d56:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	5562      	strb	r2, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d5c:	69e2      	ldr	r2, [r4, #28]
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000d5e:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d102      	bne.n	8000d6a <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d64:	0020      	movs	r0, r4
 8000d66:	f000 fe43 	bl	80019f0 <HAL_PCDEx_ActivateLPM>
}
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	b007      	add	sp, #28
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000d70:	2629      	movs	r6, #41	; 0x29
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	46b4      	mov	ip, r6
 8000d76:	435a      	muls	r2, r3
 8000d78:	18a2      	adds	r2, r4, r2
 8000d7a:	4494      	add	ip, r2
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000d80:	2628      	movs	r6, #40	; 0x28
 8000d82:	46b4      	mov	ip, r6
 8000d84:	4494      	add	ip, r2
 8000d86:	4666      	mov	r6, ip
 8000d88:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d8a:	262b      	movs	r6, #43	; 0x2b
 8000d8c:	46b4      	mov	ip, r6
 8000d8e:	4494      	add	ip, r2
 8000d90:	4666      	mov	r6, ip
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d92:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d94:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d96:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d98:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d9a:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d9c:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9e:	e7c4      	b.n	8000d2a <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000da0:	0033      	movs	r3, r6
 8000da2:	4353      	muls	r3, r2
 8000da4:	18e3      	adds	r3, r4, r3
 8000da6:	001f      	movs	r7, r3
 8000da8:	376a      	adds	r7, #106	; 0x6a
 8000daa:	37ff      	adds	r7, #255	; 0xff
 8000dac:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000dae:	3f01      	subs	r7, #1
 8000db0:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000db2:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000db4:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db6:	3f6c      	subs	r7, #108	; 0x6c
 8000db8:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dba:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dbc:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dbe:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc0:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc2:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dc4:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc6:	e7b5      	b.n	8000d34 <HAL_PCD_Init+0x3c>
 8000dc8:	000002a9 	.word	0x000002a9

08000dcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dcc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000dce:	25aa      	movs	r5, #170	; 0xaa
 8000dd0:	00ad      	lsls	r5, r5, #2
 8000dd2:	5d43      	ldrb	r3, [r0, r5]
{
 8000dd4:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d009      	beq.n	8000df0 <HAL_PCD_Start+0x24>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	f001 fe69 	bl	8002ab8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	f002 f877 	bl	8002eda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dec:	2000      	movs	r0, #0
 8000dee:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000df0:	bd70      	pop	{r4, r5, r6, pc}

08000df2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000df2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000df4:	25aa      	movs	r5, #170	; 0xaa
 8000df6:	00ad      	lsls	r5, r5, #2
 8000df8:	5d43      	ldrb	r3, [r0, r5]
{
 8000dfa:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d008      	beq.n	8000e14 <HAL_PCD_SetAddress+0x22>
 8000e02:	2301      	movs	r3, #1
 8000e04:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 8000e06:	1d63      	adds	r3, r4, #5
 8000e08:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e0a:	6820      	ldr	r0, [r4, #0]
 8000e0c:	f002 f85e 	bl	8002ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e10:	2000      	movs	r0, #0
 8000e12:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e18 <HAL_PCD_IRQHandler>:
{
 8000e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1a:	0004      	movs	r4, r0
 8000e1c:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e1e:	6800      	ldr	r0, [r0, #0]
 8000e20:	f002 f863 	bl	8002eea <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	0005      	movs	r5, r0
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	401d      	ands	r5, r3
 8000e2c:	4218      	tst	r0, r3
 8000e2e:	d101      	bne.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
 8000e30:	f000 fc17 	bl	8001662 <HAL_PCD_IRQHandler+0x84a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000e34:	6820      	ldr	r0, [r4, #0]
 8000e36:	1d82      	adds	r2, r0, #6
 8000e38:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db01      	blt.n	8000e44 <HAL_PCD_IRQHandler+0x2c>
}
 8000e40:	b005      	add	sp, #20
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000e44:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000e46:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000e48:	4019      	ands	r1, r3
 8000e4a:	9101      	str	r1, [sp, #4]

    if (epindex == 0U)
 8000e4c:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000e4e:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8000e50:	420b      	tst	r3, r1
 8000e52:	d000      	beq.n	8000e56 <HAL_PCD_IRQHandler+0x3e>
 8000e54:	e0c3      	b.n	8000fde <HAL_PCD_IRQHandler+0x1c6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000e56:	2310      	movs	r3, #16
 8000e58:	0011      	movs	r1, r2
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	421a      	tst	r2, r3
 8000e5e:	d12a      	bne.n	8000eb6 <HAL_PCD_IRQHandler+0x9e>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e60:	8803      	ldrh	r3, [r0, #0]
 8000e62:	4ab8      	ldr	r2, [pc, #736]	; (8001144 <HAL_PCD_IRQHandler+0x32c>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	0212      	lsls	r2, r2, #8
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e6e:	0003      	movs	r3, r0
 8000e70:	3350      	adds	r3, #80	; 0x50
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	0023      	movs	r3, r4
 8000e76:	3328      	adds	r3, #40	; 0x28
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	18c3      	adds	r3, r0, r3
 8000e7e:	189b      	adds	r3, r3, r2
 8000e80:	4ab1      	ldr	r2, [pc, #708]	; (8001148 <HAL_PCD_IRQHandler+0x330>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000e82:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e84:	189b      	adds	r3, r3, r2
 8000e86:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8000e88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e8a:	059b      	lsls	r3, r3, #22
 8000e8c:	0d9b      	lsrs	r3, r3, #22
 8000e8e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000e94:	f003 f8ce 	bl	8004034 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000e98:	1d63      	adds	r3, r4, #5
 8000e9a:	7fda      	ldrb	r2, [r3, #31]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d0c9      	beq.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
 8000ea0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ea2:	6822      	ldr	r2, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d1c5      	bne.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ea8:	2580      	movs	r5, #128	; 0x80
 8000eaa:	7fd9      	ldrb	r1, [r3, #31]
 8000eac:	324c      	adds	r2, #76	; 0x4c
 8000eae:	4329      	orrs	r1, r5
 8000eb0:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8000eb2:	77d8      	strb	r0, [r3, #31]
 8000eb4:	e7be      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000eb6:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0016      	movs	r6, r2
 8000ebc:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000ebe:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000ec0:	400e      	ands	r6, r1
 8000ec2:	420a      	tst	r2, r1
 8000ec4:	d022      	beq.n	8000f0c <HAL_PCD_IRQHandler+0xf4>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	3350      	adds	r3, #80	; 0x50
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	23b4      	movs	r3, #180	; 0xb4
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000ed2:	21ac      	movs	r1, #172	; 0xac
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	18c3      	adds	r3, r0, r3
 8000ed8:	189b      	adds	r3, r3, r2
 8000eda:	4a9c      	ldr	r2, [pc, #624]	; (800114c <HAL_PCD_IRQHandler+0x334>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000edc:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	0022      	movs	r2, r4
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	3269      	adds	r2, #105	; 0x69
 8000ee6:	059b      	lsls	r3, r3, #22
 8000ee8:	0d9b      	lsrs	r3, r3, #22
 8000eea:	32ff      	adds	r2, #255	; 0xff
 8000eec:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000eee:	1861      	adds	r1, r4, r1
 8000ef0:	88d2      	ldrh	r2, [r2, #6]
 8000ef2:	f002 fa67 	bl	80033c4 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	4995      	ldr	r1, [pc, #596]	; (8001150 <HAL_PCD_IRQHandler+0x338>)
 8000efa:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000efc:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000efe:	400b      	ands	r3, r1
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	430b      	orrs	r3, r1
 8000f04:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f06:	f003 f87f 	bl	8004008 <HAL_PCD_SetupStageCallback>
 8000f0a:	e793      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db00      	blt.n	8000f14 <HAL_PCD_IRQHandler+0xfc>
 8000f12:	e78f      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f14:	8803      	ldrh	r3, [r0, #0]
 8000f16:	4a8e      	ldr	r2, [pc, #568]	; (8001150 <HAL_PCD_IRQHandler+0x338>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f18:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f22:	0003      	movs	r3, r0
 8000f24:	3350      	adds	r3, #80	; 0x50
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	23b4      	movs	r3, #180	; 0xb4
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	5ce3      	ldrb	r3, [r4, r3]
 8000f2e:	3569      	adds	r5, #105	; 0x69
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	4a85      	ldr	r2, [pc, #532]	; (800114c <HAL_PCD_IRQHandler+0x334>)
 8000f38:	35ff      	adds	r5, #255	; 0xff
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	059b      	lsls	r3, r3, #22
 8000f40:	0d9b      	lsrs	r3, r3, #22
 8000f42:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000f44:	d00d      	beq.n	8000f62 <HAL_PCD_IRQHandler+0x14a>
 8000f46:	6969      	ldr	r1, [r5, #20]
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	d00a      	beq.n	8000f62 <HAL_PCD_IRQHandler+0x14a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000f4c:	88ea      	ldrh	r2, [r5, #6]
 8000f4e:	f002 fa39 	bl	80033c4 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000f52:	696b      	ldr	r3, [r5, #20]
 8000f54:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f56:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8000f58:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f5a:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000f5c:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f5e:	f003 f85c 	bl	800401a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	880a      	ldrh	r2, [r1, #0]
 8000f66:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000f68:	0512      	lsls	r2, r2, #20
 8000f6a:	d500      	bpl.n	8000f6e <HAL_PCD_IRQHandler+0x156>
 8000f6c:	e762      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
 8000f6e:	22c0      	movs	r2, #192	; 0xc0
 8000f70:	0192      	lsls	r2, r2, #6
 8000f72:	4013      	ands	r3, r2
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_PCD_IRQHandler+0x162>
 8000f78:	e75c      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f7a:	000b      	movs	r3, r1
 8000f7c:	3350      	adds	r3, #80	; 0x50
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	4b72      	ldr	r3, [pc, #456]	; (800114c <HAL_PCD_IRQHandler+0x334>)
 8000f82:	18cb      	adds	r3, r1, r3
 8000f84:	189b      	adds	r3, r3, r2
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	0592      	lsls	r2, r2, #22
 8000f8a:	0d92      	lsrs	r2, r2, #22
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	692a      	ldr	r2, [r5, #16]
 8000f90:	2a3e      	cmp	r2, #62	; 0x3e
 8000f92:	d90c      	bls.n	8000fae <HAL_PCD_IRQHandler+0x196>
 8000f94:	251f      	movs	r5, #31
 8000f96:	0950      	lsrs	r0, r2, #5
 8000f98:	402a      	ands	r2, r5
 8000f9a:	4255      	negs	r5, r2
 8000f9c:	416a      	adcs	r2, r5
 8000f9e:	1a80      	subs	r0, r0, r2
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	0280      	lsls	r0, r0, #10
 8000fa4:	4310      	orrs	r0, r2
 8000fa6:	4a6b      	ldr	r2, [pc, #428]	; (8001154 <HAL_PCD_IRQHandler+0x33c>)
 8000fa8:	4302      	orrs	r2, r0
 8000faa:	b292      	uxth	r2, r2
 8000fac:	e005      	b.n	8000fba <HAL_PCD_IRQHandler+0x1a2>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_PCD_IRQHandler+0x1b8>
 8000fb2:	2080      	movs	r0, #128	; 0x80
 8000fb4:	881a      	ldrh	r2, [r3, #0]
 8000fb6:	0200      	lsls	r0, r0, #8
 8000fb8:	4302      	orrs	r2, r0
 8000fba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000fbc:	880a      	ldrh	r2, [r1, #0]
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_PCD_IRQHandler+0x340>)
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	4a64      	ldr	r2, [pc, #400]	; (800115c <HAL_PCD_IRQHandler+0x344>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
 8000fce:	e731      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000fd0:	2501      	movs	r5, #1
 8000fd2:	0850      	lsrs	r0, r2, #1
 8000fd4:	402a      	ands	r2, r5
 8000fd6:	1880      	adds	r0, r0, r2
 8000fd8:	0280      	lsls	r0, r0, #10
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	e7e4      	b.n	8000fa8 <HAL_PCD_IRQHandler+0x190>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	009f      	lsls	r7, r3, #2
 8000fe2:	19c2      	adds	r2, r0, r7
 8000fe4:	8813      	ldrh	r3, [r2, #0]
 8000fe6:	b299      	uxth	r1, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fe8:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000fea:	9102      	str	r1, [sp, #8]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db00      	blt.n	8000ff2 <HAL_PCD_IRQHandler+0x1da>
 8000ff0:	e0f6      	b.n	80011e0 <HAL_PCD_IRQHandler+0x3c8>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ff2:	8813      	ldrh	r3, [r2, #0]
 8000ff4:	4956      	ldr	r1, [pc, #344]	; (8001150 <HAL_PCD_IRQHandler+0x338>)
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8000ffe:	2328      	movs	r3, #40	; 0x28
 8001000:	9a01      	ldr	r2, [sp, #4]
 8001002:	4353      	muls	r3, r2
 8001004:	18e3      	adds	r3, r4, r3
 8001006:	001a      	movs	r2, r3
 8001008:	001d      	movs	r5, r3
 800100a:	3275      	adds	r2, #117	; 0x75
 800100c:	32ff      	adds	r2, #255	; 0xff
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	3569      	adds	r5, #105	; 0x69
 8001012:	35ff      	adds	r5, #255	; 0xff
 8001014:	2a00      	cmp	r2, #0
 8001016:	d11a      	bne.n	800104e <HAL_PCD_IRQHandler+0x236>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001018:	0002      	movs	r2, r0
 800101a:	3250      	adds	r2, #80	; 0x50
 800101c:	8811      	ldrh	r1, [r2, #0]
 800101e:	782a      	ldrb	r2, [r5, #0]
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	1852      	adds	r2, r2, r1
 8001024:	4949      	ldr	r1, [pc, #292]	; (800114c <HAL_PCD_IRQHandler+0x334>)
 8001026:	1812      	adds	r2, r2, r0
 8001028:	1852      	adds	r2, r2, r1
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	0592      	lsls	r2, r2, #22
 800102e:	0d95      	lsrs	r5, r2, #22
          if (count != 0U)
 8001030:	2a00      	cmp	r2, #0
 8001032:	d100      	bne.n	8001036 <HAL_PCD_IRQHandler+0x21e>
 8001034:	e0b3      	b.n	800119e <HAL_PCD_IRQHandler+0x386>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001036:	001a      	movs	r2, r3
 8001038:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800103a:	337d      	adds	r3, #125	; 0x7d
 800103c:	33ff      	adds	r3, #255	; 0xff
 800103e:	0019      	movs	r1, r3
 8001040:	32ff      	adds	r2, #255	; 0xff
 8001042:	002b      	movs	r3, r5
 8001044:	8812      	ldrh	r2, [r2, #0]
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	f002 f9bc 	bl	80033c4 <USB_ReadPMA>
 800104c:	e0a7      	b.n	800119e <HAL_PCD_IRQHandler+0x386>
          if (ep->type == EP_TYPE_BULK)
 800104e:	0019      	movs	r1, r3
 8001050:	316c      	adds	r1, #108	; 0x6c
 8001052:	31ff      	adds	r1, #255	; 0xff
 8001054:	7809      	ldrb	r1, [r1, #0]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001056:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 8001058:	2902      	cmp	r1, #2
 800105a:	d000      	beq.n	800105e <HAL_PCD_IRQHandler+0x246>
 800105c:	e084      	b.n	8001168 <HAL_PCD_IRQHandler+0x350>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800105e:	2680      	movs	r6, #128	; 0x80
 8001060:	01f6      	lsls	r6, r6, #7
 8001062:	46b4      	mov	ip, r6
 8001064:	4665      	mov	r5, ip
 8001066:	9e02      	ldr	r6, [sp, #8]
    if (ep->xfer_len >= count)
 8001068:	3381      	adds	r3, #129	; 0x81
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800106a:	402e      	ands	r6, r5
 800106c:	9603      	str	r6, [sp, #12]
 800106e:	0006      	movs	r6, r0
 8001070:	3650      	adds	r6, #80	; 0x50
 8001072:	9600      	str	r6, [sp, #0]
 8001074:	4666      	mov	r6, ip
 8001076:	9d02      	ldr	r5, [sp, #8]
    if (ep->xfer_len >= count)
 8001078:	33ff      	adds	r3, #255	; 0xff
 800107a:	6819      	ldr	r1, [r3, #0]
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800107c:	4235      	tst	r5, r6
 800107e:	d030      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x2ca>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001080:	9d00      	ldr	r5, [sp, #0]
 8001082:	882e      	ldrh	r6, [r5, #0]
 8001084:	00d5      	lsls	r5, r2, #3
 8001086:	1976      	adds	r6, r6, r5
 8001088:	4d2f      	ldr	r5, [pc, #188]	; (8001148 <HAL_PCD_IRQHandler+0x330>)
 800108a:	1836      	adds	r6, r6, r0
 800108c:	1976      	adds	r6, r6, r5
 800108e:	8835      	ldrh	r5, [r6, #0]
 8001090:	05ad      	lsls	r5, r5, #22
 8001092:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8001094:	428d      	cmp	r5, r1
 8001096:	d90d      	bls.n	80010b4 <HAL_PCD_IRQHandler+0x29c>
 8001098:	2100      	movs	r1, #0
 800109a:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800109c:	0091      	lsls	r1, r2, #2
 800109e:	1841      	adds	r1, r0, r1
 80010a0:	880e      	ldrh	r6, [r1, #0]
 80010a2:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_PCD_IRQHandler+0x340>)
 80010a4:	401e      	ands	r6, r3
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	4073      	eors	r3, r6
 80010ac:	4e2b      	ldr	r6, [pc, #172]	; (800115c <HAL_PCD_IRQHandler+0x344>)
 80010ae:	4333      	orrs	r3, r6
 80010b0:	800b      	strh	r3, [r1, #0]
 80010b2:	e002      	b.n	80010ba <HAL_PCD_IRQHandler+0x2a2>
      ep->xfer_len -= count;
 80010b4:	1b49      	subs	r1, r1, r5
 80010b6:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 80010b8:	d0f0      	beq.n	800109c <HAL_PCD_IRQHandler+0x284>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80010ba:	9b02      	ldr	r3, [sp, #8]
 80010bc:	065b      	lsls	r3, r3, #25
 80010be:	d507      	bpl.n	80010d0 <HAL_PCD_IRQHandler+0x2b8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	1882      	adds	r2, r0, r2
 80010c4:	8813      	ldrh	r3, [r2, #0]
 80010c6:	4926      	ldr	r1, [pc, #152]	; (8001160 <HAL_PCD_IRQHandler+0x348>)
 80010c8:	400b      	ands	r3, r1
 80010ca:	4926      	ldr	r1, [pc, #152]	; (8001164 <HAL_PCD_IRQHandler+0x34c>)
 80010cc:	430b      	orrs	r3, r1
 80010ce:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d064      	beq.n	800119e <HAL_PCD_IRQHandler+0x386>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010d4:	2328      	movs	r3, #40	; 0x28
 80010d6:	9a01      	ldr	r2, [sp, #4]
 80010d8:	4353      	muls	r3, r2
 80010da:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010dc:	001a      	movs	r2, r3
 80010de:	3271      	adds	r2, #113	; 0x71
 80010e0:	e7ab      	b.n	800103a <HAL_PCD_IRQHandler+0x222>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010e2:	9d00      	ldr	r5, [sp, #0]
 80010e4:	882e      	ldrh	r6, [r5, #0]
 80010e6:	00d5      	lsls	r5, r2, #3
 80010e8:	1976      	adds	r6, r6, r5
 80010ea:	4d18      	ldr	r5, [pc, #96]	; (800114c <HAL_PCD_IRQHandler+0x334>)
 80010ec:	1836      	adds	r6, r6, r0
 80010ee:	1976      	adds	r6, r6, r5
 80010f0:	8835      	ldrh	r5, [r6, #0]
 80010f2:	05ad      	lsls	r5, r5, #22
 80010f4:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80010f6:	428d      	cmp	r5, r1
 80010f8:	d90d      	bls.n	8001116 <HAL_PCD_IRQHandler+0x2fe>
 80010fa:	9903      	ldr	r1, [sp, #12]
 80010fc:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80010fe:	0091      	lsls	r1, r2, #2
 8001100:	1841      	adds	r1, r0, r1
 8001102:	880e      	ldrh	r6, [r1, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_PCD_IRQHandler+0x340>)
 8001106:	401e      	ands	r6, r3
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	019b      	lsls	r3, r3, #6
 800110c:	4073      	eors	r3, r6
 800110e:	4e13      	ldr	r6, [pc, #76]	; (800115c <HAL_PCD_IRQHandler+0x344>)
 8001110:	4333      	orrs	r3, r6
 8001112:	800b      	strh	r3, [r1, #0]
 8001114:	e002      	b.n	800111c <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8001116:	1b49      	subs	r1, r1, r5
 8001118:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 800111a:	d0f0      	beq.n	80010fe <HAL_PCD_IRQHandler+0x2e6>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800111c:	9b02      	ldr	r3, [sp, #8]
 800111e:	065b      	lsls	r3, r3, #25
 8001120:	d407      	bmi.n	8001132 <HAL_PCD_IRQHandler+0x31a>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	1882      	adds	r2, r0, r2
 8001126:	8813      	ldrh	r3, [r2, #0]
 8001128:	490d      	ldr	r1, [pc, #52]	; (8001160 <HAL_PCD_IRQHandler+0x348>)
 800112a:	400b      	ands	r3, r1
 800112c:	490d      	ldr	r1, [pc, #52]	; (8001164 <HAL_PCD_IRQHandler+0x34c>)
 800112e:	430b      	orrs	r3, r1
 8001130:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8001132:	2d00      	cmp	r5, #0
 8001134:	d033      	beq.n	800119e <HAL_PCD_IRQHandler+0x386>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001136:	2328      	movs	r3, #40	; 0x28
 8001138:	9a01      	ldr	r2, [sp, #4]
 800113a:	4353      	muls	r3, r2
 800113c:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800113e:	001a      	movs	r2, r3
 8001140:	3273      	adds	r2, #115	; 0x73
 8001142:	e77a      	b.n	800103a <HAL_PCD_IRQHandler+0x222>
 8001144:	ffff8f0f 	.word	0xffff8f0f
 8001148:	00000402 	.word	0x00000402
 800114c:	00000406 	.word	0x00000406
 8001150:	00000f8f 	.word	0x00000f8f
 8001154:	ffff8000 	.word	0xffff8000
 8001158:	ffffbf8f 	.word	0xffffbf8f
 800115c:	00008080 	.word	0x00008080
 8001160:	ffff8f8f 	.word	0xffff8f8f
 8001164:	000080c0 	.word	0x000080c0
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	1882      	adds	r2, r0, r2
 800116c:	8816      	ldrh	r6, [r2, #0]
 800116e:	49ce      	ldr	r1, [pc, #824]	; (80014a8 <HAL_PCD_IRQHandler+0x690>)
 8001170:	4031      	ands	r1, r6
 8001172:	4ece      	ldr	r6, [pc, #824]	; (80014ac <HAL_PCD_IRQHandler+0x694>)
 8001174:	4331      	orrs	r1, r6
 8001176:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001178:	782a      	ldrb	r2, [r5, #0]
 800117a:	0091      	lsls	r1, r2, #2
 800117c:	1841      	adds	r1, r0, r1
 800117e:	880d      	ldrh	r5, [r1, #0]
 8001180:	0001      	movs	r1, r0
 8001182:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001184:	8809      	ldrh	r1, [r1, #0]
 8001186:	00d2      	lsls	r2, r2, #3
 8001188:	1852      	adds	r2, r2, r1
 800118a:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800118c:	046d      	lsls	r5, r5, #17
 800118e:	d562      	bpl.n	8001256 <HAL_PCD_IRQHandler+0x43e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001190:	49c7      	ldr	r1, [pc, #796]	; (80014b0 <HAL_PCD_IRQHandler+0x698>)
 8001192:	1852      	adds	r2, r2, r1
 8001194:	8812      	ldrh	r2, [r2, #0]
 8001196:	0592      	lsls	r2, r2, #22
 8001198:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800119a:	2a00      	cmp	r2, #0
 800119c:	d19e      	bne.n	80010dc <HAL_PCD_IRQHandler+0x2c4>
        ep->xfer_count += count;
 800119e:	2328      	movs	r3, #40	; 0x28
 80011a0:	9901      	ldr	r1, [sp, #4]
 80011a2:	4359      	muls	r1, r3
 80011a4:	1862      	adds	r2, r4, r1
 80011a6:	0016      	movs	r6, r2
 80011a8:	3685      	adds	r6, #133	; 0x85
 80011aa:	36ff      	adds	r6, #255	; 0xff
 80011ac:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 80011ae:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 80011b0:	1940      	adds	r0, r0, r5
 80011b2:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 80011b4:	6830      	ldr	r0, [r6, #0]
 80011b6:	1940      	adds	r0, r0, r5
 80011b8:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011ba:	0010      	movs	r0, r2
 80011bc:	3081      	adds	r0, #129	; 0x81
 80011be:	30ff      	adds	r0, #255	; 0xff
 80011c0:	6800      	ldr	r0, [r0, #0]
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d003      	beq.n	80011ce <HAL_PCD_IRQHandler+0x3b6>
 80011c6:	32fc      	adds	r2, #252	; 0xfc
 80011c8:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80011ca:	4295      	cmp	r5, r2
 80011cc:	d24b      	bcs.n	8001266 <HAL_PCD_IRQHandler+0x44e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80011ce:	9a01      	ldr	r2, [sp, #4]
 80011d0:	0020      	movs	r0, r4
 80011d2:	4353      	muls	r3, r2
 80011d4:	18e3      	adds	r3, r4, r3
 80011d6:	3369      	adds	r3, #105	; 0x69
 80011d8:	33ff      	adds	r3, #255	; 0xff
 80011da:	7819      	ldrb	r1, [r3, #0]
 80011dc:	f002 ff1d 	bl	800401a <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	9b02      	ldr	r3, [sp, #8]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011e4:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80011e6:	4213      	tst	r3, r2
 80011e8:	d100      	bne.n	80011ec <HAL_PCD_IRQHandler+0x3d4>
 80011ea:	e623      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011ec:	19c2      	adds	r2, r0, r7
 80011ee:	8813      	ldrh	r3, [r2, #0]
 80011f0:	49b0      	ldr	r1, [pc, #704]	; (80014b4 <HAL_PCD_IRQHandler+0x69c>)
 80011f2:	9d01      	ldr	r5, [sp, #4]
 80011f4:	400b      	ands	r3, r1
 80011f6:	49b0      	ldr	r1, [pc, #704]	; (80014b8 <HAL_PCD_IRQHandler+0x6a0>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 80011fe:	2328      	movs	r3, #40	; 0x28
 8001200:	435d      	muls	r5, r3
 8001202:	1965      	adds	r5, r4, r5
 8001204:	002a      	movs	r2, r5
 8001206:	322b      	adds	r2, #43	; 0x2b
 8001208:	7811      	ldrb	r1, [r2, #0]
 800120a:	18ea      	adds	r2, r5, r3
 800120c:	2901      	cmp	r1, #1
 800120e:	d159      	bne.n	80012c4 <HAL_PCD_IRQHandler+0x4ac>
          ep->xfer_len = 0U;
 8001210:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8001212:	0029      	movs	r1, r5
          ep->xfer_len = 0U;
 8001214:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001216:	3134      	adds	r1, #52	; 0x34
 8001218:	7809      	ldrb	r1, [r1, #0]
 800121a:	4299      	cmp	r1, r3
 800121c:	d036      	beq.n	800128c <HAL_PCD_IRQHandler+0x474>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	9e02      	ldr	r6, [sp, #8]
 8001222:	9f02      	ldr	r7, [sp, #8]
 8001224:	400e      	ands	r6, r1
 8001226:	3529      	adds	r5, #41	; 0x29
 8001228:	420f      	tst	r7, r1
 800122a:	d034      	beq.n	8001296 <HAL_PCD_IRQHandler+0x47e>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800122c:	7829      	ldrb	r1, [r5, #0]
 800122e:	4299      	cmp	r1, r3
 8001230:	d120      	bne.n	8001274 <HAL_PCD_IRQHandler+0x45c>
 8001232:	0003      	movs	r3, r0
 8001234:	7811      	ldrb	r1, [r2, #0]
 8001236:	3350      	adds	r3, #80	; 0x50
 8001238:	881d      	ldrh	r5, [r3, #0]
 800123a:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <HAL_PCD_IRQHandler+0x698>)
 800123c:	00c9      	lsls	r1, r1, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800123e:	18c3      	adds	r3, r0, r3
 8001240:	195b      	adds	r3, r3, r5
 8001242:	18c9      	adds	r1, r1, r3
 8001244:	880b      	ldrh	r3, [r1, #0]
 8001246:	489c      	ldr	r0, [pc, #624]	; (80014b8 <HAL_PCD_IRQHandler+0x6a0>)
 8001248:	059b      	lsls	r3, r3, #22
 800124a:	0d9b      	lsrs	r3, r3, #22
 800124c:	800b      	strh	r3, [r1, #0]
 800124e:	880b      	ldrh	r3, [r1, #0]
 8001250:	4303      	orrs	r3, r0
 8001252:	b29b      	uxth	r3, r3
 8001254:	e019      	b.n	800128a <HAL_PCD_IRQHandler+0x472>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001256:	4999      	ldr	r1, [pc, #612]	; (80014bc <HAL_PCD_IRQHandler+0x6a4>)
 8001258:	1852      	adds	r2, r2, r1
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	0592      	lsls	r2, r2, #22
 800125e:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8001260:	2a00      	cmp	r2, #0
 8001262:	d09c      	beq.n	800119e <HAL_PCD_IRQHandler+0x386>
 8001264:	e76b      	b.n	800113e <HAL_PCD_IRQHandler+0x326>
        ep = &hpcd->OUT_ep[epindex];
 8001266:	3169      	adds	r1, #105	; 0x69
 8001268:	31ff      	adds	r1, #255	; 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800126a:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 800126c:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800126e:	f001 fe55 	bl	8002f1c <USB_EPStartXfer>
 8001272:	e7b5      	b.n	80011e0 <HAL_PCD_IRQHandler+0x3c8>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001274:	2901      	cmp	r1, #1
 8001276:	d109      	bne.n	800128c <HAL_PCD_IRQHandler+0x474>
 8001278:	0001      	movs	r1, r0
 800127a:	4e8d      	ldr	r6, [pc, #564]	; (80014b0 <HAL_PCD_IRQHandler+0x698>)
 800127c:	3150      	adds	r1, #80	; 0x50
 800127e:	880d      	ldrh	r5, [r1, #0]
 8001280:	7811      	ldrb	r1, [r2, #0]
 8001282:	1980      	adds	r0, r0, r6
 8001284:	00c9      	lsls	r1, r1, #3
 8001286:	1940      	adds	r0, r0, r5
 8001288:	1809      	adds	r1, r1, r0
 800128a:	800b      	strh	r3, [r1, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800128c:	7811      	ldrb	r1, [r2, #0]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800128e:	0020      	movs	r0, r4
 8001290:	f002 fed0 	bl	8004034 <HAL_PCD_DataInStageCallback>
 8001294:	e5ce      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001296:	782b      	ldrb	r3, [r5, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <HAL_PCD_IRQHandler+0x492>
 800129c:	0003      	movs	r3, r0
 800129e:	7811      	ldrb	r1, [r2, #0]
 80012a0:	3350      	adds	r3, #80	; 0x50
 80012a2:	881d      	ldrh	r5, [r3, #0]
 80012a4:	00c9      	lsls	r1, r1, #3
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_PCD_IRQHandler+0x6a4>)
 80012a8:	e7c9      	b.n	800123e <HAL_PCD_IRQHandler+0x426>
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d1ee      	bne.n	800128c <HAL_PCD_IRQHandler+0x474>
 80012ae:	0003      	movs	r3, r0
 80012b0:	4d82      	ldr	r5, [pc, #520]	; (80014bc <HAL_PCD_IRQHandler+0x6a4>)
 80012b2:	3350      	adds	r3, #80	; 0x50
 80012b4:	8819      	ldrh	r1, [r3, #0]
 80012b6:	7813      	ldrb	r3, [r2, #0]
 80012b8:	1940      	adds	r0, r0, r5
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1840      	adds	r0, r0, r1
 80012be:	181b      	adds	r3, r3, r0
 80012c0:	801e      	strh	r6, [r3, #0]
 80012c2:	e7e3      	b.n	800128c <HAL_PCD_IRQHandler+0x474>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012c4:	7812      	ldrb	r2, [r2, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80012c6:	9f02      	ldr	r7, [sp, #8]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012c8:	9203      	str	r2, [sp, #12]
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	9200      	str	r2, [sp, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	9902      	ldr	r1, [sp, #8]
 80012d2:	0052      	lsls	r2, r2, #1
            if (ep->xfer_len > TxPctSize)
 80012d4:	6c2e      	ldr	r6, [r5, #64]	; 0x40
          if ((wEPVal & USB_EP_KIND) == 0U)
 80012d6:	4017      	ands	r7, r2
 80012d8:	4211      	tst	r1, r2
 80012da:	d11e      	bne.n	800131a <HAL_PCD_IRQHandler+0x502>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012dc:	0002      	movs	r2, r0
 80012de:	3250      	adds	r2, #80	; 0x50
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	9900      	ldr	r1, [sp, #0]
 80012e4:	1882      	adds	r2, r0, r2
 80012e6:	1852      	adds	r2, r2, r1
 80012e8:	4971      	ldr	r1, [pc, #452]	; (80014b0 <HAL_PCD_IRQHandler+0x698>)
 80012ea:	1852      	adds	r2, r2, r1
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 80012f0:	0d92      	lsrs	r2, r2, #22
 80012f2:	42b2      	cmp	r2, r6
 80012f4:	d302      	bcc.n	80012fc <HAL_PCD_IRQHandler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012f6:	9903      	ldr	r1, [sp, #12]
 80012f8:	642f      	str	r7, [r5, #64]	; 0x40
 80012fa:	e7c8      	b.n	800128e <HAL_PCD_IRQHandler+0x476>
              ep->xfer_buff += TxPctSize;
 80012fc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
              ep->xfer_len -= TxPctSize;
 80012fe:	1ab6      	subs	r6, r6, r2
              ep->xfer_buff += TxPctSize;
 8001300:	1889      	adds	r1, r1, r2
 8001302:	63e9      	str	r1, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8001304:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001306:	642e      	str	r6, [r5, #64]	; 0x40
 8001308:	188a      	adds	r2, r1, r2
        ep = &hpcd->IN_ep[epindex];
 800130a:	9901      	ldr	r1, [sp, #4]
              ep->xfer_count += TxPctSize;
 800130c:	646a      	str	r2, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800130e:	3101      	adds	r1, #1
 8001310:	4359      	muls	r1, r3
 8001312:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001314:	f001 fe02 	bl	8002f1c <USB_EPStartXfer>
 8001318:	e58c      	b.n	8000e34 <HAL_PCD_IRQHandler+0x1c>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	0003      	movs	r3, r0
 800131e:	9f02      	ldr	r7, [sp, #8]
 8001320:	9902      	ldr	r1, [sp, #8]
 8001322:	4017      	ands	r7, r2
 8001324:	3350      	adds	r3, #80	; 0x50
 8001326:	4211      	tst	r1, r2
 8001328:	d100      	bne.n	800132c <HAL_PCD_IRQHandler+0x514>
 800132a:	e0dc      	b.n	80014e6 <HAL_PCD_IRQHandler+0x6ce>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800132c:	4960      	ldr	r1, [pc, #384]	; (80014b0 <HAL_PCD_IRQHandler+0x698>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	1847      	adds	r7, r0, r1
 8001332:	9900      	ldr	r1, [sp, #0]
 8001334:	18ba      	adds	r2, r7, r2
 8001336:	5a52      	ldrh	r2, [r2, r1]
 8001338:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len > TxPctSize)
 800133a:	0d92      	lsrs	r2, r2, #22
 800133c:	4694      	mov	ip, r2
      ep->xfer_len = 0U;
 800133e:	2200      	movs	r2, #0
    if (ep->xfer_len > TxPctSize)
 8001340:	45b4      	cmp	ip, r6
 8001342:	d201      	bcs.n	8001348 <HAL_PCD_IRQHandler+0x530>
      ep->xfer_len -= TxPctSize;
 8001344:	4662      	mov	r2, ip
 8001346:	1ab2      	subs	r2, r6, r2
 8001348:	2628      	movs	r6, #40	; 0x28
 800134a:	9901      	ldr	r1, [sp, #4]
 800134c:	434e      	muls	r6, r1
 800134e:	19a6      	adds	r6, r4, r6
 8001350:	6432      	str	r2, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001352:	2680      	movs	r6, #128	; 0x80
 8001354:	9902      	ldr	r1, [sp, #8]
 8001356:	01f6      	lsls	r6, r6, #7
 8001358:	4031      	ands	r1, r6
 800135a:	000e      	movs	r6, r1
 800135c:	2a00      	cmp	r2, #0
 800135e:	d14a      	bne.n	80013f6 <HAL_PCD_IRQHandler+0x5de>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001360:	2129      	movs	r1, #41	; 0x29
 8001362:	468c      	mov	ip, r1
 8001364:	44ac      	add	ip, r5
 8001366:	4661      	mov	r1, ip
 8001368:	7809      	ldrb	r1, [r1, #0]
 800136a:	2900      	cmp	r1, #0
 800136c:	d12e      	bne.n	80013cc <HAL_PCD_IRQHandler+0x5b4>
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	9900      	ldr	r1, [sp, #0]
 8001372:	18ba      	adds	r2, r7, r2
 8001374:	1852      	adds	r2, r2, r1
 8001376:	8817      	ldrh	r7, [r2, #0]
 8001378:	494f      	ldr	r1, [pc, #316]	; (80014b8 <HAL_PCD_IRQHandler+0x6a0>)
 800137a:	05bf      	lsls	r7, r7, #22
 800137c:	0dbf      	lsrs	r7, r7, #22
 800137e:	8017      	strh	r7, [r2, #0]
 8001380:	8817      	ldrh	r7, [r2, #0]
 8001382:	430f      	orrs	r7, r1
 8001384:	b2bf      	uxth	r7, r7
 8001386:	8017      	strh	r7, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_PCD_IRQHandler+0x6a4>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	1880      	adds	r0, r0, r2
 800138e:	18c0      	adds	r0, r0, r3
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	18c0      	adds	r0, r0, r3
 8001394:	8803      	ldrh	r3, [r0, #0]
 8001396:	059b      	lsls	r3, r3, #22
 8001398:	0d9b      	lsrs	r3, r3, #22
 800139a:	8003      	strh	r3, [r0, #0]
 800139c:	8803      	ldrh	r3, [r0, #0]
 800139e:	430b      	orrs	r3, r1
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	8003      	strh	r3, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80013a4:	0020      	movs	r0, r4
 80013a6:	9903      	ldr	r1, [sp, #12]
 80013a8:	f002 fe44 	bl	8004034 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80013ac:	2e00      	cmp	r6, #0
 80013ae:	d100      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x59a>
 80013b0:	e0d8      	b.n	8001564 <HAL_PCD_IRQHandler+0x74c>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80013b2:	002b      	movs	r3, r5
 80013b4:	3328      	adds	r3, #40	; 0x28
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	18d2      	adds	r2, r2, r3
 80013be:	8813      	ldrh	r3, [r2, #0]
 80013c0:	4939      	ldr	r1, [pc, #228]	; (80014a8 <HAL_PCD_IRQHandler+0x690>)
 80013c2:	400b      	ands	r3, r1
 80013c4:	493e      	ldr	r1, [pc, #248]	; (80014c0 <HAL_PCD_IRQHandler+0x6a8>)
 80013c6:	430b      	orrs	r3, r1
 80013c8:	8013      	strh	r3, [r2, #0]
 80013ca:	e0cb      	b.n	8001564 <HAL_PCD_IRQHandler+0x74c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013cc:	000b      	movs	r3, r1
 80013ce:	2901      	cmp	r1, #1
 80013d0:	d1e8      	bne.n	80013a4 <HAL_PCD_IRQHandler+0x58c>
 80013d2:	334f      	adds	r3, #79	; 0x4f
 80013d4:	469c      	mov	ip, r3
 80013d6:	4484      	add	ip, r0
 80013d8:	4663      	mov	r3, ip
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	9900      	ldr	r1, [sp, #0]
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	185b      	adds	r3, r3, r1
 80013e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013e4:	4663      	mov	r3, ip
 80013e6:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_PCD_IRQHandler+0x6a4>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	1840      	adds	r0, r0, r1
 80013ec:	18c0      	adds	r0, r0, r3
 80013ee:	9b00      	ldr	r3, [sp, #0]
 80013f0:	18c0      	adds	r0, r0, r3
 80013f2:	8002      	strh	r2, [r0, #0]
 80013f4:	e7d6      	b.n	80013a4 <HAL_PCD_IRQHandler+0x58c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d008      	beq.n	800140c <HAL_PCD_IRQHandler+0x5f4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80013fa:	9b03      	ldr	r3, [sp, #12]
 80013fc:	0099      	lsls	r1, r3, #2
 80013fe:	1841      	adds	r1, r0, r1
 8001400:	880a      	ldrh	r2, [r1, #0]
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_PCD_IRQHandler+0x690>)
 8001404:	4013      	ands	r3, r2
 8001406:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <HAL_PCD_IRQHandler+0x6a8>)
 8001408:	4313      	orrs	r3, r2
 800140a:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800140c:	2328      	movs	r3, #40	; 0x28
 800140e:	9a01      	ldr	r2, [sp, #4]
 8001410:	4353      	muls	r3, r2
 8001412:	18e3      	adds	r3, r4, r3
 8001414:	001e      	movs	r6, r3
 8001416:	364c      	adds	r6, #76	; 0x4c
 8001418:	7832      	ldrb	r2, [r6, #0]
 800141a:	2a01      	cmp	r2, #1
 800141c:	d000      	beq.n	8001420 <HAL_PCD_IRQHandler+0x608>
 800141e:	e0a1      	b.n	8001564 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxPctSize;
 8001420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001422:	6c99      	ldr	r1, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001424:	4462      	add	r2, ip
 8001426:	9202      	str	r2, [sp, #8]
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800142a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142c:	4462      	add	r2, ip
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001432:	4291      	cmp	r1, r2
 8001434:	d329      	bcc.n	800148a <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 8001436:	1a89      	subs	r1, r1, r2
 8001438:	6499      	str	r1, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800143a:	002b      	movs	r3, r5
 800143c:	3329      	adds	r3, #41	; 0x29
 800143e:	7819      	ldrb	r1, [r3, #0]
 8001440:	b293      	uxth	r3, r2
 8001442:	2900      	cmp	r1, #0
 8001444:	d145      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x6ba>
 8001446:	0001      	movs	r1, r0
 8001448:	3150      	adds	r1, #80	; 0x50
 800144a:	8809      	ldrh	r1, [r1, #0]
 800144c:	9e00      	ldr	r6, [sp, #0]
 800144e:	1879      	adds	r1, r7, r1
 8001450:	1989      	adds	r1, r1, r6
 8001452:	880e      	ldrh	r6, [r1, #0]
 8001454:	05b6      	lsls	r6, r6, #22
 8001456:	0db6      	lsrs	r6, r6, #22
 8001458:	800e      	strh	r6, [r1, #0]
 800145a:	2a3e      	cmp	r2, #62	; 0x3e
 800145c:	d91f      	bls.n	800149e <HAL_PCD_IRQHandler+0x686>
 800145e:	271f      	movs	r7, #31
 8001460:	0956      	lsrs	r6, r2, #5
 8001462:	403a      	ands	r2, r7
 8001464:	4257      	negs	r7, r2
 8001466:	417a      	adcs	r2, r7
 8001468:	1ab6      	subs	r6, r6, r2
 800146a:	880a      	ldrh	r2, [r1, #0]
 800146c:	02b6      	lsls	r6, r6, #10
 800146e:	4332      	orrs	r2, r6
 8001470:	4e11      	ldr	r6, [pc, #68]	; (80014b8 <HAL_PCD_IRQHandler+0x6a0>)
 8001472:	4332      	orrs	r2, r6
 8001474:	b292      	uxth	r2, r2
 8001476:	800a      	strh	r2, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001478:	2228      	movs	r2, #40	; 0x28
 800147a:	9901      	ldr	r1, [sp, #4]
 800147c:	434a      	muls	r2, r1
 800147e:	18a2      	adds	r2, r4, r2
 8001480:	8e12      	ldrh	r2, [r2, #48]	; 0x30
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001482:	9902      	ldr	r1, [sp, #8]
 8001484:	f001 fd35 	bl	8002ef2 <USB_WritePMA>
 8001488:	e06c      	b.n	8001564 <HAL_PCD_IRQHandler+0x74c>
        else if (ep->xfer_len_db == 0U)
 800148a:	2900      	cmp	r1, #0
 800148c:	d102      	bne.n	8001494 <HAL_PCD_IRQHandler+0x67c>
    if (ep->xfer_len > TxPctSize)
 800148e:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8001490:	7031      	strb	r1, [r6, #0]
 8001492:	e7d2      	b.n	800143a <HAL_PCD_IRQHandler+0x622>
          ep->xfer_fill_db = 0U;
 8001494:	2200      	movs	r2, #0
 8001496:	7032      	strb	r2, [r6, #0]
          ep->xfer_len_db = 0U;
 8001498:	649a      	str	r2, [r3, #72]	; 0x48
 800149a:	000a      	movs	r2, r1
 800149c:	e7cd      	b.n	800143a <HAL_PCD_IRQHandler+0x622>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d110      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x6ac>
 80014a2:	880a      	ldrh	r2, [r1, #0]
 80014a4:	e7e4      	b.n	8001470 <HAL_PCD_IRQHandler+0x658>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	ffff8f8f 	.word	0xffff8f8f
 80014ac:	000080c0 	.word	0x000080c0
 80014b0:	00000402 	.word	0x00000402
 80014b4:	ffff8f0f 	.word	0xffff8f0f
 80014b8:	ffff8000 	.word	0xffff8000
 80014bc:	00000406 	.word	0x00000406
 80014c0:	0000c080 	.word	0x0000c080
 80014c4:	2701      	movs	r7, #1
 80014c6:	0856      	lsrs	r6, r2, #1
 80014c8:	403a      	ands	r2, r7
 80014ca:	18b6      	adds	r6, r6, r2
 80014cc:	02b6      	lsls	r6, r6, #10
 80014ce:	880a      	ldrh	r2, [r1, #0]
 80014d0:	e7cf      	b.n	8001472 <HAL_PCD_IRQHandler+0x65a>
 80014d2:	2901      	cmp	r1, #1
 80014d4:	d1d0      	bne.n	8001478 <HAL_PCD_IRQHandler+0x660>
 80014d6:	0002      	movs	r2, r0
 80014d8:	3250      	adds	r2, #80	; 0x50
 80014da:	8812      	ldrh	r2, [r2, #0]
 80014dc:	18bf      	adds	r7, r7, r2
 80014de:	9a00      	ldr	r2, [sp, #0]
 80014e0:	18bf      	adds	r7, r7, r2
 80014e2:	803b      	strh	r3, [r7, #0]
 80014e4:	e7c8      	b.n	8001478 <HAL_PCD_IRQHandler+0x660>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014e6:	49a9      	ldr	r1, [pc, #676]	; (800178c <HAL_PCD_IRQHandler+0x974>)
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	468c      	mov	ip, r1
 80014ec:	9900      	ldr	r1, [sp, #0]
 80014ee:	4484      	add	ip, r0
 80014f0:	4462      	add	r2, ip
 80014f2:	5a52      	ldrh	r2, [r2, r1]
 80014f4:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len >= TxPctSize)
 80014f6:	0d92      	lsrs	r2, r2, #22
 80014f8:	42b2      	cmp	r2, r6
 80014fa:	d800      	bhi.n	80014fe <HAL_PCD_IRQHandler+0x6e6>
      ep->xfer_len -= TxPctSize;
 80014fc:	1ab7      	subs	r7, r6, r2
 80014fe:	2628      	movs	r6, #40	; 0x28
 8001500:	9901      	ldr	r1, [sp, #4]
 8001502:	434e      	muls	r6, r1
 8001504:	19a6      	adds	r6, r4, r6
 8001506:	6437      	str	r7, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001508:	2680      	movs	r6, #128	; 0x80
 800150a:	9902      	ldr	r1, [sp, #8]
 800150c:	01f6      	lsls	r6, r6, #7
 800150e:	4031      	ands	r1, r6
 8001510:	000e      	movs	r6, r1
 8001512:	2f00      	cmp	r7, #0
 8001514:	d140      	bne.n	8001598 <HAL_PCD_IRQHandler+0x780>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001516:	002a      	movs	r2, r5
 8001518:	3229      	adds	r2, #41	; 0x29
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	2a00      	cmp	r2, #0
 800151e:	d12b      	bne.n	8001578 <HAL_PCD_IRQHandler+0x760>
 8001520:	499b      	ldr	r1, [pc, #620]	; (8001790 <HAL_PCD_IRQHandler+0x978>)
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	1840      	adds	r0, r0, r1
 8001526:	1880      	adds	r0, r0, r2
 8001528:	9a00      	ldr	r2, [sp, #0]
 800152a:	499a      	ldr	r1, [pc, #616]	; (8001794 <HAL_PCD_IRQHandler+0x97c>)
 800152c:	1880      	adds	r0, r0, r2
 800152e:	8802      	ldrh	r2, [r0, #0]
 8001530:	0592      	lsls	r2, r2, #22
 8001532:	0d92      	lsrs	r2, r2, #22
 8001534:	8002      	strh	r2, [r0, #0]
 8001536:	8802      	ldrh	r2, [r0, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	b292      	uxth	r2, r2
 800153c:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	9a00      	ldr	r2, [sp, #0]
 8001542:	4463      	add	r3, ip
 8001544:	189b      	adds	r3, r3, r2
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	0592      	lsls	r2, r2, #22
 800154a:	0d92      	lsrs	r2, r2, #22
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001556:	0020      	movs	r0, r4
 8001558:	9903      	ldr	r1, [sp, #12]
 800155a:	f002 fd6b 	bl	8004034 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800155e:	2e00      	cmp	r6, #0
 8001560:	d100      	bne.n	8001564 <HAL_PCD_IRQHandler+0x74c>
 8001562:	e726      	b.n	80013b2 <HAL_PCD_IRQHandler+0x59a>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001564:	3528      	adds	r5, #40	; 0x28
 8001566:	782b      	ldrb	r3, [r5, #0]
 8001568:	6821      	ldr	r1, [r4, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	18c9      	adds	r1, r1, r3
 800156e:	880a      	ldrh	r2, [r1, #0]
 8001570:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_PCD_IRQHandler+0x980>)
 8001572:	401a      	ands	r2, r3
 8001574:	2330      	movs	r3, #48	; 0x30
 8001576:	e526      	b.n	8000fc6 <HAL_PCD_IRQHandler+0x1ae>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001578:	2a01      	cmp	r2, #1
 800157a:	d1ec      	bne.n	8001556 <HAL_PCD_IRQHandler+0x73e>
 800157c:	0003      	movs	r3, r0
 800157e:	4984      	ldr	r1, [pc, #528]	; (8001790 <HAL_PCD_IRQHandler+0x978>)
 8001580:	3350      	adds	r3, #80	; 0x50
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	1840      	adds	r0, r0, r1
 8001586:	1880      	adds	r0, r0, r2
 8001588:	9a00      	ldr	r2, [sp, #0]
 800158a:	1880      	adds	r0, r0, r2
 800158c:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4463      	add	r3, ip
 8001592:	189b      	adds	r3, r3, r2
 8001594:	801f      	strh	r7, [r3, #0]
 8001596:	e7de      	b.n	8001556 <HAL_PCD_IRQHandler+0x73e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001598:	2900      	cmp	r1, #0
 800159a:	d108      	bne.n	80015ae <HAL_PCD_IRQHandler+0x796>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800159c:	9b03      	ldr	r3, [sp, #12]
 800159e:	0099      	lsls	r1, r3, #2
 80015a0:	1841      	adds	r1, r0, r1
 80015a2:	880e      	ldrh	r6, [r1, #0]
 80015a4:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_PCD_IRQHandler+0x984>)
 80015a6:	4033      	ands	r3, r6
 80015a8:	4e7d      	ldr	r6, [pc, #500]	; (80017a0 <HAL_PCD_IRQHandler+0x988>)
 80015aa:	4333      	orrs	r3, r6
 80015ac:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80015ae:	2328      	movs	r3, #40	; 0x28
 80015b0:	9901      	ldr	r1, [sp, #4]
 80015b2:	434b      	muls	r3, r1
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	001f      	movs	r7, r3
 80015b8:	374c      	adds	r7, #76	; 0x4c
 80015ba:	7839      	ldrb	r1, [r7, #0]
 80015bc:	2901      	cmp	r1, #1
 80015be:	d1d1      	bne.n	8001564 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxPctSize;
 80015c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80015c2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 80015c4:	1889      	adds	r1, r1, r2
 80015c6:	9102      	str	r1, [sp, #8]
 80015c8:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 80015ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015cc:	1889      	adds	r1, r1, r2
 80015ce:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80015d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015d2:	428e      	cmp	r6, r1
 80015d4:	d326      	bcc.n	8001624 <HAL_PCD_IRQHandler+0x80c>
          ep->xfer_len_db -= len;
 80015d6:	1a76      	subs	r6, r6, r1
 80015d8:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80015da:	002b      	movs	r3, r5
 80015dc:	3329      	adds	r3, #41	; 0x29
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	b28b      	uxth	r3, r1
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d133      	bne.n	800164e <HAL_PCD_IRQHandler+0x836>
 80015e6:	0002      	movs	r2, r0
 80015e8:	3250      	adds	r2, #80	; 0x50
 80015ea:	8812      	ldrh	r2, [r2, #0]
 80015ec:	9e00      	ldr	r6, [sp, #0]
 80015ee:	4462      	add	r2, ip
 80015f0:	1992      	adds	r2, r2, r6
 80015f2:	8816      	ldrh	r6, [r2, #0]
 80015f4:	05b6      	lsls	r6, r6, #22
 80015f6:	0db6      	lsrs	r6, r6, #22
 80015f8:	8016      	strh	r6, [r2, #0]
 80015fa:	293e      	cmp	r1, #62	; 0x3e
 80015fc:	d91c      	bls.n	8001638 <HAL_PCD_IRQHandler+0x820>
 80015fe:	271f      	movs	r7, #31
 8001600:	094e      	lsrs	r6, r1, #5
 8001602:	4039      	ands	r1, r7
 8001604:	424f      	negs	r7, r1
 8001606:	4179      	adcs	r1, r7
 8001608:	1a76      	subs	r6, r6, r1
 800160a:	8811      	ldrh	r1, [r2, #0]
 800160c:	02b6      	lsls	r6, r6, #10
 800160e:	4331      	orrs	r1, r6
 8001610:	4e60      	ldr	r6, [pc, #384]	; (8001794 <HAL_PCD_IRQHandler+0x97c>)
 8001612:	4331      	orrs	r1, r6
 8001614:	b289      	uxth	r1, r1
 8001616:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001618:	2228      	movs	r2, #40	; 0x28
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	434a      	muls	r2, r1
 800161e:	18a2      	adds	r2, r4, r2
 8001620:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001622:	e72e      	b.n	8001482 <HAL_PCD_IRQHandler+0x66a>
        else if (ep->xfer_len_db == 0U)
 8001624:	2e00      	cmp	r6, #0
 8001626:	d102      	bne.n	800162e <HAL_PCD_IRQHandler+0x816>
    if (ep->xfer_len >= TxPctSize)
 8001628:	0011      	movs	r1, r2
          ep->xfer_fill_db = 0U;
 800162a:	703e      	strb	r6, [r7, #0]
 800162c:	e7d5      	b.n	80015da <HAL_PCD_IRQHandler+0x7c2>
          ep->xfer_len_db = 0U;
 800162e:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 8001630:	0031      	movs	r1, r6
          ep->xfer_len_db = 0U;
 8001632:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001634:	703a      	strb	r2, [r7, #0]
 8001636:	e7d0      	b.n	80015da <HAL_PCD_IRQHandler+0x7c2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001638:	2900      	cmp	r1, #0
 800163a:	d101      	bne.n	8001640 <HAL_PCD_IRQHandler+0x828>
 800163c:	8811      	ldrh	r1, [r2, #0]
 800163e:	e7e7      	b.n	8001610 <HAL_PCD_IRQHandler+0x7f8>
 8001640:	2701      	movs	r7, #1
 8001642:	084e      	lsrs	r6, r1, #1
 8001644:	4039      	ands	r1, r7
 8001646:	1876      	adds	r6, r6, r1
 8001648:	02b6      	lsls	r6, r6, #10
 800164a:	8811      	ldrh	r1, [r2, #0]
 800164c:	e7e1      	b.n	8001612 <HAL_PCD_IRQHandler+0x7fa>
 800164e:	2a01      	cmp	r2, #1
 8001650:	d1e2      	bne.n	8001618 <HAL_PCD_IRQHandler+0x800>
 8001652:	0002      	movs	r2, r0
 8001654:	3250      	adds	r2, #80	; 0x50
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	9900      	ldr	r1, [sp, #0]
 800165a:	4462      	add	r2, ip
 800165c:	1852      	adds	r2, r2, r1
 800165e:	8013      	strh	r3, [r2, #0]
 8001660:	e7da      	b.n	8001618 <HAL_PCD_IRQHandler+0x800>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001662:	0543      	lsls	r3, r0, #21
 8001664:	d50e      	bpl.n	8001684 <HAL_PCD_IRQHandler+0x86c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	494e      	ldr	r1, [pc, #312]	; (80017a4 <HAL_PCD_IRQHandler+0x98c>)
 800166a:	3306      	adds	r3, #6
 800166c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800166e:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001670:	400a      	ands	r2, r1
 8001672:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001674:	f002 fcf0 	bl	8004058 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001678:	0029      	movs	r1, r5
 800167a:	0020      	movs	r0, r4
 800167c:	f7ff fbb9 	bl	8000df2 <HAL_PCD_SetAddress>
    return;
 8001680:	f7ff fbde 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001684:	0443      	lsls	r3, r0, #17
 8001686:	d507      	bpl.n	8001698 <HAL_PCD_IRQHandler+0x880>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	4947      	ldr	r1, [pc, #284]	; (80017a8 <HAL_PCD_IRQHandler+0x990>)
 800168c:	3306      	adds	r3, #6
 800168e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001690:	400a      	ands	r2, r1
 8001692:	87da      	strh	r2, [r3, #62]	; 0x3e
    return;
 8001694:	f7ff fbd4 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	0001      	movs	r1, r0
 800169c:	019b      	lsls	r3, r3, #6
 800169e:	4019      	ands	r1, r3
 80016a0:	4218      	tst	r0, r3
 80016a2:	d004      	beq.n	80016ae <HAL_PCD_IRQHandler+0x896>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	4941      	ldr	r1, [pc, #260]	; (80017ac <HAL_PCD_IRQHandler+0x994>)
 80016a8:	3306      	adds	r3, #6
 80016aa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80016ac:	e7f0      	b.n	8001690 <HAL_PCD_IRQHandler+0x878>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016ae:	04c3      	lsls	r3, r0, #19
 80016b0:	d51a      	bpl.n	80016e8 <HAL_PCD_IRQHandler+0x8d0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80016b2:	2004      	movs	r0, #4
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	3302      	adds	r3, #2
 80016b8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80016ba:	4382      	bics	r2, r0
 80016bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016be:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80016c0:	1800      	adds	r0, r0, r0
 80016c2:	4382      	bics	r2, r0
 80016c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80016c6:	23b8      	movs	r3, #184	; 0xb8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	5ce2      	ldrb	r2, [r4, r3]
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d103      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x8c0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016d0:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80016d2:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016d4:	f000 f9a0 	bl	8001a18 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80016d8:	0020      	movs	r0, r4
 80016da:	f002 fce1 	bl	80040a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	4933      	ldr	r1, [pc, #204]	; (80017b0 <HAL_PCD_IRQHandler+0x998>)
 80016e2:	3306      	adds	r3, #6
 80016e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80016e6:	e7d3      	b.n	8001690 <HAL_PCD_IRQHandler+0x878>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016e8:	0503      	lsls	r3, r0, #20
 80016ea:	d513      	bpl.n	8001714 <HAL_PCD_IRQHandler+0x8fc>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ec:	2108      	movs	r1, #8
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	1c9a      	adds	r2, r3, #2
 80016f2:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016f4:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016f6:	4301      	orrs	r1, r0
 80016f8:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016fa:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80016fc:	482d      	ldr	r0, [pc, #180]	; (80017b4 <HAL_PCD_IRQHandler+0x99c>)
 80016fe:	4001      	ands	r1, r0
 8001700:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001702:	2304      	movs	r3, #4
 8001704:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8001706:	430b      	orrs	r3, r1
 8001708:	87d3      	strh	r3, [r2, #62]	; 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 800170a:	0020      	movs	r0, r4
 800170c:	f002 fcb6 	bl	800407c <HAL_PCD_SuspendCallback>
 8001710:	f7ff fb96 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001714:	2580      	movs	r5, #128	; 0x80
 8001716:	4228      	tst	r0, r5
 8001718:	d021      	beq.n	800175e <HAL_PCD_IRQHandler+0x946>
    if (hpcd->LPM_State == LPM_L0)
 800171a:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800171c:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 800171e:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001720:	1d99      	adds	r1, r3, #6
 8001722:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8001724:	43aa      	bics	r2, r5
 8001726:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8001728:	5c22      	ldrb	r2, [r4, r0]
 800172a:	2a00      	cmp	r2, #0
 800172c:	d1ed      	bne.n	800170a <HAL_PCD_IRQHandler+0x8f2>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800172e:	1c99      	adds	r1, r3, #2
 8001730:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 8001732:	3204      	adds	r2, #4
 8001734:	432a      	orrs	r2, r5
 8001736:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001738:	2208      	movs	r2, #8
 800173a:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800173c:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800173e:	432a      	orrs	r2, r5
 8001740:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8001742:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001744:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8001746:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001748:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800174a:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	4013      	ands	r3, r2
 8001750:	22b9      	movs	r2, #185	; 0xb9
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001756:	f000 f95f 	bl	8001a18 <HAL_PCDEx_LPM_Callback>
 800175a:	f7ff fb71 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800175e:	0583      	lsls	r3, r0, #22
 8001760:	d50a      	bpl.n	8001778 <HAL_PCD_IRQHandler+0x960>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	4914      	ldr	r1, [pc, #80]	; (80017b8 <HAL_PCD_IRQHandler+0x9a0>)
 8001766:	3306      	adds	r3, #6
 8001768:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 800176a:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800176c:	400a      	ands	r2, r1
 800176e:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8001770:	f002 fc6b 	bl	800404a <HAL_PCD_SOFCallback>
    return;
 8001774:	f7ff fb64 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001778:	05c0      	lsls	r0, r0, #23
 800177a:	d401      	bmi.n	8001780 <HAL_PCD_IRQHandler+0x968>
 800177c:	f7ff fb60 	bl	8000e40 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_PCD_IRQHandler+0x9a4>)
 8001784:	3306      	adds	r3, #6
 8001786:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001788:	e782      	b.n	8001690 <HAL_PCD_IRQHandler+0x878>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	00000406 	.word	0x00000406
 8001790:	00000402 	.word	0x00000402
 8001794:	ffff8000 	.word	0xffff8000
 8001798:	ffff8fbf 	.word	0xffff8fbf
 800179c:	ffff8f8f 	.word	0xffff8f8f
 80017a0:	0000c080 	.word	0x0000c080
 80017a4:	fffffbff 	.word	0xfffffbff
 80017a8:	ffffbfff 	.word	0xffffbfff
 80017ac:	ffffdfff 	.word	0xffffdfff
 80017b0:	ffffefff 	.word	0xffffefff
 80017b4:	fffff7ff 	.word	0xfffff7ff
 80017b8:	fffffdff 	.word	0xfffffdff
 80017bc:	fffffeff 	.word	0xfffffeff

080017c0 <HAL_PCD_EP_Open>:
{
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	0005      	movs	r5, r0
 80017c4:	2007      	movs	r0, #7
 80017c6:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80017c8:	b249      	sxtb	r1, r1
 80017ca:	2428      	movs	r4, #40	; 0x28
 80017cc:	2900      	cmp	r1, #0
 80017ce:	da19      	bge.n	8001804 <HAL_PCD_EP_Open+0x44>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	1c41      	adds	r1, r0, #1
 80017d2:	4361      	muls	r1, r4
    ep->is_in = 1U;
 80017d4:	3c27      	subs	r4, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d6:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 80017d8:	704c      	strb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017da:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 80017dc:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80017de:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <HAL_PCD_EP_Open+0x28>
    ep->data_pid_start = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80017e8:	24aa      	movs	r4, #170	; 0xaa
 80017ea:	00a4      	lsls	r4, r4, #2
 80017ec:	5d2b      	ldrb	r3, [r5, r4]
 80017ee:	2002      	movs	r0, #2
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d006      	beq.n	8001802 <HAL_PCD_EP_Open+0x42>
 80017f4:	2301      	movs	r3, #1
 80017f6:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017f8:	6828      	ldr	r0, [r5, #0]
 80017fa:	f001 f985 	bl	8002b08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017fe:	2000      	movs	r0, #0
 8001800:	5528      	strb	r0, [r5, r4]
}
 8001802:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001804:	4344      	muls	r4, r0
 8001806:	0021      	movs	r1, r4
    ep->is_in = 0U;
 8001808:	2600      	movs	r6, #0
 800180a:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800180c:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800180e:	346a      	adds	r4, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001810:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001812:	34ff      	adds	r4, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001814:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 8001816:	7026      	strb	r6, [r4, #0]
 8001818:	e7df      	b.n	80017da <HAL_PCD_EP_Open+0x1a>

0800181a <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800181a:	2207      	movs	r2, #7
 800181c:	400a      	ands	r2, r1
 800181e:	b249      	sxtb	r1, r1
{
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	2328      	movs	r3, #40	; 0x28
 8001824:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001826:	2900      	cmp	r1, #0
 8001828:	da13      	bge.n	8001852 <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182a:	1c51      	adds	r1, r2, #1
 800182c:	4359      	muls	r1, r3
    ep->is_in = 1U;
 800182e:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001830:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 8001832:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001834:	25aa      	movs	r5, #170	; 0xaa
  ep->num = ep_addr & EP_ADDR_MSK;
 8001836:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001838:	00ad      	lsls	r5, r5, #2
 800183a:	5d63      	ldrb	r3, [r4, r5]
 800183c:	2002      	movs	r0, #2
 800183e:	2b01      	cmp	r3, #1
 8001840:	d006      	beq.n	8001850 <HAL_PCD_EP_Close+0x36>
 8001842:	2301      	movs	r3, #1
 8001844:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	f001 fa6c 	bl	8002d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800184c:	2000      	movs	r0, #0
 800184e:	5560      	strb	r0, [r4, r5]
}
 8001850:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001852:	4353      	muls	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	3169      	adds	r1, #105	; 0x69
 8001858:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800185a:	18c3      	adds	r3, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185c:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 800185e:	2000      	movs	r0, #0
 8001860:	336a      	adds	r3, #106	; 0x6a
 8001862:	33ff      	adds	r3, #255	; 0xff
 8001864:	7018      	strb	r0, [r3, #0]
 8001866:	e7e5      	b.n	8001834 <HAL_PCD_EP_Close+0x1a>

08001868 <HAL_PCD_EP_Receive>:
{
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	2407      	movs	r4, #7
}
 800186c:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 800186e:	3421      	adds	r4, #33	; 0x21
 8001870:	434c      	muls	r4, r1
 8001872:	1905      	adds	r5, r0, r4
 8001874:	002e      	movs	r6, r5
 8001876:	367d      	adds	r6, #125	; 0x7d
 8001878:	36ff      	adds	r6, #255	; 0xff
 800187a:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 800187c:	002a      	movs	r2, r5
 800187e:	3281      	adds	r2, #129	; 0x81
 8001880:	32ff      	adds	r2, #255	; 0xff
 8001882:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8001884:	002b      	movs	r3, r5
 8001886:	2600      	movs	r6, #0
 8001888:	3385      	adds	r3, #133	; 0x85
 800188a:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 800188c:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 800188e:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001890:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 8001892:	3b1b      	subs	r3, #27
 8001894:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001896:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001898:	0021      	movs	r1, r4
 800189a:	3169      	adds	r1, #105	; 0x69
 800189c:	31ff      	adds	r1, #255	; 0xff
 800189e:	1841      	adds	r1, r0, r1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018a0:	6800      	ldr	r0, [r0, #0]
 80018a2:	f001 fb3b 	bl	8002f1c <USB_EPStartXfer>
}
 80018a6:	0030      	movs	r0, r6
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080018ac <HAL_PCD_EP_Transmit>:
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	2507      	movs	r5, #7
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b0:	2428      	movs	r4, #40	; 0x28
 80018b2:	400d      	ands	r5, r1
 80018b4:	1c69      	adds	r1, r5, #1
 80018b6:	4361      	muls	r1, r4
  ep->xfer_buff = pBuf;
 80018b8:	436c      	muls	r4, r5
 80018ba:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 80018bc:	0026      	movs	r6, r4
  ep->xfer_buff = pBuf;
 80018be:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80018c0:	2201      	movs	r2, #1
 80018c2:	364c      	adds	r6, #76	; 0x4c
  ep->xfer_len = len;
 80018c4:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80018c6:	7032      	strb	r2, [r6, #0]
  ep->xfer_len_db = len;
 80018c8:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	6463      	str	r3, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80018ce:	0023      	movs	r3, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d0:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 80018d2:	3329      	adds	r3, #41	; 0x29
 80018d4:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d6:	7025      	strb	r5, [r4, #0]
  if((recv_buffer[0]&0x02) != 0x02)
 80018d8:	4c08      	ldr	r4, [pc, #32]	; (80018fc <HAL_PCD_EP_Transmit+0x50>)
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	1841      	adds	r1, r0, r1
  if((recv_buffer[0]&0x02) != 0x02)
 80018dc:	7823      	ldrb	r3, [r4, #0]
 80018de:	079b      	lsls	r3, r3, #30
 80018e0:	d401      	bmi.n	80018e6 <HAL_PCD_EP_Transmit+0x3a>
	  InterruptFlag = 1;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_PCD_EP_Transmit+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f001 fb18 	bl	8002f1c <USB_EPStartXfer>
  if((recv_buffer[0]&0x02) != 0x02)
 80018ec:	7823      	ldrb	r3, [r4, #0]
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d402      	bmi.n	80018f8 <HAL_PCD_EP_Transmit+0x4c>
	  NeedRollBack = 1;
 80018f2:	2201      	movs	r2, #1
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_PCD_EP_Transmit+0x58>)
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	2000033c 	.word	0x2000033c
 8001900:	20000330 	.word	0x20000330
 8001904:	20000334 	.word	0x20000334

08001908 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001908:	2207      	movs	r2, #7
 800190a:	6843      	ldr	r3, [r0, #4]
{
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	400a      	ands	r2, r1
 8001910:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001914:	429a      	cmp	r2, r3
 8001916:	d817      	bhi.n	8001948 <HAL_PCD_EP_SetStall+0x40>
  if ((0x80U & ep_addr) == 0x80U)
 8001918:	b248      	sxtb	r0, r1
 800191a:	2328      	movs	r3, #40	; 0x28
 800191c:	2800      	cmp	r0, #0
 800191e:	da14      	bge.n	800194a <HAL_PCD_EP_SetStall+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001920:	1c51      	adds	r1, r2, #1
 8001922:	4359      	muls	r1, r3
    ep->is_in = 1U;
 8001924:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001928:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800192a:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 800192c:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 800192e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001930:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001932:	00ad      	lsls	r5, r5, #2
 8001934:	5d62      	ldrb	r2, [r4, r5]
 8001936:	2002      	movs	r0, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d005      	beq.n	8001948 <HAL_PCD_EP_SetStall+0x40>
 800193c:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800193e:	6820      	ldr	r0, [r4, #0]
 8001940:	f001 fa6a 	bl	8002e18 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001944:	2000      	movs	r0, #0
 8001946:	5560      	strb	r0, [r4, r5]
}
 8001948:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800194a:	434b      	muls	r3, r1
 800194c:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800194e:	2000      	movs	r0, #0
 8001950:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8001952:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 8001954:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 8001956:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001958:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 800195a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800195c:	7018      	strb	r0, [r3, #0]
 800195e:	e7e4      	b.n	800192a <HAL_PCD_EP_SetStall+0x22>

08001960 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001960:	230f      	movs	r3, #15
 8001962:	6842      	ldr	r2, [r0, #4]
{
 8001964:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001966:	400b      	ands	r3, r1
{
 8001968:	0004      	movs	r4, r0
    return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800196c:	4293      	cmp	r3, r2
 800196e:	d819      	bhi.n	80019a4 <HAL_PCD_EP_ClrStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8001970:	2207      	movs	r2, #7
 8001972:	400a      	ands	r2, r1
 8001974:	b249      	sxtb	r1, r1
 8001976:	2328      	movs	r3, #40	; 0x28
 8001978:	2900      	cmp	r1, #0
 800197a:	da14      	bge.n	80019a6 <HAL_PCD_EP_ClrStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197c:	1811      	adds	r1, r2, r0
 800197e:	4359      	muls	r1, r3
 8001980:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001982:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8001984:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8001986:	26aa      	movs	r6, #170	; 0xaa
  ep->is_stall = 0U;
 8001988:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800198a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800198c:	00b6      	lsls	r6, r6, #2
 800198e:	5da3      	ldrb	r3, [r4, r6]
 8001990:	2002      	movs	r0, #2
 8001992:	2b01      	cmp	r3, #1
 8001994:	d006      	beq.n	80019a4 <HAL_PCD_EP_ClrStall+0x44>
 8001996:	2301      	movs	r3, #1
 8001998:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800199a:	6820      	ldr	r0, [r4, #0]
 800199c:	f001 fa5c 	bl	8002e58 <USB_EPClearStall>
  return HAL_OK;
 80019a0:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 80019a2:	55a5      	strb	r5, [r4, r6]
}
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a6:	4353      	muls	r3, r2
 80019a8:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80019aa:	2000      	movs	r0, #0
 80019ac:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ae:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 80019b0:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b2:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80019b4:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80019b8:	7018      	strb	r0, [r3, #0]
 80019ba:	e7e3      	b.n	8001984 <HAL_PCD_EP_ClrStall+0x24>

080019bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80019bc:	b510      	push	{r4, lr}
 80019be:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80019c0:	0621      	lsls	r1, r4, #24
 80019c2:	d50c      	bpl.n	80019de <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c4:	2107      	movs	r1, #7
 80019c6:	4021      	ands	r1, r4
 80019c8:	2428      	movs	r4, #40	; 0x28
 80019ca:	3101      	adds	r1, #1
 80019cc:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ce:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80019d0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d108      	bne.n	80019e8 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 80019d6:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80019d8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80019da:	2000      	movs	r0, #0
 80019dc:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80019de:	2128      	movs	r1, #40	; 0x28
 80019e0:	4361      	muls	r1, r4
 80019e2:	3169      	adds	r1, #105	; 0x69
 80019e4:	31ff      	adds	r1, #255	; 0xff
 80019e6:	e7f2      	b.n	80019ce <HAL_PCDEx_PMAConfig+0x12>
    ep->doublebuffer = 1U;
 80019e8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80019ea:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80019ec:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80019ee:	e7f4      	b.n	80019da <HAL_PCDEx_PMAConfig+0x1e>

080019f0 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80019f0:	6803      	ldr	r3, [r0, #0]
{
 80019f2:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 80019f4:	20ba      	movs	r0, #186	; 0xba
 80019f6:	2101      	movs	r1, #1
{
 80019f8:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80019fa:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80019fc:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 80019fe:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8001a00:	2000      	movs	r0, #0
 8001a02:	00a4      	lsls	r4, r4, #2
 8001a04:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a06:	3354      	adds	r3, #84	; 0x54
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a0c:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a0e:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a10:	8819      	ldrh	r1, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	0004      	movs	r4, r0
 8001a20:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d04e      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a26:	6803      	ldr	r3, [r0, #0]
 8001a28:	07db      	lsls	r3, r3, #31
 8001a2a:	d433      	bmi.n	8001a94 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d500      	bpl.n	8001a34 <HAL_RCC_OscConfig+0x18>
 8001a32:	e08a      	b.n	8001b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	071b      	lsls	r3, r3, #28
 8001a38:	d500      	bpl.n	8001a3c <HAL_RCC_OscConfig+0x20>
 8001a3a:	e0ca      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	075b      	lsls	r3, r3, #29
 8001a40:	d500      	bpl.n	8001a44 <HAL_RCC_OscConfig+0x28>
 8001a42:	e0ed      	b.n	8001c20 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	06db      	lsls	r3, r3, #27
 8001a48:	d51a      	bpl.n	8001a80 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a4a:	6962      	ldr	r2, [r4, #20]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	4dbb      	ldr	r5, [pc, #748]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001a50:	2a01      	cmp	r2, #1
 8001a52:	d000      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3a>
 8001a54:	e156      	b.n	8001d04 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a56:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a58:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001a5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a60:	431a      	orrs	r2, r3
 8001a62:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a64:	f7ff f828 	bl	8000ab8 <HAL_GetTick>
 8001a68:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a6c:	423b      	tst	r3, r7
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x56>
 8001a70:	e141      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a72:	21f8      	movs	r1, #248	; 0xf8
 8001a74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a76:	69a3      	ldr	r3, [r4, #24]
 8001a78:	438a      	bics	r2, r1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	069b      	lsls	r3, r3, #26
 8001a84:	d500      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x6c>
 8001a86:	e165      	b.n	8001d54 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d000      	beq.n	8001a90 <HAL_RCC_OscConfig+0x74>
 8001a8e:	e1a4      	b.n	8001dda <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e02f      	b.n	8001af4 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a94:	220c      	movs	r2, #12
 8001a96:	4da9      	ldr	r5, [pc, #676]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001a98:	686b      	ldr	r3, [r5, #4]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa0:	686b      	ldr	r3, [r5, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d10f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xac>
 8001aa8:	22c0      	movs	r2, #192	; 0xc0
 8001aaa:	686b      	ldr	r3, [r5, #4]
 8001aac:	0252      	lsls	r2, r2, #9
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0252      	lsls	r2, r2, #9
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	039b      	lsls	r3, r3, #14
 8001abc:	d5b6      	bpl.n	8001a2c <HAL_RCC_OscConfig+0x10>
 8001abe:	6863      	ldr	r3, [r4, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1b3      	bne.n	8001a2c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	e015      	b.n	8001af4 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d114      	bne.n	8001af8 <HAL_RCC_OscConfig+0xdc>
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	682a      	ldr	r2, [r5, #0]
 8001ad2:	025b      	lsls	r3, r3, #9
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ad8:	f7fe ffee 	bl	8000ab8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001adc:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001ade:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae0:	02bf      	lsls	r7, r7, #10
 8001ae2:	682b      	ldr	r3, [r5, #0]
 8001ae4:	423b      	tst	r3, r7
 8001ae6:	d1a1      	bne.n	8001a2c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7fe ffe6 	bl	8000ab8 <HAL_GetTick>
 8001aec:	1b80      	subs	r0, r0, r6
 8001aee:	2864      	cmp	r0, #100	; 0x64
 8001af0:	d9f7      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001af2:	2003      	movs	r0, #3
}
 8001af4:	b005      	add	sp, #20
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d116      	bne.n	8001b2a <HAL_RCC_OscConfig+0x10e>
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	4a90      	ldr	r2, [pc, #576]	; (8001d40 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b00:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	4013      	ands	r3, r2
 8001b04:	602b      	str	r3, [r5, #0]
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	4a8e      	ldr	r2, [pc, #568]	; (8001d44 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b10:	f7fe ffd2 	bl	8000ab8 <HAL_GetTick>
 8001b14:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	423b      	tst	r3, r7
 8001b1a:	d100      	bne.n	8001b1e <HAL_RCC_OscConfig+0x102>
 8001b1c:	e786      	b.n	8001a2c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7fe ffcb 	bl	8000ab8 <HAL_GetTick>
 8001b22:	1b80      	subs	r0, r0, r6
 8001b24:	2864      	cmp	r0, #100	; 0x64
 8001b26:	d9f6      	bls.n	8001b16 <HAL_RCC_OscConfig+0xfa>
 8001b28:	e7e3      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_OscConfig+0x11e>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	682a      	ldr	r2, [r5, #0]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	4313      	orrs	r3, r2
 8001b36:	602b      	str	r3, [r5, #0]
 8001b38:	e7c9      	b.n	8001ace <HAL_RCC_OscConfig+0xb2>
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	4a80      	ldr	r2, [pc, #512]	; (8001d40 <HAL_RCC_OscConfig+0x324>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x328>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	e7c5      	b.n	8001ad6 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	4d7b      	ldr	r5, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001b4e:	686b      	ldr	r3, [r5, #4]
 8001b50:	4213      	tst	r3, r2
 8001b52:	d00b      	beq.n	8001b6c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b54:	686b      	ldr	r3, [r5, #4]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d115      	bne.n	8001b88 <HAL_RCC_OscConfig+0x16c>
 8001b5c:	22c0      	movs	r2, #192	; 0xc0
 8001b5e:	686b      	ldr	r3, [r5, #4]
 8001b60:	0252      	lsls	r2, r2, #9
 8001b62:	4013      	ands	r3, r2
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	0212      	lsls	r2, r2, #8
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	079b      	lsls	r3, r3, #30
 8001b70:	d502      	bpl.n	8001b78 <HAL_RCC_OscConfig+0x15c>
 8001b72:	68e3      	ldr	r3, [r4, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d1a5      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	21f8      	movs	r1, #248	; 0xf8
 8001b7a:	682a      	ldr	r2, [r5, #0]
 8001b7c:	6923      	ldr	r3, [r4, #16]
 8001b7e:	438a      	bics	r2, r1
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	e755      	b.n	8001a34 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	68e2      	ldr	r2, [r4, #12]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d00f      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8001b90:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4313      	orrs	r3, r2
 8001b96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b98:	f7fe ff8e 	bl	8000ab8 <HAL_GetTick>
 8001b9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	423b      	tst	r3, r7
 8001ba2:	d1e9      	bne.n	8001b78 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff88 	bl	8000ab8 <HAL_GetTick>
 8001ba8:	1b80      	subs	r0, r0, r6
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d9f7      	bls.n	8001b9e <HAL_RCC_OscConfig+0x182>
 8001bae:	e7a0      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8001bb0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001bb4:	439a      	bics	r2, r3
 8001bb6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001bb8:	f7fe ff7e 	bl	8000ab8 <HAL_GetTick>
 8001bbc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	423b      	tst	r3, r7
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x1aa>
 8001bc4:	e736      	b.n	8001a34 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7fe ff77 	bl	8000ab8 <HAL_GetTick>
 8001bca:	1b80      	subs	r0, r0, r6
 8001bcc:	2802      	cmp	r0, #2
 8001bce:	d9f6      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1a2>
 8001bd0:	e78f      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd2:	69e2      	ldr	r2, [r4, #28]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4d59      	ldr	r5, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8001bdc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4313      	orrs	r3, r2
 8001be2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001be4:	f7fe ff68 	bl	8000ab8 <HAL_GetTick>
 8001be8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001bec:	423b      	tst	r3, r7
 8001bee:	d000      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1d6>
 8001bf0:	e724      	b.n	8001a3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7fe ff61 	bl	8000ab8 <HAL_GetTick>
 8001bf6:	1b80      	subs	r0, r0, r6
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	d9f6      	bls.n	8001bea <HAL_RCC_OscConfig+0x1ce>
 8001bfc:	e779      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001c02:	439a      	bics	r2, r3
 8001c04:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001c06:	f7fe ff57 	bl	8000ab8 <HAL_GetTick>
 8001c0a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c0e:	423b      	tst	r3, r7
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1f8>
 8001c12:	e713      	b.n	8001a3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c14:	f7fe ff50 	bl	8000ab8 <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d9f6      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1f0>
 8001c1e:	e768      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c20:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c24:	4d45      	ldr	r5, [pc, #276]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001c26:	0552      	lsls	r2, r2, #21
 8001c28:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2c:	4213      	tst	r3, r2
 8001c2e:	d108      	bne.n	8001c42 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	69eb      	ldr	r3, [r5, #28]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61eb      	str	r3, [r5, #28]
 8001c36:	69eb      	ldr	r3, [r5, #28]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	2780      	movs	r7, #128	; 0x80
 8001c44:	4e40      	ldr	r6, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	007f      	lsls	r7, r7, #1
 8001c48:	6833      	ldr	r3, [r6, #0]
 8001c4a:	423b      	tst	r3, r7
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCC_OscConfig+0x25e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d122      	bne.n	8001c9a <HAL_RCC_OscConfig+0x27e>
 8001c54:	6a2a      	ldr	r2, [r5, #32]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001c5a:	f7fe ff2d 	bl	8000ab8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001c60:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c62:	6a2b      	ldr	r3, [r5, #32]
 8001c64:	423b      	tst	r3, r7
 8001c66:	d03f      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8001c68:	9b00      	ldr	r3, [sp, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d000      	beq.n	8001c70 <HAL_RCC_OscConfig+0x254>
 8001c6e:	e6e9      	b.n	8001a44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	69eb      	ldr	r3, [r5, #28]
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	61eb      	str	r3, [r5, #28]
 8001c78:	e6e4      	b.n	8001a44 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	6833      	ldr	r3, [r6, #0]
 8001c7c:	433b      	orrs	r3, r7
 8001c7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c80:	f7fe ff1a 	bl	8000ab8 <HAL_GetTick>
 8001c84:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	6833      	ldr	r3, [r6, #0]
 8001c88:	423b      	tst	r3, r7
 8001c8a:	d1e0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8c:	f7fe ff14 	bl	8000ab8 <HAL_GetTick>
 8001c90:	9b01      	ldr	r3, [sp, #4]
 8001c92:	1ac0      	subs	r0, r0, r3
 8001c94:	2864      	cmp	r0, #100	; 0x64
 8001c96:	d9f6      	bls.n	8001c86 <HAL_RCC_OscConfig+0x26a>
 8001c98:	e72b      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d114      	bne.n	8001cca <HAL_RCC_OscConfig+0x2ae>
 8001ca0:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	622b      	str	r3, [r5, #32]
 8001ca8:	6a2b      	ldr	r3, [r5, #32]
 8001caa:	3203      	adds	r2, #3
 8001cac:	4393      	bics	r3, r2
 8001cae:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001cb0:	f7fe ff02 	bl	8000ab8 <HAL_GetTick>
 8001cb4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	6a2b      	ldr	r3, [r5, #32]
 8001cb8:	423b      	tst	r3, r7
 8001cba:	d0d5      	beq.n	8001c68 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe fefc 	bl	8000ab8 <HAL_GetTick>
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_OscConfig+0x334>)
 8001cc2:	1b80      	subs	r0, r0, r6
 8001cc4:	4298      	cmp	r0, r3
 8001cc6:	d9f6      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x29a>
 8001cc8:	e713      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d105      	bne.n	8001cda <HAL_RCC_OscConfig+0x2be>
 8001cce:	6a29      	ldr	r1, [r5, #32]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	622b      	str	r3, [r5, #32]
 8001cd6:	6a2b      	ldr	r3, [r5, #32]
 8001cd8:	e7bd      	b.n	8001c56 <HAL_RCC_OscConfig+0x23a>
 8001cda:	6a2b      	ldr	r3, [r5, #32]
 8001cdc:	4393      	bics	r3, r2
 8001cde:	2204      	movs	r2, #4
 8001ce0:	622b      	str	r3, [r5, #32]
 8001ce2:	6a2b      	ldr	r3, [r5, #32]
 8001ce4:	4393      	bics	r3, r2
 8001ce6:	e7b7      	b.n	8001c58 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fee6 	bl	8000ab8 <HAL_GetTick>
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x334>)
 8001cee:	1b80      	subs	r0, r0, r6
 8001cf0:	4298      	cmp	r0, r3
 8001cf2:	d9b6      	bls.n	8001c62 <HAL_RCC_OscConfig+0x246>
 8001cf4:	e6fd      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cf6:	f7fe fedf 	bl	8000ab8 <HAL_GetTick>
 8001cfa:	1b80      	subs	r0, r0, r6
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d800      	bhi.n	8001d02 <HAL_RCC_OscConfig+0x2e6>
 8001d00:	e6b3      	b.n	8001a6a <HAL_RCC_OscConfig+0x4e>
 8001d02:	e6f6      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d04:	3205      	adds	r2, #5
 8001d06:	d103      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d0a:	439a      	bics	r2, r3
 8001d0c:	636a      	str	r2, [r5, #52]	; 0x34
 8001d0e:	e6b0      	b.n	8001a72 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d12:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d14:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001d16:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d18:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001d1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d20:	f7fe feca 	bl	8000ab8 <HAL_GetTick>
 8001d24:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d28:	423b      	tst	r3, r7
 8001d2a:	d100      	bne.n	8001d2e <HAL_RCC_OscConfig+0x312>
 8001d2c:	e6a8      	b.n	8001a80 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d2e:	f7fe fec3 	bl	8000ab8 <HAL_GetTick>
 8001d32:	1b80      	subs	r0, r0, r6
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d9f6      	bls.n	8001d26 <HAL_RCC_OscConfig+0x30a>
 8001d38:	e6db      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	fffeffff 	.word	0xfffeffff
 8001d44:	fffbffff 	.word	0xfffbffff
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	efffffff 	.word	0xefffffff
 8001d50:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d54:	220c      	movs	r2, #12
 8001d56:	4d55      	ldr	r5, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x490>)
 8001d58:	686b      	ldr	r3, [r5, #4]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d60:	686b      	ldr	r3, [r5, #4]
 8001d62:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d10e      	bne.n	8001d86 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d68:	22c0      	movs	r2, #192	; 0xc0
 8001d6a:	686b      	ldr	r3, [r5, #4]
 8001d6c:	0252      	lsls	r2, r2, #9
 8001d6e:	4013      	ands	r3, r2
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d76:	039b      	lsls	r3, r3, #14
 8001d78:	d400      	bmi.n	8001d7c <HAL_RCC_OscConfig+0x360>
 8001d7a:	e685      	b.n	8001a88 <HAL_RCC_OscConfig+0x6c>
 8001d7c:	6a23      	ldr	r3, [r4, #32]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d000      	beq.n	8001d84 <HAL_RCC_OscConfig+0x368>
 8001d82:	e69f      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
 8001d84:	e680      	b.n	8001a88 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d86:	6a23      	ldr	r3, [r4, #32]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	4313      	orrs	r3, r2
 8001d94:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001d96:	f7fe fe8f 	bl	8000ab8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d9a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001d9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d9e:	02bf      	lsls	r7, r7, #10
 8001da0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001da2:	423b      	tst	r3, r7
 8001da4:	d000      	beq.n	8001da8 <HAL_RCC_OscConfig+0x38c>
 8001da6:	e66f      	b.n	8001a88 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da8:	f7fe fe86 	bl	8000ab8 <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d9f6      	bls.n	8001da0 <HAL_RCC_OscConfig+0x384>
 8001db2:	e69e      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8001db4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001db8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001dba:	4013      	ands	r3, r2
 8001dbc:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fe7b 	bl	8000ab8 <HAL_GetTick>
 8001dc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dc4:	02bf      	lsls	r7, r7, #10
 8001dc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001dc8:	423b      	tst	r3, r7
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x3b2>
 8001dcc:	e65c      	b.n	8001a88 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dce:	f7fe fe73 	bl	8000ab8 <HAL_GetTick>
 8001dd2:	1b80      	subs	r0, r0, r6
 8001dd4:	2802      	cmp	r0, #2
 8001dd6:	d9f6      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x3aa>
 8001dd8:	e68b      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dda:	210c      	movs	r1, #12
 8001ddc:	4d33      	ldr	r5, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x490>)
 8001dde:	686a      	ldr	r2, [r5, #4]
 8001de0:	400a      	ands	r2, r1
 8001de2:	2a08      	cmp	r2, #8
 8001de4:	d047      	beq.n	8001e76 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x498>)
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d132      	bne.n	8001e52 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001dec:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4013      	ands	r3, r2
 8001df2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe60 	bl	8000ab8 <HAL_GetTick>
 8001df8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	04bf      	lsls	r7, r7, #18
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	423b      	tst	r3, r7
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	220f      	movs	r2, #15
 8001e04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e06:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e08:	4393      	bics	r3, r2
 8001e0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001e12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e16:	686a      	ldr	r2, [r5, #4]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	4927      	ldr	r1, [pc, #156]	; (8001eb8 <HAL_RCC_OscConfig+0x49c>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	682a      	ldr	r2, [r5, #0]
 8001e26:	045b      	lsls	r3, r3, #17
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fe44 	bl	8000ab8 <HAL_GetTick>
 8001e30:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	4233      	tst	r3, r6
 8001e36:	d000      	beq.n	8001e3a <HAL_RCC_OscConfig+0x41e>
 8001e38:	e62a      	b.n	8001a90 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7fe fe3d 	bl	8000ab8 <HAL_GetTick>
 8001e3e:	1b00      	subs	r0, r0, r4
 8001e40:	2802      	cmp	r0, #2
 8001e42:	d9f6      	bls.n	8001e32 <HAL_RCC_OscConfig+0x416>
 8001e44:	e655      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7fe fe37 	bl	8000ab8 <HAL_GetTick>
 8001e4a:	1b80      	subs	r0, r0, r6
 8001e4c:	2802      	cmp	r0, #2
 8001e4e:	d9d5      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3e0>
 8001e50:	e64f      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001e52:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4013      	ands	r3, r2
 8001e58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fe2d 	bl	8000ab8 <HAL_GetTick>
 8001e5e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	04b6      	lsls	r6, r6, #18
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	4233      	tst	r3, r6
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_OscConfig+0x44e>
 8001e68:	e612      	b.n	8001a90 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fe25 	bl	8000ab8 <HAL_GetTick>
 8001e6e:	1b00      	subs	r0, r0, r4
 8001e70:	2802      	cmp	r0, #2
 8001e72:	d9f6      	bls.n	8001e62 <HAL_RCC_OscConfig+0x446>
 8001e74:	e63d      	b.n	8001af2 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d100      	bne.n	8001e7c <HAL_RCC_OscConfig+0x460>
 8001e7a:	e623      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7c:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001e7e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e82:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001e84:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	4019      	ands	r1, r3
 8001e88:	4281      	cmp	r1, r0
 8001e8a:	d000      	beq.n	8001e8e <HAL_RCC_OscConfig+0x472>
 8001e8c:	e61a      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e8e:	210f      	movs	r1, #15
 8001e90:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e94:	428a      	cmp	r2, r1
 8001e96:	d000      	beq.n	8001e9a <HAL_RCC_OscConfig+0x47e>
 8001e98:	e614      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e9a:	22f0      	movs	r2, #240	; 0xf0
 8001e9c:	0392      	lsls	r2, r2, #14
 8001e9e:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x48c>
 8001ea6:	e5f3      	b.n	8001a90 <HAL_RCC_OscConfig+0x74>
 8001ea8:	e60c      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	fffeffff 	.word	0xfffeffff
 8001eb4:	feffffff 	.word	0xfeffffff
 8001eb8:	ffc27fff 	.word	0xffc27fff

08001ebc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	200c      	movs	r0, #12
{
 8001ebe:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001ec0:	4d13      	ldr	r5, [pc, #76]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ec2:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec4:	4018      	ands	r0, r3
 8001ec6:	2808      	cmp	r0, #8
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x20>
 8001eca:	380c      	subs	r0, #12
 8001ecc:	1e43      	subs	r3, r0, #1
 8001ece:	4198      	sbcs	r0, r3
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ed2:	4240      	negs	r0, r0
 8001ed4:	4018      	ands	r0, r3
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001ed8:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001edc:	200f      	movs	r0, #15
 8001ede:	490f      	ldr	r1, [pc, #60]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x60>)
 8001ee0:	0c9a      	lsrs	r2, r3, #18
 8001ee2:	4002      	ands	r2, r0
 8001ee4:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ee6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001ee8:	490d      	ldr	r1, [pc, #52]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x64>)
 8001eea:	4002      	ands	r2, r0
 8001eec:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eee:	22c0      	movs	r2, #192	; 0xc0
 8001ef0:	2080      	movs	r0, #128	; 0x80
 8001ef2:	0252      	lsls	r2, r2, #9
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0240      	lsls	r0, r0, #9
 8001ef8:	4283      	cmp	r3, r0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x68>)
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d1fb      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f06:	f7fe f91b 	bl	8000140 <__udivsi3>
 8001f0a:	4360      	muls	r0, r4
 8001f0c:	e7e5      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x1e>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	fd9da600 	.word	0xfd9da600
 8001f18:	02dc6c00 	.word	0x02dc6c00
 8001f1c:	080042ea 	.word	0x080042ea
 8001f20:	080042fa 	.word	0x080042fa
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_ClockConfig>:
{
 8001f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f2a:	0004      	movs	r4, r0
 8001f2c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
}
 8001f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f36:	2201      	movs	r2, #1
 8001f38:	4d3a      	ldr	r5, [pc, #232]	; (8002024 <HAL_RCC_ClockConfig+0xfc>)
 8001f3a:	682b      	ldr	r3, [r5, #0]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	428b      	cmp	r3, r1
 8001f40:	d31c      	bcc.n	8001f7c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	0793      	lsls	r3, r2, #30
 8001f46:	d422      	bmi.n	8001f8e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f48:	07d2      	lsls	r2, r2, #31
 8001f4a:	d42f      	bmi.n	8001fac <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	682a      	ldr	r2, [r5, #0]
 8001f50:	401a      	ands	r2, r3
 8001f52:	42ba      	cmp	r2, r7
 8001f54:	d857      	bhi.n	8002006 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	4d33      	ldr	r5, [pc, #204]	; (8002028 <HAL_RCC_ClockConfig+0x100>)
 8001f5a:	075b      	lsls	r3, r3, #29
 8001f5c:	d45a      	bmi.n	8002014 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f5e:	f7ff ffad 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001f62:	686b      	ldr	r3, [r5, #4]
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_RCC_ClockConfig+0x104>)
 8001f66:	061b      	lsls	r3, r3, #24
 8001f68:	0f1b      	lsrs	r3, r3, #28
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	4930      	ldr	r1, [pc, #192]	; (8002030 <HAL_RCC_ClockConfig+0x108>)
 8001f6e:	40d8      	lsrs	r0, r3
 8001f70:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe fd60 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 8001f78:	2000      	movs	r0, #0
 8001f7a:	e7db      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	4393      	bics	r3, r2
 8001f80:	430b      	orrs	r3, r1
 8001f82:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	4013      	ands	r3, r2
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d1d2      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xa>
 8001f8c:	e7d9      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8e:	4926      	ldr	r1, [pc, #152]	; (8002028 <HAL_RCC_ClockConfig+0x100>)
 8001f90:	0753      	lsls	r3, r2, #29
 8001f92:	d504      	bpl.n	8001f9e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f94:	23e0      	movs	r3, #224	; 0xe0
 8001f96:	6848      	ldr	r0, [r1, #4]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9e:	20f0      	movs	r0, #240	; 0xf0
 8001fa0:	684b      	ldr	r3, [r1, #4]
 8001fa2:	4383      	bics	r3, r0
 8001fa4:	68a0      	ldr	r0, [r4, #8]
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e7cd      	b.n	8001f48 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	6862      	ldr	r2, [r4, #4]
 8001fae:	4e1e      	ldr	r6, [pc, #120]	; (8002028 <HAL_RCC_ClockConfig+0x100>)
 8001fb0:	2a01      	cmp	r2, #1
 8001fb2:	d103      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb4:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fb6:	039b      	lsls	r3, r3, #14
 8001fb8:	d405      	bmi.n	8001fc6 <HAL_RCC_ClockConfig+0x9e>
 8001fba:	e7ba      	b.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbc:	2a02      	cmp	r2, #2
 8001fbe:	d11a      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	6833      	ldr	r3, [r6, #0]
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	d5b5      	bpl.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	6873      	ldr	r3, [r6, #4]
 8001fca:	438b      	bics	r3, r1
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fd72 	bl	8000ab8 <HAL_GetTick>
 8001fd4:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	6872      	ldr	r2, [r6, #4]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	6863      	ldr	r3, [r4, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d0b3      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fd68 	bl	8000ab8 <HAL_GetTick>
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	1ac0      	subs	r0, r0, r3
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_ClockConfig+0x10c>)
 8001fee:	4298      	cmp	r0, r3
 8001ff0:	d9f1      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e79e      	b.n	8001f34 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ff6:	2a03      	cmp	r2, #3
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ffa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001ffc:	e7db      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	079b      	lsls	r3, r3, #30
 8002002:	d4e0      	bmi.n	8001fc6 <HAL_RCC_ClockConfig+0x9e>
 8002004:	e795      	b.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	682a      	ldr	r2, [r5, #0]
 8002008:	439a      	bics	r2, r3
 800200a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200c:	682a      	ldr	r2, [r5, #0]
 800200e:	421a      	tst	r2, r3
 8002010:	d0a1      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x2e>
 8002012:	e78e      	b.n	8001f32 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	686b      	ldr	r3, [r5, #4]
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_ClockConfig+0x110>)
 8002018:	4013      	ands	r3, r2
 800201a:	68e2      	ldr	r2, [r4, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	606b      	str	r3, [r5, #4]
 8002020:	e79d      	b.n	8001f5e <HAL_RCC_ClockConfig+0x36>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	080042d2 	.word	0x080042d2
 8002030:	20000084 	.word	0x20000084
 8002034:	00001388 	.word	0x00001388
 8002038:	fffff8ff 	.word	0xfffff8ff

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4905      	ldr	r1, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002044:	055b      	lsls	r3, r3, #21
 8002046:	0f5b      	lsrs	r3, r3, #29
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	6810      	ldr	r0, [r2, #0]
 800204c:	40d8      	lsrs	r0, r3
}    
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	20000084 	.word	0x20000084
 8002058:	080042e2 	.word	0x080042e2

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800205e:	6803      	ldr	r3, [r0, #0]
{
 8002060:	0005      	movs	r5, r0
 8002062:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002064:	03db      	lsls	r3, r3, #15
 8002066:	d52b      	bpl.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002068:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4c41      	ldr	r4, [pc, #260]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800206e:	0552      	lsls	r2, r2, #21
 8002070:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002072:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002074:	4213      	tst	r3, r2
 8002076:	d108      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	69e3      	ldr	r3, [r4, #28]
 800207a:	4313      	orrs	r3, r2
 800207c:	61e3      	str	r3, [r4, #28]
 800207e:	69e3      	ldr	r3, [r4, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	9303      	str	r3, [sp, #12]
 8002084:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	2780      	movs	r7, #128	; 0x80
 800208c:	4e3a      	ldr	r6, [pc, #232]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800208e:	007f      	lsls	r7, r7, #1
 8002090:	6833      	ldr	r3, [r6, #0]
 8002092:	423b      	tst	r3, r7
 8002094:	d03b      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002096:	6a21      	ldr	r1, [r4, #32]
 8002098:	22c0      	movs	r2, #192	; 0xc0
 800209a:	0008      	movs	r0, r1
 800209c:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209e:	686b      	ldr	r3, [r5, #4]
 80020a0:	4e36      	ldr	r6, [pc, #216]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020a2:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a4:	4211      	tst	r1, r2
 80020a6:	d144      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	6a23      	ldr	r3, [r4, #32]
 80020aa:	686a      	ldr	r2, [r5, #4]
 80020ac:	4033      	ands	r3, r6
 80020ae:	4313      	orrs	r3, r2
 80020b0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b2:	9b00      	ldr	r3, [sp, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d103      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b8:	69e3      	ldr	r3, [r4, #28]
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80020bc:	4013      	ands	r3, r2
 80020be:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	07da      	lsls	r2, r3, #31
 80020c4:	d506      	bpl.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c6:	2003      	movs	r0, #3
 80020c8:	492a      	ldr	r1, [pc, #168]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80020ca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80020cc:	4382      	bics	r2, r0
 80020ce:	68a8      	ldr	r0, [r5, #8]
 80020d0:	4302      	orrs	r2, r0
 80020d2:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d4:	069a      	lsls	r2, r3, #26
 80020d6:	d506      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d8:	2010      	movs	r0, #16
 80020da:	4926      	ldr	r1, [pc, #152]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80020dc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80020de:	4382      	bics	r2, r0
 80020e0:	68e8      	ldr	r0, [r5, #12]
 80020e2:	4302      	orrs	r2, r0
 80020e4:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020e6:	039a      	lsls	r2, r3, #14
 80020e8:	d506      	bpl.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ea:	2080      	movs	r0, #128	; 0x80
 80020ec:	4921      	ldr	r1, [pc, #132]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80020ee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80020f0:	4382      	bics	r2, r0
 80020f2:	6968      	ldr	r0, [r5, #20]
 80020f4:	4302      	orrs	r2, r0
 80020f6:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	d517      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002102:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002104:	438b      	bics	r3, r1
 8002106:	6929      	ldr	r1, [r5, #16]
 8002108:	430b      	orrs	r3, r1
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	e00f      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	6833      	ldr	r3, [r6, #0]
 8002110:	433b      	orrs	r3, r7
 8002112:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002114:	f7fe fcd0 	bl	8000ab8 <HAL_GetTick>
 8002118:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	423b      	tst	r3, r7
 800211e:	d1ba      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fcca 	bl	8000ab8 <HAL_GetTick>
 8002124:	9b01      	ldr	r3, [sp, #4]
 8002126:	1ac0      	subs	r0, r0, r3
 8002128:	2864      	cmp	r0, #100	; 0x64
 800212a:	d9f6      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800212c:	2003      	movs	r0, #3
}
 800212e:	b005      	add	sp, #20
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002132:	4013      	ands	r3, r2
 8002134:	4283      	cmp	r3, r0
 8002136:	d0b7      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002138:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800213a:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800213c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800213e:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002140:	0252      	lsls	r2, r2, #9
 8002142:	4302      	orrs	r2, r0
 8002144:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002146:	6a22      	ldr	r2, [r4, #32]
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800214a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214c:	4002      	ands	r2, r0
 800214e:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8002150:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002152:	07db      	lsls	r3, r3, #31
 8002154:	d5a8      	bpl.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002156:	f7fe fcaf 	bl	8000ab8 <HAL_GetTick>
 800215a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	2202      	movs	r2, #2
 800215e:	6a23      	ldr	r3, [r4, #32]
 8002160:	4213      	tst	r3, r2
 8002162:	d1a1      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fca8 	bl	8000ab8 <HAL_GetTick>
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800216a:	1bc0      	subs	r0, r0, r7
 800216c:	4298      	cmp	r0, r3
 800216e:	d9f5      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002170:	e7dc      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	fffffcff 	.word	0xfffffcff
 8002180:	efffffff 	.word	0xefffffff
 8002184:	fffeffff 	.word	0xfffeffff
 8002188:	00001388 	.word	0x00001388

0800218c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002192:	2c00      	cmp	r4, #0
 8002194:	d066      	beq.n	8002264 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d164      	bne.n	8002266 <HAL_SPI_Init+0xda>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800219c:	2282      	movs	r2, #130	; 0x82
 800219e:	6861      	ldr	r1, [r4, #4]
 80021a0:	0052      	lsls	r2, r2, #1
 80021a2:	4291      	cmp	r1, r2
 80021a4:	d000      	beq.n	80021a8 <HAL_SPI_Init+0x1c>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021a6:	61e3      	str	r3, [r4, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021aa:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ac:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ae:	355d      	adds	r5, #93	; 0x5d
 80021b0:	782b      	ldrb	r3, [r5, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_SPI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b8:	0023      	movs	r3, r4
 80021ba:	335c      	adds	r3, #92	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021bc:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80021be:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80021c0:	f7fe faf0 	bl	80007a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c4:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c6:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80021c8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80021ca:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021cc:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d2:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 80021d4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d6:	00c9      	lsls	r1, r1, #3
 80021d8:	2300      	movs	r3, #0
 80021da:	428e      	cmp	r6, r1
 80021dc:	d847      	bhi.n	800226e <HAL_SPI_Init+0xe2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021de:	2080      	movs	r0, #128	; 0x80
 80021e0:	0140      	lsls	r0, r0, #5
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021e2:	428e      	cmp	r6, r1
 80021e4:	d000      	beq.n	80021e8 <HAL_SPI_Init+0x5c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e6:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e8:	2182      	movs	r1, #130	; 0x82
 80021ea:	2784      	movs	r7, #132	; 0x84
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	0049      	lsls	r1, r1, #1
 80021f0:	400b      	ands	r3, r1
 80021f2:	68a1      	ldr	r1, [r4, #8]
 80021f4:	023f      	lsls	r7, r7, #8
 80021f6:	4039      	ands	r1, r7
 80021f8:	2702      	movs	r7, #2
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6921      	ldr	r1, [r4, #16]
 80021fe:	69a5      	ldr	r5, [r4, #24]
 8002200:	4039      	ands	r1, r7
 8002202:	430b      	orrs	r3, r1
 8002204:	2101      	movs	r1, #1
 8002206:	6967      	ldr	r7, [r4, #20]
 8002208:	400f      	ands	r7, r1
 800220a:	433b      	orrs	r3, r7
 800220c:	2780      	movs	r7, #128	; 0x80
 800220e:	00bf      	lsls	r7, r7, #2
 8002210:	402f      	ands	r7, r5
 8002212:	433b      	orrs	r3, r7
 8002214:	69e7      	ldr	r7, [r4, #28]
 8002216:	3137      	adds	r1, #55	; 0x37
 8002218:	400f      	ands	r7, r1
 800221a:	433b      	orrs	r3, r7
 800221c:	6a27      	ldr	r7, [r4, #32]
 800221e:	3148      	adds	r1, #72	; 0x48
 8002220:	400f      	ands	r7, r1
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	433b      	orrs	r3, r7
 8002226:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002228:	0189      	lsls	r1, r1, #6
 800222a:	400f      	ands	r7, r1
 800222c:	433b      	orrs	r3, r7
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800222e:	2710      	movs	r7, #16
 8002230:	2108      	movs	r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002232:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002236:	0c2d      	lsrs	r5, r5, #16
 8002238:	403b      	ands	r3, r7
 800223a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800223c:	400f      	ands	r7, r1
 800223e:	433b      	orrs	r3, r7
 8002240:	27f0      	movs	r7, #240	; 0xf0
 8002242:	013f      	lsls	r7, r7, #4
 8002244:	403e      	ands	r6, r7
 8002246:	4333      	orrs	r3, r6
 8002248:	2604      	movs	r6, #4
 800224a:	4035      	ands	r5, r6
 800224c:	432b      	orrs	r3, r5
 800224e:	4303      	orrs	r3, r0
 8002250:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002252:	69d3      	ldr	r3, [r2, #28]
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <HAL_SPI_Init+0xec>)
 8002256:	4003      	ands	r3, r0
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002258:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800225a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800225c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800225e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002260:	345d      	adds	r4, #93	; 0x5d
 8002262:	7023      	strb	r3, [r4, #0]

  return HAL_OK;
}
 8002264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800226a:	6163      	str	r3, [r4, #20]
 800226c:	e79c      	b.n	80021a8 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800226e:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002270:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002272:	0109      	lsls	r1, r1, #4
 8002274:	e7b5      	b.n	80021e2 <HAL_SPI_Init+0x56>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	fffff7ff 	.word	0xfffff7ff

0800227c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800227c:	0002      	movs	r2, r0
{
 800227e:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002282:	323d      	adds	r2, #61	; 0x3d
 8002284:	7811      	ldrb	r1, [r2, #0]
 8002286:	4281      	cmp	r1, r0
 8002288:	d119      	bne.n	80022be <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228a:	2102      	movs	r1, #2
 800228c:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4302      	orrs	r2, r0
 8002294:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_TIM_Base_Start_IT+0x50>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d006      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x2e>
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	05d2      	lsls	r2, r2, #23
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d002      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x2e>
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_TIM_Base_Start_IT+0x54>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10a      	bne.n	80022c0 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022aa:	2107      	movs	r1, #7
 80022ac:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	2a06      	cmp	r2, #6
 80022b4:	d003      	beq.n	80022be <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 80022b6:	2201      	movs	r2, #1
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
}
 80022be:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4302      	orrs	r2, r0
 80022c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80022c6:	2000      	movs	r0, #0
 80022c8:	e7f9      	b.n	80022be <HAL_TIM_Base_Start_IT+0x42>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40000400 	.word	0x40000400

080022d4 <HAL_TIM_OC_DelayElapsedCallback>:
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIM_IC_CaptureCallback>:
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80022d8:	4770      	bx	lr

080022da <HAL_TIM_TriggerCallback>:
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022dc:	2202      	movs	r2, #2
 80022de:	6803      	ldr	r3, [r0, #0]
{
 80022e0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e2:	6919      	ldr	r1, [r3, #16]
{
 80022e4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e6:	4211      	tst	r1, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	4211      	tst	r1, r2
 80022ee:	d00b      	beq.n	8002308 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f0:	3a05      	subs	r2, #5
 80022f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f4:	3204      	adds	r2, #4
 80022f6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d100      	bne.n	8002300 <HAL_TIM_IRQHandler+0x24>
 80022fe:	e079      	b.n	80023f4 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002300:	f7ff ffe9 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002304:	2300      	movs	r3, #0
 8002306:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002308:	2204      	movs	r2, #4
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	4211      	tst	r1, r2
 8002310:	d010      	beq.n	8002334 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002312:	68d9      	ldr	r1, [r3, #12]
 8002314:	4211      	tst	r1, r2
 8002316:	d00d      	beq.n	8002334 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002318:	3a09      	subs	r2, #9
 800231a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231c:	3207      	adds	r2, #7
 800231e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	23c0      	movs	r3, #192	; 0xc0
 8002324:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	421a      	tst	r2, r3
 800232a:	d069      	beq.n	8002400 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800232c:	f7ff ffd3 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002330:	2300      	movs	r3, #0
 8002332:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	2208      	movs	r2, #8
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	4211      	tst	r1, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	4211      	tst	r1, r2
 8002342:	d00b      	beq.n	800235c <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002344:	3a11      	subs	r2, #17
 8002346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002348:	320d      	adds	r2, #13
 800234a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800234c:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	079b      	lsls	r3, r3, #30
 8002352:	d05b      	beq.n	800240c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002354:	f7ff ffbf 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002358:	2300      	movs	r3, #0
 800235a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800235c:	2210      	movs	r2, #16
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	4211      	tst	r1, r2
 8002364:	d010      	beq.n	8002388 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	4211      	tst	r1, r2
 800236a:	d00d      	beq.n	8002388 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800236c:	3a21      	subs	r2, #33	; 0x21
 800236e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002370:	3219      	adds	r2, #25
 8002372:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	23c0      	movs	r3, #192	; 0xc0
 8002378:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800237c:	421a      	tst	r2, r3
 800237e:	d04b      	beq.n	8002418 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002380:	f7ff ffa9 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002384:	2300      	movs	r3, #0
 8002386:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002388:	2201      	movs	r2, #1
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	4211      	tst	r1, r2
 8002390:	d007      	beq.n	80023a2 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	4211      	tst	r1, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800239c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	f7fe f9a3 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	4211      	tst	r1, r2
 80023aa:	d008      	beq.n	80023be <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	4211      	tst	r1, r2
 80023b0:	d005      	beq.n	80023be <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b2:	3a02      	subs	r2, #2
 80023b4:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023ba:	f000 f976 	bl	80026aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	6919      	ldr	r1, [r3, #16]
 80023c4:	4211      	tst	r1, r2
 80023c6:	d007      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023c8:	68d9      	ldr	r1, [r3, #12]
 80023ca:	4211      	tst	r1, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ce:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023d4:	f7ff ff81 	bl	80022da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d8:	2220      	movs	r2, #32
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4211      	tst	r1, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e2:	68d9      	ldr	r1, [r3, #12]
 80023e4:	4211      	tst	r1, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e8:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ea:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	f000 f95b 	bl	80026a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f4:	f7ff ff6e 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	0020      	movs	r0, r4
 80023fa:	f7ff ff6d 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80023fe:	e781      	b.n	8002304 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002400:	f7ff ff68 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	0020      	movs	r0, r4
 8002406:	f7ff ff67 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800240a:	e791      	b.n	8002330 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240c:	f7ff ff62 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	0020      	movs	r0, r4
 8002412:	f7ff ff61 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002416:	e79f      	b.n	8002358 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002418:	f7ff ff5c 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	0020      	movs	r0, r4
 800241e:	f7ff ff5b 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002422:	e7af      	b.n	8002384 <HAL_TIM_IRQHandler+0xa8>

08002424 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <TIM_Base_SetConfig+0x78>)
{
 8002426:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002428:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800242a:	4290      	cmp	r0, r2
 800242c:	d006      	beq.n	800243c <TIM_Base_SetConfig+0x18>
 800242e:	2480      	movs	r4, #128	; 0x80
 8002430:	05e4      	lsls	r4, r4, #23
 8002432:	42a0      	cmp	r0, r4
 8002434:	d002      	beq.n	800243c <TIM_Base_SetConfig+0x18>
 8002436:	4c1a      	ldr	r4, [pc, #104]	; (80024a0 <TIM_Base_SetConfig+0x7c>)
 8002438:	42a0      	cmp	r0, r4
 800243a:	d10c      	bne.n	8002456 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	2470      	movs	r4, #112	; 0x70
 800243e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002440:	684c      	ldr	r4, [r1, #4]
 8002442:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002444:	4290      	cmp	r0, r2
 8002446:	d00f      	beq.n	8002468 <TIM_Base_SetConfig+0x44>
 8002448:	2480      	movs	r4, #128	; 0x80
 800244a:	05e4      	lsls	r4, r4, #23
 800244c:	42a0      	cmp	r0, r4
 800244e:	d00b      	beq.n	8002468 <TIM_Base_SetConfig+0x44>
 8002450:	4c13      	ldr	r4, [pc, #76]	; (80024a0 <TIM_Base_SetConfig+0x7c>)
 8002452:	42a0      	cmp	r0, r4
 8002454:	d008      	beq.n	8002468 <TIM_Base_SetConfig+0x44>
 8002456:	4c13      	ldr	r4, [pc, #76]	; (80024a4 <TIM_Base_SetConfig+0x80>)
 8002458:	42a0      	cmp	r0, r4
 800245a:	d005      	beq.n	8002468 <TIM_Base_SetConfig+0x44>
 800245c:	4c12      	ldr	r4, [pc, #72]	; (80024a8 <TIM_Base_SetConfig+0x84>)
 800245e:	42a0      	cmp	r0, r4
 8002460:	d002      	beq.n	8002468 <TIM_Base_SetConfig+0x44>
 8002462:	4c12      	ldr	r4, [pc, #72]	; (80024ac <TIM_Base_SetConfig+0x88>)
 8002464:	42a0      	cmp	r0, r4
 8002466:	d103      	bne.n	8002470 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002468:	4c11      	ldr	r4, [pc, #68]	; (80024b0 <TIM_Base_SetConfig+0x8c>)
 800246a:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246c:	68cb      	ldr	r3, [r1, #12]
 800246e:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002470:	2480      	movs	r4, #128	; 0x80
 8002472:	43a3      	bics	r3, r4
 8002474:	694c      	ldr	r4, [r1, #20]
 8002476:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002478:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800247a:	688b      	ldr	r3, [r1, #8]
 800247c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247e:	680b      	ldr	r3, [r1, #0]
 8002480:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002482:	4290      	cmp	r0, r2
 8002484:	d005      	beq.n	8002492 <TIM_Base_SetConfig+0x6e>
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <TIM_Base_SetConfig+0x84>)
 8002488:	4298      	cmp	r0, r3
 800248a:	d002      	beq.n	8002492 <TIM_Base_SetConfig+0x6e>
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <TIM_Base_SetConfig+0x88>)
 800248e:	4298      	cmp	r0, r3
 8002490:	d101      	bne.n	8002496 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002492:	690b      	ldr	r3, [r1, #16]
 8002494:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002496:	2301      	movs	r3, #1
 8002498:	6143      	str	r3, [r0, #20]
}
 800249a:	bd10      	pop	{r4, pc}
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40002000 	.word	0x40002000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	fffffcff 	.word	0xfffffcff

080024b4 <HAL_TIM_Base_Init>:
{
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
  if (htim == NULL)
 80024ba:	2c00      	cmp	r4, #0
 80024bc:	d021      	beq.n	8002502 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	0025      	movs	r5, r4
 80024c0:	353d      	adds	r5, #61	; 0x3d
 80024c2:	782b      	ldrb	r3, [r5, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80024ca:	0023      	movs	r3, r4
 80024cc:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024ce:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80024d0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80024d2:	f7fe fa07 	bl	80008e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80024d6:	2302      	movs	r3, #2
 80024d8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	1d21      	adds	r1, r4, #4
 80024de:	f7ff ffa1 	bl	8002424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e2:	0022      	movs	r2, r4
 80024e4:	2301      	movs	r3, #1
  return HAL_OK;
 80024e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e8:	3246      	adds	r2, #70	; 0x46
 80024ea:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	3a08      	subs	r2, #8
 80024f0:	7013      	strb	r3, [r2, #0]
 80024f2:	7053      	strb	r3, [r2, #1]
 80024f4:	7093      	strb	r3, [r2, #2]
 80024f6:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	7113      	strb	r3, [r2, #4]
 80024fa:	7153      	strb	r3, [r2, #5]
 80024fc:	7193      	strb	r3, [r2, #6]
 80024fe:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002500:	702b      	strb	r3, [r5, #0]
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}

08002504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002504:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002506:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	4d03      	ldr	r5, [pc, #12]	; (8002518 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800250a:	430a      	orrs	r2, r1
 800250c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002510:	4313      	orrs	r3, r2
 8002512:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002514:	6083      	str	r3, [r0, #8]
}
 8002516:	bd30      	pop	{r4, r5, pc}
 8002518:	ffff00ff 	.word	0xffff00ff

0800251c <HAL_TIM_ConfigClockSource>:
{
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800251e:	0005      	movs	r5, r0
 8002520:	2402      	movs	r4, #2
 8002522:	353c      	adds	r5, #60	; 0x3c
 8002524:	782a      	ldrb	r2, [r5, #0]
{
 8002526:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002528:	0020      	movs	r0, r4
 800252a:	2a01      	cmp	r2, #1
 800252c:	d01c      	beq.n	8002568 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 800252e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8002530:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002532:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8002534:	702a      	strb	r2, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002536:	7034      	strb	r4, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002538:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253a:	4843      	ldr	r0, [pc, #268]	; (8002648 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 800253c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002540:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002542:	680b      	ldr	r3, [r1, #0]
 8002544:	2b60      	cmp	r3, #96	; 0x60
 8002546:	d052      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0xd2>
 8002548:	d82f      	bhi.n	80025aa <HAL_TIM_ConfigClockSource+0x8e>
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d066      	beq.n	800261c <HAL_TIM_ConfigClockSource+0x100>
 800254e:	d814      	bhi.n	800257a <HAL_TIM_ConfigClockSource+0x5e>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d00c      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x52>
 8002554:	d809      	bhi.n	800256a <HAL_TIM_ConfigClockSource+0x4e>
 8002556:	2110      	movs	r1, #16
 8002558:	0018      	movs	r0, r3
 800255a:	4388      	bics	r0, r1
 800255c:	d007      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x52>
 800255e:	0010      	movs	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8002560:	2301      	movs	r3, #1
 8002562:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002564:	2300      	movs	r3, #0
 8002566:	702b      	strb	r3, [r5, #0]
}
 8002568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800256a:	2b30      	cmp	r3, #48	; 0x30
 800256c:	d1f7      	bne.n	800255e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 800256e:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002570:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002572:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002574:	4313      	orrs	r3, r2
 8002576:	2207      	movs	r2, #7
 8002578:	e02b      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 800257a:	2b50      	cmp	r3, #80	; 0x50
 800257c:	d1ef      	bne.n	800255e <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 800257e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002580:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002582:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002584:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002586:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002588:	4397      	bics	r7, r2
 800258a:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800258c:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800258e:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002590:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002592:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002594:	220a      	movs	r2, #10
 8002596:	4391      	bics	r1, r2
 8002598:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800259a:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800259c:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 800259e:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80025a0:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80025a2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a4:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a6:	3b19      	subs	r3, #25
 80025a8:	e013      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 80025aa:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 80025ae:	017f      	lsls	r7, r7, #5
 80025b0:	42bb      	cmp	r3, r7
 80025b2:	d0d5      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0x44>
 80025b4:	2080      	movs	r0, #128	; 0x80
 80025b6:	0180      	lsls	r0, r0, #6
 80025b8:	4283      	cmp	r3, r0
 80025ba:	d00e      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xbe>
 80025bc:	0010      	movs	r0, r2
 80025be:	2b70      	cmp	r3, #112	; 0x70
 80025c0:	d1ce      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	68cb      	ldr	r3, [r1, #12]
 80025c4:	684a      	ldr	r2, [r1, #4]
 80025c6:	0020      	movs	r0, r4
 80025c8:	6889      	ldr	r1, [r1, #8]
 80025ca:	f7ff ff9b 	bl	8002504 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ce:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80025d0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025d2:	4313      	orrs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80025d6:	60a3      	str	r3, [r4, #8]
}
 80025d8:	e7c2      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80025da:	68cb      	ldr	r3, [r1, #12]
 80025dc:	684a      	ldr	r2, [r1, #4]
 80025de:	0020      	movs	r0, r4
 80025e0:	6889      	ldr	r1, [r1, #8]
 80025e2:	f7ff ff8f 	bl	8002504 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	68a2      	ldr	r2, [r4, #8]
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	e7f1      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0xb6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	2010      	movs	r0, #16
                               sClockSourceConfig->ClockPolarity,
 80025f0:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80025f2:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f6:	4f15      	ldr	r7, [pc, #84]	; (800264c <HAL_TIM_ConfigClockSource+0x130>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f8:	4381      	bics	r1, r0
 80025fa:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fe:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002600:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002602:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002604:	20a0      	movs	r0, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002606:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002608:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260a:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 800260c:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800260e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8002610:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	2370      	movs	r3, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002614:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002616:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002618:	3b09      	subs	r3, #9
 800261a:	e7da      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0xb6>
                               sClockSourceConfig->ClockPolarity,
 800261c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800261e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002620:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002622:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002624:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002626:	4397      	bics	r7, r2
 8002628:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800262a:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800262c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800262e:	43ba      	bics	r2, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002630:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002632:	220a      	movs	r2, #10
 8002634:	4391      	bics	r1, r2
 8002636:	000a      	movs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002638:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800263a:	2370      	movs	r3, #112	; 0x70
  tmpccer |= TIM_ICPolarity;
 800263c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800263e:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002640:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002642:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002644:	3b29      	subs	r3, #41	; 0x29
 8002646:	e7c4      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0xb6>
 8002648:	ffff0088 	.word	0xffff0088
 800264c:	ffff0fff 	.word	0xffff0fff

08002650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002650:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002652:	0004      	movs	r4, r0
 8002654:	2202      	movs	r2, #2
 8002656:	343c      	adds	r4, #60	; 0x3c
 8002658:	7825      	ldrb	r5, [r4, #0]
{
 800265a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800265c:	0010      	movs	r0, r2
 800265e:	2d01      	cmp	r5, #1
 8002660:	d01d      	beq.n	800269e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002664:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002666:	353d      	adds	r5, #61	; 0x3d
 8002668:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800266e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002670:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002672:	680e      	ldr	r6, [r1, #0]
 8002674:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002676:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800267a:	4283      	cmp	r3, r0
 800267c:	d006      	beq.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800267e:	2080      	movs	r0, #128	; 0x80
 8002680:	05c0      	lsls	r0, r0, #23
 8002682:	4283      	cmp	r3, r0
 8002684:	d002      	beq.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002688:	4283      	cmp	r3, r0
 800268a:	d104      	bne.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800268e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002690:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002692:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002696:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002698:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800269a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800269c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40000400 	.word	0x40000400

080026a8 <HAL_TIMEx_CommutCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_TIMEx_BreakCallback>:
 80026aa:	4770      	bx	lr

080026ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ac:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ae:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	2201      	movs	r2, #1
 80026b4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b8:	6801      	ldr	r1, [r0, #0]
 80026ba:	4d12      	ldr	r5, [pc, #72]	; (8002704 <UART_EndRxTransfer+0x58>)
 80026bc:	680b      	ldr	r3, [r1, #0]
 80026be:	402b      	ands	r3, r5
 80026c0:	600b      	str	r3, [r1, #0]
 80026c2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	6801      	ldr	r1, [r0, #0]
 80026d0:	688b      	ldr	r3, [r1, #8]
 80026d2:	4393      	bics	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
 80026d6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026da:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10a      	bne.n	80026f6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e8:	2410      	movs	r4, #16
 80026ea:	6802      	ldr	r2, [r0, #0]
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	43a3      	bics	r3, r4
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f6:	2220      	movs	r2, #32
 80026f8:	1d03      	adds	r3, r0, #4
 80026fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fc:	2300      	movs	r3, #0
 80026fe:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002700:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002702:	bd30      	pop	{r4, r5, pc}
 8002704:	fffffedf 	.word	0xfffffedf

08002708 <UART_SetConfig>:
{
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270c:	6925      	ldr	r5, [r4, #16]
 800270e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002710:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002712:	432a      	orrs	r2, r5
 8002714:	6965      	ldr	r5, [r4, #20]
 8002716:	69c3      	ldr	r3, [r0, #28]
 8002718:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271a:	6808      	ldr	r0, [r1, #0]
 800271c:	4d3d      	ldr	r5, [pc, #244]	; (8002814 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800271e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002720:	4028      	ands	r0, r5
 8002722:	4302      	orrs	r2, r0
 8002724:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	483b      	ldr	r0, [pc, #236]	; (8002818 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 800272a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800272c:	4002      	ands	r2, r0
 800272e:	68e0      	ldr	r0, [r4, #12]
 8002730:	4302      	orrs	r2, r0
 8002732:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002734:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002736:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002738:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800273a:	4d38      	ldr	r5, [pc, #224]	; (800281c <UART_SetConfig+0x114>)
 800273c:	4028      	ands	r0, r5
 800273e:	4302      	orrs	r2, r0
 8002740:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002742:	4a37      	ldr	r2, [pc, #220]	; (8002820 <UART_SetConfig+0x118>)
 8002744:	4291      	cmp	r1, r2
 8002746:	d115      	bne.n	8002774 <UART_SetConfig+0x6c>
 8002748:	2103      	movs	r1, #3
 800274a:	4a36      	ldr	r2, [pc, #216]	; (8002824 <UART_SetConfig+0x11c>)
 800274c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800274e:	400a      	ands	r2, r1
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	3a01      	subs	r2, #1
 8002754:	0209      	lsls	r1, r1, #8
 8002756:	2a02      	cmp	r2, #2
 8002758:	d850      	bhi.n	80027fc <UART_SetConfig+0xf4>
 800275a:	4833      	ldr	r0, [pc, #204]	; (8002828 <UART_SetConfig+0x120>)
 800275c:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	428b      	cmp	r3, r1
 8002760:	d014      	beq.n	800278c <UART_SetConfig+0x84>
    switch (clocksource)
 8002762:	2808      	cmp	r0, #8
 8002764:	d848      	bhi.n	80027f8 <UART_SetConfig+0xf0>
 8002766:	f7fd fcd7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800276a:	470c      	.short	0x470c
 800276c:	47424745 	.word	0x47424745
 8002770:	4747      	.short	0x4747
 8002772:	33          	.byte	0x33
 8002773:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <UART_SetConfig+0x124>)
 8002776:	4291      	cmp	r1, r2
 8002778:	d13e      	bne.n	80027f8 <UART_SetConfig+0xf0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0212      	lsls	r2, r2, #8
 800277e:	4293      	cmp	r3, r2
 8002780:	d03e      	beq.n	8002800 <UART_SetConfig+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002782:	f7ff fc5b 	bl	800203c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002786:	2800      	cmp	r0, #0
 8002788:	d03e      	beq.n	8002808 <UART_SetConfig+0x100>
 800278a:	e023      	b.n	80027d4 <UART_SetConfig+0xcc>
    switch (clocksource)
 800278c:	2808      	cmp	r0, #8
 800278e:	d833      	bhi.n	80027f8 <UART_SetConfig+0xf0>
 8002790:	f7fd fcc2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002794:	32083236 	.word	0x32083236
 8002798:	32323205 	.word	0x32323205
 800279c:	09          	.byte	0x09
 800279d:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800279e:	f7ff fb8d 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 80027a2:	e02f      	b.n	8002804 <UART_SetConfig+0xfc>
    switch (clocksource)
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027a6:	6861      	ldr	r1, [r4, #4]
 80027a8:	0058      	lsls	r0, r3, #1
 80027aa:	084b      	lsrs	r3, r1, #1
 80027ac:	18c0      	adds	r0, r0, r3
 80027ae:	f7fd fcc7 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b2:	0002      	movs	r2, r0
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <UART_SetConfig+0x12c>)
 80027b6:	3a10      	subs	r2, #16
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d81d      	bhi.n	80027f8 <UART_SetConfig+0xf0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027bc:	230f      	movs	r3, #15
 80027be:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027c2:	439a      	bics	r2, r3
 80027c4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	4303      	orrs	r3, r0
 80027cc:	60d3      	str	r3, [r2, #12]
 80027ce:	e01b      	b.n	8002808 <UART_SetConfig+0x100>
    switch (clocksource)
 80027d0:	2080      	movs	r0, #128	; 0x80
 80027d2:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027d4:	6861      	ldr	r1, [r4, #4]
 80027d6:	084b      	lsrs	r3, r1, #1
 80027d8:	1818      	adds	r0, r3, r0
 80027da:	f7fd fcb1 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027de:	0002      	movs	r2, r0
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <UART_SetConfig+0x12c>)
 80027e2:	3a10      	subs	r2, #16
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d807      	bhi.n	80027f8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	60d8      	str	r0, [r3, #12]
 80027ec:	e00c      	b.n	8002808 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetSysClockFreq();
 80027ee:	f7ff fb65 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
        break;
 80027f2:	e7c8      	b.n	8002786 <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 80027f4:	480e      	ldr	r0, [pc, #56]	; (8002830 <UART_SetConfig+0x128>)
 80027f6:	e7ed      	b.n	80027d4 <UART_SetConfig+0xcc>
    switch (clocksource)
 80027f8:	2001      	movs	r0, #1
 80027fa:	e006      	b.n	800280a <UART_SetConfig+0x102>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d1c0      	bne.n	8002782 <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002800:	f7ff fc1c 	bl	800203c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002804:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002806:	d1ce      	bne.n	80027a6 <UART_SetConfig+0x9e>
 8002808:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800280e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	efff69f3 	.word	0xefff69f3
 8002818:	ffffcfff 	.word	0xffffcfff
 800281c:	fffff4ff 	.word	0xfffff4ff
 8002820:	40013800 	.word	0x40013800
 8002824:	40021000 	.word	0x40021000
 8002828:	0800430a 	.word	0x0800430a
 800282c:	40004400 	.word	0x40004400
 8002830:	007a1200 	.word	0x007a1200
 8002834:	0000ffef 	.word	0x0000ffef

08002838 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002838:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800283a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800283c:	07da      	lsls	r2, r3, #31
 800283e:	d506      	bpl.n	800284e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002840:	6801      	ldr	r1, [r0, #0]
 8002842:	4c28      	ldr	r4, [pc, #160]	; (80028e4 <UART_AdvFeatureConfig+0xac>)
 8002844:	684a      	ldr	r2, [r1, #4]
 8002846:	4022      	ands	r2, r4
 8002848:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800284a:	4322      	orrs	r2, r4
 800284c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800284e:	079a      	lsls	r2, r3, #30
 8002850:	d506      	bpl.n	8002860 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002852:	6801      	ldr	r1, [r0, #0]
 8002854:	4c24      	ldr	r4, [pc, #144]	; (80028e8 <UART_AdvFeatureConfig+0xb0>)
 8002856:	684a      	ldr	r2, [r1, #4]
 8002858:	4022      	ands	r2, r4
 800285a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800285c:	4322      	orrs	r2, r4
 800285e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002860:	075a      	lsls	r2, r3, #29
 8002862:	d506      	bpl.n	8002872 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002864:	6801      	ldr	r1, [r0, #0]
 8002866:	4c21      	ldr	r4, [pc, #132]	; (80028ec <UART_AdvFeatureConfig+0xb4>)
 8002868:	684a      	ldr	r2, [r1, #4]
 800286a:	4022      	ands	r2, r4
 800286c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800286e:	4322      	orrs	r2, r4
 8002870:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002872:	071a      	lsls	r2, r3, #28
 8002874:	d506      	bpl.n	8002884 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002876:	6801      	ldr	r1, [r0, #0]
 8002878:	4c1d      	ldr	r4, [pc, #116]	; (80028f0 <UART_AdvFeatureConfig+0xb8>)
 800287a:	684a      	ldr	r2, [r1, #4]
 800287c:	4022      	ands	r2, r4
 800287e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002880:	4322      	orrs	r2, r4
 8002882:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002884:	06da      	lsls	r2, r3, #27
 8002886:	d506      	bpl.n	8002896 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002888:	6801      	ldr	r1, [r0, #0]
 800288a:	4c1a      	ldr	r4, [pc, #104]	; (80028f4 <UART_AdvFeatureConfig+0xbc>)
 800288c:	688a      	ldr	r2, [r1, #8]
 800288e:	4022      	ands	r2, r4
 8002890:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002892:	4322      	orrs	r2, r4
 8002894:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002896:	069a      	lsls	r2, r3, #26
 8002898:	d506      	bpl.n	80028a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800289a:	6801      	ldr	r1, [r0, #0]
 800289c:	4c16      	ldr	r4, [pc, #88]	; (80028f8 <UART_AdvFeatureConfig+0xc0>)
 800289e:	688a      	ldr	r2, [r1, #8]
 80028a0:	4022      	ands	r2, r4
 80028a2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028a4:	4322      	orrs	r2, r4
 80028a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a8:	065a      	lsls	r2, r3, #25
 80028aa:	d510      	bpl.n	80028ce <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ac:	6801      	ldr	r1, [r0, #0]
 80028ae:	4d13      	ldr	r5, [pc, #76]	; (80028fc <UART_AdvFeatureConfig+0xc4>)
 80028b0:	684a      	ldr	r2, [r1, #4]
 80028b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b4:	402a      	ands	r2, r5
 80028b6:	4322      	orrs	r2, r4
 80028b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	0352      	lsls	r2, r2, #13
 80028be:	4294      	cmp	r4, r2
 80028c0:	d105      	bne.n	80028ce <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028c2:	684a      	ldr	r2, [r1, #4]
 80028c4:	4c0e      	ldr	r4, [pc, #56]	; (8002900 <UART_AdvFeatureConfig+0xc8>)
 80028c6:	4022      	ands	r2, r4
 80028c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028ca:	4322      	orrs	r2, r4
 80028cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	d506      	bpl.n	80028e0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d2:	6802      	ldr	r2, [r0, #0]
 80028d4:	490b      	ldr	r1, [pc, #44]	; (8002904 <UART_AdvFeatureConfig+0xcc>)
 80028d6:	6853      	ldr	r3, [r2, #4]
 80028d8:	400b      	ands	r3, r1
 80028da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028dc:	430b      	orrs	r3, r1
 80028de:	6053      	str	r3, [r2, #4]
}
 80028e0:	bd30      	pop	{r4, r5, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	fffdffff 	.word	0xfffdffff
 80028e8:	fffeffff 	.word	0xfffeffff
 80028ec:	fffbffff 	.word	0xfffbffff
 80028f0:	ffff7fff 	.word	0xffff7fff
 80028f4:	ffffefff 	.word	0xffffefff
 80028f8:	ffffdfff 	.word	0xffffdfff
 80028fc:	ffefffff 	.word	0xffefffff
 8002900:	ff9fffff 	.word	0xff9fffff
 8002904:	fff7ffff 	.word	0xfff7ffff

08002908 <UART_WaitOnFlagUntilTimeout>:
{
 8002908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800290a:	0004      	movs	r4, r0
 800290c:	000d      	movs	r5, r1
 800290e:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002910:	2608      	movs	r6, #8
{
 8002912:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	69d3      	ldr	r3, [r2, #28]
 8002918:	402b      	ands	r3, r5
 800291a:	1b5b      	subs	r3, r3, r5
 800291c:	4259      	negs	r1, r3
 800291e:	414b      	adcs	r3, r1
 8002920:	42bb      	cmp	r3, r7
 8002922:	d001      	beq.n	8002928 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	e021      	b.n	800296c <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002928:	9b08      	ldr	r3, [sp, #32]
 800292a:	3301      	adds	r3, #1
 800292c:	d0f3      	beq.n	8002916 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe f8c3 	bl	8000ab8 <HAL_GetTick>
 8002932:	9b00      	ldr	r3, [sp, #0]
 8002934:	1ac0      	subs	r0, r0, r3
 8002936:	9b08      	ldr	r3, [sp, #32]
 8002938:	4298      	cmp	r0, r3
 800293a:	d828      	bhi.n	800298e <UART_WaitOnFlagUntilTimeout+0x86>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d026      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002940:	2104      	movs	r1, #4
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	420a      	tst	r2, r1
 8002948:	d0e4      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	0011      	movs	r1, r2
 800294e:	4031      	ands	r1, r6
 8002950:	9101      	str	r1, [sp, #4]
 8002952:	4232      	tst	r2, r6
 8002954:	d00b      	beq.n	800296e <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002956:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002958:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 800295a:	f7ff fea7 	bl	80026ac <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800295e:	0023      	movs	r3, r4
 8002960:	3308      	adds	r3, #8
 8002962:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002964:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002968:	3478      	adds	r4, #120	; 0x78
 800296a:	7023      	strb	r3, [r4, #0]
}
 800296c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	69d9      	ldr	r1, [r3, #28]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	4211      	tst	r1, r2
 8002976:	d0cd      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002978:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800297a:	0020      	movs	r0, r4
 800297c:	f7ff fe96 	bl	80026ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002980:	0023      	movs	r3, r4
 8002982:	2220      	movs	r2, #32
 8002984:	3308      	adds	r3, #8
 8002986:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002988:	9b01      	ldr	r3, [sp, #4]
 800298a:	3478      	adds	r4, #120	; 0x78
 800298c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800298e:	2003      	movs	r0, #3
 8002990:	e7ec      	b.n	800296c <UART_WaitOnFlagUntilTimeout+0x64>
	...

08002994 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	0003      	movs	r3, r0
{
 8002996:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	2500      	movs	r5, #0
{
 800299a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	3308      	adds	r3, #8
 800299e:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80029a0:	f7fe f88a 	bl	8000ab8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80029a6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	071b      	lsls	r3, r3, #28
 80029ac:	d51d      	bpl.n	80029ea <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <UART_CheckIdleState+0xb8>)
 80029b2:	002a      	movs	r2, r5
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	0389      	lsls	r1, r1, #14
 80029b8:	0003      	movs	r3, r0
 80029ba:	0020      	movs	r0, r4
 80029bc:	f7ff ffa4 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 80029c0:	42a8      	cmp	r0, r5
 80029c2:	d012      	beq.n	80029ea <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c8:	2301      	movs	r3, #1
 80029ca:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029ce:	2080      	movs	r0, #128	; 0x80
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	4383      	bics	r3, r0
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80029dc:	2320      	movs	r3, #32
 80029de:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80029e0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80029e2:	2300      	movs	r3, #0
 80029e4:	3478      	adds	r4, #120	; 0x78
 80029e6:	7023      	strb	r3, [r4, #0]
}
 80029e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029ea:	0025      	movs	r5, r4
 80029ec:	cd08      	ldmia	r5!, {r3}
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	075b      	lsls	r3, r3, #29
 80029f2:	d523      	bpl.n	8002a3c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <UART_CheckIdleState+0xb8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	0020      	movs	r0, r4
 80029fe:	0033      	movs	r3, r6
 8002a00:	03c9      	lsls	r1, r1, #15
 8002a02:	f7ff ff81 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d018      	beq.n	8002a3c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a14:	6821      	ldr	r1, [r4, #0]
 8002a16:	4e0e      	ldr	r6, [pc, #56]	; (8002a50 <UART_CheckIdleState+0xbc>)
 8002a18:	680b      	ldr	r3, [r1, #0]
 8002a1a:	4033      	ands	r3, r6
 8002a1c:	600b      	str	r3, [r1, #0]
 8002a1e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a22:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	6821      	ldr	r1, [r4, #0]
 8002a2c:	688b      	ldr	r3, [r1, #8]
 8002a2e:	4393      	bics	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
 8002a32:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002a36:	2320      	movs	r3, #32
 8002a38:	67eb      	str	r3, [r5, #124]	; 0x7c
 8002a3a:	e7d1      	b.n	80029e0 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002a3c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a42:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a44:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a46:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002a48:	e7cb      	b.n	80029e2 <UART_CheckIdleState+0x4e>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	01ffffff 	.word	0x01ffffff
 8002a50:	fffffedf 	.word	0xfffffedf

08002a54 <HAL_UART_Init>:
{
 8002a54:	b510      	push	{r4, lr}
 8002a56:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
}
 8002a5c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002a64:	0002      	movs	r2, r0
 8002a66:	3278      	adds	r2, #120	; 0x78
 8002a68:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002a6a:	f7fd ff71 	bl	8000950 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a6e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a70:	2101      	movs	r1, #1
 8002a72:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002a76:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a78:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a7a:	438b      	bics	r3, r1
 8002a7c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a7e:	f7ff fe43 	bl	8002708 <UART_SetConfig>
 8002a82:	2801      	cmp	r0, #1
 8002a84:	d0e9      	beq.n	8002a5a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	f7ff fed3 	bl	8002838 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <HAL_UART_Init+0x60>)
 8002a96:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002a98:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a9c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002aae:	f7ff ff71 	bl	8002994 <UART_CheckIdleState>
 8002ab2:	e7d3      	b.n	8002a5c <HAL_UART_Init+0x8>
 8002ab4:	ffffb7ff 	.word	0xffffb7ff

08002ab8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ab8:	1d82      	adds	r2, r0, #6
{
 8002aba:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8002abc:	2000      	movs	r0, #0
 8002abe:	87d0      	strh	r0, [r2, #62]	; 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002ac0:	4a01      	ldr	r2, [pc, #4]	; (8002ac8 <USB_EnableGlobalInt+0x10>)
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  return HAL_OK;
}
 8002ac6:	4770      	bx	lr
 8002ac8:	ffffbf80 	.word	0xffffbf80

08002acc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002acc:	3002      	adds	r0, #2
 8002ace:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002ad0:	4a02      	ldr	r2, [pc, #8]	; (8002adc <USB_DisableGlobalInt+0x10>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	4770      	bx	lr
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	0000407f 	.word	0x0000407f

08002ae0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	9204      	str	r2, [sp, #16]
 8002ae8:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002aea:	2201      	movs	r2, #1
 8002aec:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002aee:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8002af2:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002af4:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002af6:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8002af8:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 8002afa:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8002afc:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 8002afe:	bc10      	pop	{r4}
 8002b00:	bc08      	pop	{r3}
 8002b02:	b004      	add	sp, #16
 8002b04:	4718      	bx	r3
	...

08002b08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b0a:	780e      	ldrb	r6, [r1, #0]
 8002b0c:	4a79      	ldr	r2, [pc, #484]	; (8002cf4 <USB_ActivateEndpoint+0x1ec>)
 8002b0e:	00b3      	lsls	r3, r6, #2
 8002b10:	18c3      	adds	r3, r0, r3
 8002b12:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002b14:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b16:	4014      	ands	r4, r2
  switch (ep->type)
 8002b18:	2201      	movs	r2, #1
{
 8002b1a:	0005      	movs	r5, r0
  switch (ep->type)
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	2f03      	cmp	r7, #3
 8002b20:	d808      	bhi.n	8002b34 <USB_ActivateEndpoint+0x2c>
 8002b22:	0038      	movs	r0, r7
 8002b24:	f7fd faf8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002b28:	3c3f4202 	.word	0x3c3f4202
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8002b32:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b34:	4a70      	ldr	r2, [pc, #448]	; (8002cf8 <USB_ActivateEndpoint+0x1f0>)
 8002b36:	4314      	orrs	r4, r2
 8002b38:	b2a4      	uxth	r4, r4
 8002b3a:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b3c:	8818      	ldrh	r0, [r3, #0]
 8002b3e:	4c6f      	ldr	r4, [pc, #444]	; (8002cfc <USB_ActivateEndpoint+0x1f4>)
 8002b40:	4020      	ands	r0, r4
 8002b42:	4330      	orrs	r0, r6
 8002b44:	4310      	orrs	r0, r2
 8002b46:	b280      	uxth	r0, r0
 8002b48:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b4a:	00f0      	lsls	r0, r6, #3
 8002b4c:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 8002b4e:	7b08      	ldrb	r0, [r1, #12]
 8002b50:	44ac      	add	ip, r5
 8002b52:	3550      	adds	r5, #80	; 0x50
 8002b54:	9501      	str	r5, [sp, #4]
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d000      	beq.n	8002b5c <USB_ActivateEndpoint+0x54>
 8002b5a:	e068      	b.n	8002c2e <USB_ActivateEndpoint+0x126>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b5c:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8002b5e:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b60:	086d      	lsrs	r5, r5, #1
 8002b62:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d023      	beq.n	8002bb0 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b68:	2080      	movs	r0, #128	; 0x80
 8002b6a:	9901      	ldr	r1, [sp, #4]
 8002b6c:	00c0      	lsls	r0, r0, #3
 8002b6e:	8809      	ldrh	r1, [r1, #0]
 8002b70:	4461      	add	r1, ip
 8002b72:	1809      	adds	r1, r1, r0
 8002b74:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b76:	8819      	ldrh	r1, [r3, #0]
 8002b78:	0649      	lsls	r1, r1, #25
 8002b7a:	d504      	bpl.n	8002b86 <USB_ActivateEndpoint+0x7e>
 8002b7c:	8819      	ldrh	r1, [r3, #0]
 8002b7e:	4021      	ands	r1, r4
 8002b80:	4c5f      	ldr	r4, [pc, #380]	; (8002d00 <USB_ActivateEndpoint+0x1f8>)
 8002b82:	4321      	orrs	r1, r4
 8002b84:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b86:	4d5f      	ldr	r5, [pc, #380]	; (8002d04 <USB_ActivateEndpoint+0x1fc>)
 8002b88:	2f01      	cmp	r7, #1
 8002b8a:	d100      	bne.n	8002b8e <USB_ActivateEndpoint+0x86>
 8002b8c:	e0ab      	b.n	8002ce6 <USB_ActivateEndpoint+0x1de>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b8e:	2120      	movs	r1, #32
 8002b90:	881c      	ldrh	r4, [r3, #0]
 8002b92:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002b94:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b96:	430a      	orrs	r2, r1
 8002b98:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8002b9a:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b9c:	801a      	strh	r2, [r3, #0]
}
 8002b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ba0:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ba2:	00d2      	lsls	r2, r2, #3
 8002ba4:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	9200      	str	r2, [sp, #0]
      break;
 8002baa:	e7c3      	b.n	8002b34 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	e7f8      	b.n	8002ba2 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bb0:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bb2:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bb4:	8807      	ldrh	r7, [r0, #0]
 8002bb6:	4854      	ldr	r0, [pc, #336]	; (8002d08 <USB_ActivateEndpoint+0x200>)
 8002bb8:	4467      	add	r7, ip
 8002bba:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bbc:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bbe:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bc0:	8805      	ldrh	r5, [r0, #0]
 8002bc2:	4852      	ldr	r0, [pc, #328]	; (8002d0c <USB_ActivateEndpoint+0x204>)
 8002bc4:	4465      	add	r5, ip
 8002bc6:	182d      	adds	r5, r5, r0
 8002bc8:	882f      	ldrh	r7, [r5, #0]
 8002bca:	05bf      	lsls	r7, r7, #22
 8002bcc:	0dbf      	lsrs	r7, r7, #22
 8002bce:	802f      	strh	r7, [r5, #0]
 8002bd0:	293e      	cmp	r1, #62	; 0x3e
 8002bd2:	d90d      	bls.n	8002bf0 <USB_ActivateEndpoint+0xe8>
 8002bd4:	201f      	movs	r0, #31
 8002bd6:	094f      	lsrs	r7, r1, #5
 8002bd8:	4001      	ands	r1, r0
 8002bda:	0008      	movs	r0, r1
 8002bdc:	4241      	negs	r1, r0
 8002bde:	4141      	adcs	r1, r0
 8002be0:	1a7f      	subs	r7, r7, r1
 8002be2:	8829      	ldrh	r1, [r5, #0]
 8002be4:	02bf      	lsls	r7, r7, #10
 8002be6:	430f      	orrs	r7, r1
 8002be8:	4949      	ldr	r1, [pc, #292]	; (8002d10 <USB_ActivateEndpoint+0x208>)
 8002bea:	4339      	orrs	r1, r7
 8002bec:	b289      	uxth	r1, r1
 8002bee:	e005      	b.n	8002bfc <USB_ActivateEndpoint+0xf4>
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	d115      	bne.n	8002c20 <USB_ActivateEndpoint+0x118>
 8002bf4:	2780      	movs	r7, #128	; 0x80
 8002bf6:	8829      	ldrh	r1, [r5, #0]
 8002bf8:	023f      	lsls	r7, r7, #8
 8002bfa:	4339      	orrs	r1, r7
 8002bfc:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bfe:	8819      	ldrh	r1, [r3, #0]
 8002c00:	0449      	lsls	r1, r1, #17
 8002c02:	d504      	bpl.n	8002c0e <USB_ActivateEndpoint+0x106>
 8002c04:	8819      	ldrh	r1, [r3, #0]
 8002c06:	4021      	ands	r1, r4
 8002c08:	4c42      	ldr	r4, [pc, #264]	; (8002d14 <USB_ActivateEndpoint+0x20c>)
 8002c0a:	4321      	orrs	r1, r4
 8002c0c:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 8002c0e:	4942      	ldr	r1, [pc, #264]	; (8002d18 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c10:	881c      	ldrh	r4, [r3, #0]
 8002c12:	400c      	ands	r4, r1
 8002c14:	21c0      	movs	r1, #192	; 0xc0
      if (ep->num == 0U)
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d000      	beq.n	8002c1c <USB_ActivateEndpoint+0x114>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	0189      	lsls	r1, r1, #6
 8002c1e:	e7b9      	b.n	8002b94 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c20:	2001      	movs	r0, #1
 8002c22:	084f      	lsrs	r7, r1, #1
 8002c24:	4001      	ands	r1, r0
 8002c26:	187f      	adds	r7, r7, r1
 8002c28:	02bf      	lsls	r7, r7, #10
 8002c2a:	8829      	ldrh	r1, [r5, #0]
 8002c2c:	e7dd      	b.n	8002bea <USB_ActivateEndpoint+0xe2>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002c2e:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8002c30:	2f02      	cmp	r7, #2
 8002c32:	d13a      	bne.n	8002caa <USB_ActivateEndpoint+0x1a2>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002c34:	4e39      	ldr	r6, [pc, #228]	; (8002d1c <USB_ActivateEndpoint+0x214>)
 8002c36:	4025      	ands	r5, r4
 8002c38:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c3a:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002c3c:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c3e:	8805      	ldrh	r5, [r0, #0]
 8002c40:	2080      	movs	r0, #128	; 0x80
 8002c42:	890e      	ldrh	r6, [r1, #8]
 8002c44:	4465      	add	r5, ip
 8002c46:	00c0      	lsls	r0, r0, #3
 8002c48:	0876      	lsrs	r6, r6, #1
 8002c4a:	182d      	adds	r5, r5, r0
 8002c4c:	0076      	lsls	r6, r6, #1
 8002c4e:	9801      	ldr	r0, [sp, #4]
 8002c50:	802e      	strh	r6, [r5, #0]
 8002c52:	8805      	ldrh	r5, [r0, #0]
 8002c54:	894e      	ldrh	r6, [r1, #10]
 8002c56:	482c      	ldr	r0, [pc, #176]	; (8002d08 <USB_ActivateEndpoint+0x200>)
 8002c58:	4465      	add	r5, ip
 8002c5a:	0876      	lsrs	r6, r6, #1
 8002c5c:	182d      	adds	r5, r5, r0
 8002c5e:	0076      	lsls	r6, r6, #1
 8002c60:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8002c62:	7849      	ldrb	r1, [r1, #1]
 8002c64:	4e27      	ldr	r6, [pc, #156]	; (8002d04 <USB_ActivateEndpoint+0x1fc>)
 8002c66:	468c      	mov	ip, r1
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	4660      	mov	r0, ip
 8002c6c:	4d2a      	ldr	r5, [pc, #168]	; (8002d18 <USB_ActivateEndpoint+0x210>)
 8002c6e:	01c9      	lsls	r1, r1, #7
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d11f      	bne.n	8002cb4 <USB_ActivateEndpoint+0x1ac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c74:	881f      	ldrh	r7, [r3, #0]
 8002c76:	420f      	tst	r7, r1
 8002c78:	d004      	beq.n	8002c84 <USB_ActivateEndpoint+0x17c>
 8002c7a:	8819      	ldrh	r1, [r3, #0]
 8002c7c:	4f25      	ldr	r7, [pc, #148]	; (8002d14 <USB_ActivateEndpoint+0x20c>)
 8002c7e:	4021      	ands	r1, r4
 8002c80:	4339      	orrs	r1, r7
 8002c82:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c84:	8819      	ldrh	r1, [r3, #0]
 8002c86:	0649      	lsls	r1, r1, #25
 8002c88:	d504      	bpl.n	8002c94 <USB_ActivateEndpoint+0x18c>
 8002c8a:	8819      	ldrh	r1, [r3, #0]
 8002c8c:	4021      	ands	r1, r4
 8002c8e:	4c1c      	ldr	r4, [pc, #112]	; (8002d00 <USB_ActivateEndpoint+0x1f8>)
 8002c90:	4321      	orrs	r1, r4
 8002c92:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c94:	21c0      	movs	r1, #192	; 0xc0
 8002c96:	881c      	ldrh	r4, [r3, #0]
 8002c98:	0189      	lsls	r1, r1, #6
 8002c9a:	402c      	ands	r4, r5
 8002c9c:	4061      	eors	r1, r4
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	b289      	uxth	r1, r1
 8002ca2:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ca4:	8819      	ldrh	r1, [r3, #0]
 8002ca6:	4031      	ands	r1, r6
 8002ca8:	e775      	b.n	8002b96 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002caa:	4e1d      	ldr	r6, [pc, #116]	; (8002d20 <USB_ActivateEndpoint+0x218>)
 8002cac:	4035      	ands	r5, r6
 8002cae:	4315      	orrs	r5, r2
 8002cb0:	b2ad      	uxth	r5, r5
 8002cb2:	e7c2      	b.n	8002c3a <USB_ActivateEndpoint+0x132>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cb4:	8818      	ldrh	r0, [r3, #0]
 8002cb6:	4208      	tst	r0, r1
 8002cb8:	d004      	beq.n	8002cc4 <USB_ActivateEndpoint+0x1bc>
 8002cba:	8819      	ldrh	r1, [r3, #0]
 8002cbc:	4815      	ldr	r0, [pc, #84]	; (8002d14 <USB_ActivateEndpoint+0x20c>)
 8002cbe:	4021      	ands	r1, r4
 8002cc0:	4301      	orrs	r1, r0
 8002cc2:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cc4:	8819      	ldrh	r1, [r3, #0]
 8002cc6:	0649      	lsls	r1, r1, #25
 8002cc8:	d504      	bpl.n	8002cd4 <USB_ActivateEndpoint+0x1cc>
 8002cca:	8819      	ldrh	r1, [r3, #0]
 8002ccc:	4021      	ands	r1, r4
 8002cce:	4c0c      	ldr	r4, [pc, #48]	; (8002d00 <USB_ActivateEndpoint+0x1f8>)
 8002cd0:	4321      	orrs	r1, r4
 8002cd2:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002cd4:	2f01      	cmp	r7, #1
 8002cd6:	d009      	beq.n	8002cec <USB_ActivateEndpoint+0x1e4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cd8:	2120      	movs	r1, #32
 8002cda:	881c      	ldrh	r4, [r3, #0]
 8002cdc:	4034      	ands	r4, r6
 8002cde:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	b289      	uxth	r1, r1
 8002ce4:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ce6:	8819      	ldrh	r1, [r3, #0]
 8002ce8:	4029      	ands	r1, r5
 8002cea:	e754      	b.n	8002b96 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cec:	8819      	ldrh	r1, [r3, #0]
 8002cee:	4031      	ands	r1, r6
 8002cf0:	e7f6      	b.n	8002ce0 <USB_ActivateEndpoint+0x1d8>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	ffff898f 	.word	0xffff898f
 8002cf8:	ffff8080 	.word	0xffff8080
 8002cfc:	ffff8f8f 	.word	0xffff8f8f
 8002d00:	000080c0 	.word	0x000080c0
 8002d04:	ffff8fbf 	.word	0xffff8fbf
 8002d08:	00000404 	.word	0x00000404
 8002d0c:	00000406 	.word	0x00000406
 8002d10:	ffff8000 	.word	0xffff8000
 8002d14:	0000c080 	.word	0x0000c080
 8002d18:	ffffbf8f 	.word	0xffffbf8f
 8002d1c:	00008180 	.word	0x00008180
 8002d20:	ffff8e8f 	.word	0xffff8e8f

08002d24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d26:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8002d28:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8002d2a:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18c0      	adds	r0, r0, r3
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d11a      	bne.n	8002d6c <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d00c      	beq.n	8002d54 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d3a:	8802      	ldrh	r2, [r0, #0]
 8002d3c:	0652      	lsls	r2, r2, #25
 8002d3e:	d505      	bpl.n	8002d4c <USB_DeactivateEndpoint+0x28>
 8002d40:	8802      	ldrh	r2, [r0, #0]
 8002d42:	492e      	ldr	r1, [pc, #184]	; (8002dfc <USB_DeactivateEndpoint+0xd8>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	492e      	ldr	r1, [pc, #184]	; (8002e00 <USB_DeactivateEndpoint+0xdc>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d4c:	8802      	ldrh	r2, [r0, #0]
 8002d4e:	492d      	ldr	r1, [pc, #180]	; (8002e04 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d50:	400a      	ands	r2, r1
 8002d52:	e02f      	b.n	8002db4 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d54:	8802      	ldrh	r2, [r0, #0]
 8002d56:	0452      	lsls	r2, r2, #17
 8002d58:	d505      	bpl.n	8002d66 <USB_DeactivateEndpoint+0x42>
 8002d5a:	8802      	ldrh	r2, [r0, #0]
 8002d5c:	4927      	ldr	r1, [pc, #156]	; (8002dfc <USB_DeactivateEndpoint+0xd8>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <USB_DeactivateEndpoint+0xe4>)
 8002d62:	430a      	orrs	r2, r1
 8002d64:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d66:	8802      	ldrh	r2, [r0, #0]
 8002d68:	4928      	ldr	r1, [pc, #160]	; (8002e0c <USB_DeactivateEndpoint+0xe8>)
 8002d6a:	e7f1      	b.n	8002d50 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8002d6c:	2780      	movs	r7, #128	; 0x80
 8002d6e:	4e23      	ldr	r6, [pc, #140]	; (8002dfc <USB_DeactivateEndpoint+0xd8>)
 8002d70:	4d24      	ldr	r5, [pc, #144]	; (8002e04 <USB_DeactivateEndpoint+0xe0>)
 8002d72:	4926      	ldr	r1, [pc, #152]	; (8002e0c <USB_DeactivateEndpoint+0xe8>)
 8002d74:	01ff      	lsls	r7, r7, #7
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	d121      	bne.n	8002dbe <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d7a:	8802      	ldrh	r2, [r0, #0]
 8002d7c:	423a      	tst	r2, r7
 8002d7e:	d004      	beq.n	8002d8a <USB_DeactivateEndpoint+0x66>
 8002d80:	8802      	ldrh	r2, [r0, #0]
 8002d82:	4c21      	ldr	r4, [pc, #132]	; (8002e08 <USB_DeactivateEndpoint+0xe4>)
 8002d84:	4032      	ands	r2, r6
 8002d86:	4322      	orrs	r2, r4
 8002d88:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d8a:	8802      	ldrh	r2, [r0, #0]
 8002d8c:	4c20      	ldr	r4, [pc, #128]	; (8002e10 <USB_DeactivateEndpoint+0xec>)
 8002d8e:	0652      	lsls	r2, r2, #25
 8002d90:	d504      	bpl.n	8002d9c <USB_DeactivateEndpoint+0x78>
 8002d92:	8802      	ldrh	r2, [r0, #0]
 8002d94:	4032      	ands	r2, r6
 8002d96:	4322      	orrs	r2, r4
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8002d9c:	8802      	ldrh	r2, [r0, #0]
 8002d9e:	4032      	ands	r2, r6
 8002da0:	4314      	orrs	r4, r2
 8002da2:	b2a4      	uxth	r4, r4
 8002da4:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002da6:	8802      	ldrh	r2, [r0, #0]
 8002da8:	400a      	ands	r2, r1
 8002daa:	431a      	orrs	r2, r3
 8002dac:	b292      	uxth	r2, r2
 8002dae:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002db0:	8802      	ldrh	r2, [r0, #0]
 8002db2:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002dba:	2000      	movs	r0, #0
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dbe:	8802      	ldrh	r2, [r0, #0]
 8002dc0:	4c14      	ldr	r4, [pc, #80]	; (8002e14 <USB_DeactivateEndpoint+0xf0>)
 8002dc2:	423a      	tst	r2, r7
 8002dc4:	d004      	beq.n	8002dd0 <USB_DeactivateEndpoint+0xac>
 8002dc6:	8802      	ldrh	r2, [r0, #0]
 8002dc8:	4032      	ands	r2, r6
 8002dca:	4322      	orrs	r2, r4
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dd0:	8802      	ldrh	r2, [r0, #0]
 8002dd2:	0652      	lsls	r2, r2, #25
 8002dd4:	d504      	bpl.n	8002de0 <USB_DeactivateEndpoint+0xbc>
 8002dd6:	8802      	ldrh	r2, [r0, #0]
 8002dd8:	4f09      	ldr	r7, [pc, #36]	; (8002e00 <USB_DeactivateEndpoint+0xdc>)
 8002dda:	4032      	ands	r2, r6
 8002ddc:	433a      	orrs	r2, r7
 8002dde:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002de0:	8802      	ldrh	r2, [r0, #0]
 8002de2:	4032      	ands	r2, r6
 8002de4:	4314      	orrs	r4, r2
 8002de6:	b2a4      	uxth	r4, r4
 8002de8:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dea:	8802      	ldrh	r2, [r0, #0]
 8002dec:	402a      	ands	r2, r5
 8002dee:	431a      	orrs	r2, r3
 8002df0:	b292      	uxth	r2, r2
 8002df2:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002df4:	8802      	ldrh	r2, [r0, #0]
 8002df6:	e7ab      	b.n	8002d50 <USB_DeactivateEndpoint+0x2c>
 8002df8:	ffff8080 	.word	0xffff8080
 8002dfc:	ffff8f8f 	.word	0xffff8f8f
 8002e00:	000080c0 	.word	0x000080c0
 8002e04:	ffff8fbf 	.word	0xffff8fbf
 8002e08:	0000c080 	.word	0x0000c080
 8002e0c:	ffffbf8f 	.word	0xffffbf8f
 8002e10:	ffff80c0 	.word	0xffff80c0
 8002e14:	ffffc080 	.word	0xffffc080

08002e18 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002e18:	780b      	ldrb	r3, [r1, #0]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <USB_EPSetStall+0x34>)
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8002e20:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002e22:	8801      	ldrh	r1, [r0, #0]
  if (ep->is_in != 0U)
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <USB_EPSetStall+0x38>)
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	404b      	eors	r3, r1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002e36:	2000      	movs	r0, #0
 8002e38:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <USB_EPSetStall+0x3c>)
 8002e3c:	4019      	ands	r1, r3
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	015b      	lsls	r3, r3, #5
 8002e42:	404b      	eors	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	b292      	uxth	r2, r2
 8002e48:	8002      	strh	r2, [r0, #0]
 8002e4a:	e7f4      	b.n	8002e36 <USB_EPSetStall+0x1e>
 8002e4c:	ffff8080 	.word	0xffff8080
 8002e50:	ffff8fbf 	.word	0xffff8fbf
 8002e54:	ffffbf8f 	.word	0xffffbf8f

08002e58 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002e58:	7b0b      	ldrb	r3, [r1, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d119      	bne.n	8002e92 <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5e:	780b      	ldrb	r3, [r1, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8002e64:	784b      	ldrb	r3, [r1, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e6a:	8803      	ldrh	r3, [r0, #0]
 8002e6c:	065b      	lsls	r3, r3, #25
 8002e6e:	d505      	bpl.n	8002e7c <USB_EPClearStall+0x24>
 8002e70:	8803      	ldrh	r3, [r0, #0]
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <USB_EPClearStall+0x5c>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <USB_EPClearStall+0x60>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e7c:	78cb      	ldrb	r3, [r1, #3]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d007      	beq.n	8002e92 <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <USB_EPClearStall+0x64>)
 8002e84:	8802      	ldrh	r2, [r0, #0]
 8002e86:	401a      	ands	r2, r3
 8002e88:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e8a:	4053      	eors	r3, r2
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <USB_EPClearStall+0x68>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8002e92:	2000      	movs	r0, #0
 8002e94:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e96:	8803      	ldrh	r3, [r0, #0]
 8002e98:	045b      	lsls	r3, r3, #17
 8002e9a:	d505      	bpl.n	8002ea8 <USB_EPClearStall+0x50>
 8002e9c:	8803      	ldrh	r3, [r0, #0]
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <USB_EPClearStall+0x5c>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <USB_EPClearStall+0x6c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <USB_EPClearStall+0x70>)
 8002eaa:	8802      	ldrh	r2, [r0, #0]
 8002eac:	401a      	ands	r2, r3
 8002eae:	23c0      	movs	r3, #192	; 0xc0
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	e7ea      	b.n	8002e8a <USB_EPClearStall+0x32>
 8002eb4:	ffff8f8f 	.word	0xffff8f8f
 8002eb8:	000080c0 	.word	0x000080c0
 8002ebc:	ffff8fbf 	.word	0xffff8fbf
 8002ec0:	00008080 	.word	0x00008080
 8002ec4:	0000c080 	.word	0x0000c080
 8002ec8:	ffffbf8f 	.word	0xffffbf8f

08002ecc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d102      	bne.n	8002ed6 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	304c      	adds	r0, #76	; 0x4c
 8002ed4:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	4770      	bx	lr

08002eda <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	3058      	adds	r0, #88	; 0x58
 8002ede:	8803      	ldrh	r3, [r0, #0]
 8002ee0:	0212      	lsls	r2, r2, #8
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	4770      	bx	lr

08002eea <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002eea:	3006      	adds	r0, #6
 8002eec:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8002eee:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002ef0:	4770      	bx	lr

08002ef2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ef2:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ef4:	2480      	movs	r4, #128	; 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002ef6:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ef8:	00e4      	lsls	r4, r4, #3
 8002efa:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002efc:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002efe:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	18cb      	adds	r3, r1, r3
 8002f04:	1a40      	subs	r0, r0, r1
 8002f06:	1844      	adds	r4, r0, r1
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d100      	bne.n	8002f0e <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8002f0c:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8002f0e:	784a      	ldrb	r2, [r1, #1]
 8002f10:	780d      	ldrb	r5, [r1, #0]
 8002f12:	0212      	lsls	r2, r2, #8
 8002f14:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8002f16:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8002f18:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8002f1a:	e7f4      	b.n	8002f06 <USB_WritePMA+0x14>

08002f1c <USB_EPStartXfer>:
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002f1e:	784a      	ldrb	r2, [r1, #1]
{
 8002f20:	0005      	movs	r5, r0
 8002f22:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 8002f24:	7b0b      	ldrb	r3, [r1, #12]
{
 8002f26:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8002f28:	2a01      	cmp	r2, #1
 8002f2a:	d000      	beq.n	8002f2e <USB_EPStartXfer+0x12>
 8002f2c:	e11b      	b.n	8003166 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8002f2e:	690a      	ldr	r2, [r1, #16]
 8002f30:	698f      	ldr	r7, [r1, #24]
 8002f32:	9202      	str	r2, [sp, #8]
 8002f34:	4297      	cmp	r7, r2
 8002f36:	d900      	bls.n	8002f3a <USB_EPStartXfer+0x1e>
 8002f38:	0017      	movs	r7, r2
    if (ep->doublebuffer == 0U)
 8002f3a:	002a      	movs	r2, r5
 8002f3c:	3250      	adds	r2, #80	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002f3e:	6961      	ldr	r1, [r4, #20]
 8002f40:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11d      	bne.n	8002f82 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002f46:	b2bf      	uxth	r7, r7
 8002f48:	003b      	movs	r3, r7
 8002f4a:	88e2      	ldrh	r2, [r4, #6]
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	f7ff ffd0 	bl	8002ef2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f52:	9b01      	ldr	r3, [sp, #4]
 8002f54:	4ab5      	ldr	r2, [pc, #724]	; (800322c <USB_EPStartXfer+0x310>)
 8002f56:	8819      	ldrh	r1, [r3, #0]
 8002f58:	7823      	ldrb	r3, [r4, #0]
 8002f5a:	18aa      	adds	r2, r5, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1852      	adds	r2, r2, r1
 8002f60:	189b      	adds	r3, r3, r2
 8002f62:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f64:	7823      	ldrb	r3, [r4, #0]
 8002f66:	4ab2      	ldr	r2, [pc, #712]	; (8003230 <USB_EPStartXfer+0x314>)
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	18eb      	adds	r3, r5, r3
 8002f6c:	8819      	ldrh	r1, [r3, #0]
 8002f6e:	4011      	ands	r1, r2
 8002f70:	2230      	movs	r2, #48	; 0x30
 8002f72:	404a      	eors	r2, r1
 8002f74:	49af      	ldr	r1, [pc, #700]	; (8003234 <USB_EPStartXfer+0x318>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	b292      	uxth	r2, r2
  return HAL_OK;
 8002f7a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f7c:	801a      	strh	r2, [r3, #0]
}
 8002f7e:	b007      	add	sp, #28
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f82:	7822      	ldrb	r2, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8002f84:	78e0      	ldrb	r0, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f86:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f88:	00d2      	lsls	r2, r2, #3
        if (ep->xfer_len_db > ep->maxpacket)
 8002f8a:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f8c:	18eb      	adds	r3, r5, r3
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002f8e:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d000      	beq.n	8002f96 <USB_EPStartXfer+0x7a>
 8002f94:	e0d1      	b.n	800313a <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8002f96:	9a02      	ldr	r2, [sp, #8]
 8002f98:	42b2      	cmp	r2, r6
 8002f9a:	d300      	bcc.n	8002f9e <USB_EPStartXfer+0x82>
 8002f9c:	e0bb      	b.n	8003116 <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	48a5      	ldr	r0, [pc, #660]	; (8003238 <USB_EPStartXfer+0x31c>)
          ep->xfer_len_db -= len;
 8002fa2:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002fa4:	4010      	ands	r0, r2
 8002fa6:	4aa5      	ldr	r2, [pc, #660]	; (800323c <USB_EPStartXfer+0x320>)
 8002fa8:	4310      	orrs	r0, r2
 8002faa:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	2040      	movs	r0, #64	; 0x40
 8002fb0:	469c      	mov	ip, r3
 8002fb2:	4662      	mov	r2, ip
 8002fb4:	4002      	ands	r2, r0
 8002fb6:	9205      	str	r2, [sp, #20]
 8002fb8:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8002fba:	19cb      	adds	r3, r1, r7
 8002fbc:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8002fbe:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002fc0:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002fc2:	4202      	tst	r2, r0
 8002fc4:	d055      	beq.n	8003072 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fc6:	9a01      	ldr	r2, [sp, #4]
 8002fc8:	8812      	ldrh	r2, [r2, #0]
 8002fca:	4694      	mov	ip, r2
 8002fcc:	4a9c      	ldr	r2, [pc, #624]	; (8003240 <USB_EPStartXfer+0x324>)
 8002fce:	18a8      	adds	r0, r5, r2
 8002fd0:	9a03      	ldr	r2, [sp, #12]
 8002fd2:	4460      	add	r0, ip
 8002fd4:	1882      	adds	r2, r0, r2
 8002fd6:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002fd8:	8962      	ldrh	r2, [r4, #10]
 8002fda:	0028      	movs	r0, r5
 8002fdc:	f7ff ff89 	bl	8002ef2 <USB_WritePMA>
            ep->xfer_buff += len;
 8002fe0:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8002fe2:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002fe4:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002fe6:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8002fe8:	42b2      	cmp	r2, r6
 8002fea:	d201      	bcs.n	8002ff0 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8002fec:	1bf3      	subs	r3, r6, r7
 8002fee:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ff0:	7862      	ldrb	r2, [r4, #1]
 8002ff2:	6223      	str	r3, [r4, #32]
 8002ff4:	b2b3      	uxth	r3, r6
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d12e      	bne.n	8003058 <USB_EPStartXfer+0x13c>
 8002ffa:	9a01      	ldr	r2, [sp, #4]
 8002ffc:	498b      	ldr	r1, [pc, #556]	; (800322c <USB_EPStartXfer+0x310>)
 8002ffe:	8810      	ldrh	r0, [r2, #0]
 8003000:	7822      	ldrb	r2, [r4, #0]
 8003002:	1869      	adds	r1, r5, r1
 8003004:	1809      	adds	r1, r1, r0
 8003006:	00d2      	lsls	r2, r2, #3
 8003008:	1852      	adds	r2, r2, r1
 800300a:	8811      	ldrh	r1, [r2, #0]
 800300c:	0589      	lsls	r1, r1, #22
 800300e:	0d89      	lsrs	r1, r1, #22
 8003010:	8011      	strh	r1, [r2, #0]
 8003012:	2e3e      	cmp	r6, #62	; 0x3e
 8003014:	d90c      	bls.n	8003030 <USB_EPStartXfer+0x114>
 8003016:	201f      	movs	r0, #31
 8003018:	4030      	ands	r0, r6
 800301a:	0971      	lsrs	r1, r6, #5
 800301c:	4246      	negs	r6, r0
 800301e:	4170      	adcs	r0, r6
 8003020:	1a09      	subs	r1, r1, r0
 8003022:	8810      	ldrh	r0, [r2, #0]
 8003024:	0289      	lsls	r1, r1, #10
 8003026:	4308      	orrs	r0, r1
 8003028:	4986      	ldr	r1, [pc, #536]	; (8003244 <USB_EPStartXfer+0x328>)
 800302a:	4301      	orrs	r1, r0
 800302c:	b289      	uxth	r1, r1
 800302e:	e005      	b.n	800303c <USB_EPStartXfer+0x120>
 8003030:	2e00      	cmp	r6, #0
 8003032:	d10a      	bne.n	800304a <USB_EPStartXfer+0x12e>
 8003034:	2080      	movs	r0, #128	; 0x80
 8003036:	8811      	ldrh	r1, [r2, #0]
 8003038:	0200      	lsls	r0, r0, #8
 800303a:	4301      	orrs	r1, r0
 800303c:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800303e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003040:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003042:	0028      	movs	r0, r5
 8003044:	f7ff ff55 	bl	8002ef2 <USB_WritePMA>
 8003048:	e78c      	b.n	8002f64 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800304a:	2101      	movs	r1, #1
 800304c:	0870      	lsrs	r0, r6, #1
 800304e:	4031      	ands	r1, r6
 8003050:	1840      	adds	r0, r0, r1
 8003052:	0280      	lsls	r0, r0, #10
 8003054:	8811      	ldrh	r1, [r2, #0]
 8003056:	e7e8      	b.n	800302a <USB_EPStartXfer+0x10e>
 8003058:	2a01      	cmp	r2, #1
 800305a:	d1f0      	bne.n	800303e <USB_EPStartXfer+0x122>
 800305c:	002a      	movs	r2, r5
 800305e:	4973      	ldr	r1, [pc, #460]	; (800322c <USB_EPStartXfer+0x310>)
 8003060:	3250      	adds	r2, #80	; 0x50
 8003062:	8810      	ldrh	r0, [r2, #0]
 8003064:	7822      	ldrb	r2, [r4, #0]
 8003066:	1869      	adds	r1, r5, r1
 8003068:	00d2      	lsls	r2, r2, #3
 800306a:	1809      	adds	r1, r1, r0
 800306c:	1852      	adds	r2, r2, r1
 800306e:	8013      	strh	r3, [r2, #0]
 8003070:	e7e5      	b.n	800303e <USB_EPStartXfer+0x122>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003072:	9a01      	ldr	r2, [sp, #4]
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	4694      	mov	ip, r2
 8003078:	4a6c      	ldr	r2, [pc, #432]	; (800322c <USB_EPStartXfer+0x310>)
 800307a:	18a8      	adds	r0, r5, r2
 800307c:	9a03      	ldr	r2, [sp, #12]
 800307e:	4460      	add	r0, ip
 8003080:	1882      	adds	r2, r0, r2
 8003082:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003084:	8922      	ldrh	r2, [r4, #8]
 8003086:	0028      	movs	r0, r5
 8003088:	f7ff ff33 	bl	8002ef2 <USB_WritePMA>
            ep->xfer_buff += len;
 800308c:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800308e:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8003090:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8003092:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003094:	42b2      	cmp	r2, r6
 8003096:	d201      	bcs.n	800309c <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8003098:	1bf3      	subs	r3, r6, r7
 800309a:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800309c:	7862      	ldrb	r2, [r4, #1]
 800309e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80030a0:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030a2:	2a00      	cmp	r2, #0
 80030a4:	d12a      	bne.n	80030fc <USB_EPStartXfer+0x1e0>
 80030a6:	9a01      	ldr	r2, [sp, #4]
 80030a8:	4965      	ldr	r1, [pc, #404]	; (8003240 <USB_EPStartXfer+0x324>)
 80030aa:	8810      	ldrh	r0, [r2, #0]
 80030ac:	7822      	ldrb	r2, [r4, #0]
 80030ae:	1869      	adds	r1, r5, r1
 80030b0:	1809      	adds	r1, r1, r0
 80030b2:	00d2      	lsls	r2, r2, #3
 80030b4:	1852      	adds	r2, r2, r1
 80030b6:	8811      	ldrh	r1, [r2, #0]
 80030b8:	0589      	lsls	r1, r1, #22
 80030ba:	0d89      	lsrs	r1, r1, #22
 80030bc:	8011      	strh	r1, [r2, #0]
 80030be:	2e3e      	cmp	r6, #62	; 0x3e
 80030c0:	d90c      	bls.n	80030dc <USB_EPStartXfer+0x1c0>
 80030c2:	201f      	movs	r0, #31
 80030c4:	4030      	ands	r0, r6
 80030c6:	0971      	lsrs	r1, r6, #5
 80030c8:	4246      	negs	r6, r0
 80030ca:	4170      	adcs	r0, r6
 80030cc:	1a09      	subs	r1, r1, r0
 80030ce:	8810      	ldrh	r0, [r2, #0]
 80030d0:	0289      	lsls	r1, r1, #10
 80030d2:	4308      	orrs	r0, r1
 80030d4:	495b      	ldr	r1, [pc, #364]	; (8003244 <USB_EPStartXfer+0x328>)
 80030d6:	4301      	orrs	r1, r0
 80030d8:	b289      	uxth	r1, r1
 80030da:	e005      	b.n	80030e8 <USB_EPStartXfer+0x1cc>
 80030dc:	2e00      	cmp	r6, #0
 80030de:	d106      	bne.n	80030ee <USB_EPStartXfer+0x1d2>
 80030e0:	2080      	movs	r0, #128	; 0x80
 80030e2:	8811      	ldrh	r1, [r2, #0]
 80030e4:	0200      	lsls	r0, r0, #8
 80030e6:	4301      	orrs	r1, r0
 80030e8:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80030ea:	8962      	ldrh	r2, [r4, #10]
 80030ec:	e7a8      	b.n	8003040 <USB_EPStartXfer+0x124>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030ee:	2101      	movs	r1, #1
 80030f0:	0870      	lsrs	r0, r6, #1
 80030f2:	400e      	ands	r6, r1
 80030f4:	1980      	adds	r0, r0, r6
 80030f6:	8811      	ldrh	r1, [r2, #0]
 80030f8:	0280      	lsls	r0, r0, #10
 80030fa:	e7ec      	b.n	80030d6 <USB_EPStartXfer+0x1ba>
 80030fc:	2a01      	cmp	r2, #1
 80030fe:	d1f4      	bne.n	80030ea <USB_EPStartXfer+0x1ce>
 8003100:	002a      	movs	r2, r5
 8003102:	494f      	ldr	r1, [pc, #316]	; (8003240 <USB_EPStartXfer+0x324>)
 8003104:	3250      	adds	r2, #80	; 0x50
 8003106:	8810      	ldrh	r0, [r2, #0]
 8003108:	7822      	ldrb	r2, [r4, #0]
 800310a:	1869      	adds	r1, r5, r1
 800310c:	00d2      	lsls	r2, r2, #3
 800310e:	1809      	adds	r1, r1, r0
 8003110:	1852      	adds	r2, r2, r1
 8003112:	8013      	strh	r3, [r2, #0]
 8003114:	e7e9      	b.n	80030ea <USB_EPStartXfer+0x1ce>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003116:	8818      	ldrh	r0, [r3, #0]
 8003118:	4f4b      	ldr	r7, [pc, #300]	; (8003248 <USB_EPStartXfer+0x32c>)
 800311a:	4a46      	ldr	r2, [pc, #280]	; (8003234 <USB_EPStartXfer+0x318>)
 800311c:	4038      	ands	r0, r7
 800311e:	4310      	orrs	r0, r2
 8003120:	b280      	uxth	r0, r0
 8003122:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003124:	9b01      	ldr	r3, [sp, #4]
 8003126:	9a03      	ldr	r2, [sp, #12]
 8003128:	8818      	ldrh	r0, [r3, #0]
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <USB_EPStartXfer+0x310>)
 800312c:	18eb      	adds	r3, r5, r3
 800312e:	181b      	adds	r3, r3, r0
 8003130:	189a      	adds	r2, r3, r2
 8003132:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003134:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003136:	8922      	ldrh	r2, [r4, #8]
 8003138:	e783      	b.n	8003042 <USB_EPStartXfer+0x126>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800313a:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 800313c:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800313e:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 8003140:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003142:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003144:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003146:	0640      	lsls	r0, r0, #25
 8003148:	d507      	bpl.n	800315a <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <USB_EPStartXfer+0x324>)
 800314c:	18a8      	adds	r0, r5, r2
 800314e:	9a03      	ldr	r2, [sp, #12]
 8003150:	1980      	adds	r0, r0, r6
 8003152:	1882      	adds	r2, r0, r2
 8003154:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003156:	8962      	ldrh	r2, [r4, #10]
 8003158:	e773      	b.n	8003042 <USB_EPStartXfer+0x126>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <USB_EPStartXfer+0x310>)
 800315c:	18a8      	adds	r0, r5, r2
 800315e:	9a03      	ldr	r2, [sp, #12]
 8003160:	1980      	adds	r0, r0, r6
 8003162:	1882      	adds	r2, r0, r2
 8003164:	e7e6      	b.n	8003134 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8003166:	2b00      	cmp	r3, #0
 8003168:	d13c      	bne.n	80031e4 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 800316a:	698a      	ldr	r2, [r1, #24]
 800316c:	6909      	ldr	r1, [r1, #16]
 800316e:	428a      	cmp	r2, r1
 8003170:	d901      	bls.n	8003176 <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8003172:	1a53      	subs	r3, r2, r1
 8003174:	000a      	movs	r2, r1
 8003176:	61a3      	str	r3, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003178:	002b      	movs	r3, r5
 800317a:	4931      	ldr	r1, [pc, #196]	; (8003240 <USB_EPStartXfer+0x324>)
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	8818      	ldrh	r0, [r3, #0]
 8003180:	7823      	ldrb	r3, [r4, #0]
 8003182:	1869      	adds	r1, r5, r1
 8003184:	1809      	adds	r1, r1, r0
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	185b      	adds	r3, r3, r1
 800318a:	8819      	ldrh	r1, [r3, #0]
 800318c:	0589      	lsls	r1, r1, #22
 800318e:	0d89      	lsrs	r1, r1, #22
 8003190:	8019      	strh	r1, [r3, #0]
 8003192:	2a3e      	cmp	r2, #62	; 0x3e
 8003194:	d918      	bls.n	80031c8 <USB_EPStartXfer+0x2ac>
 8003196:	201f      	movs	r0, #31
 8003198:	0951      	lsrs	r1, r2, #5
 800319a:	4002      	ands	r2, r0
 800319c:	4250      	negs	r0, r2
 800319e:	4142      	adcs	r2, r0
 80031a0:	1a89      	subs	r1, r1, r2
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	0289      	lsls	r1, r1, #10
 80031a6:	4311      	orrs	r1, r2
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <USB_EPStartXfer+0x328>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	b292      	uxth	r2, r2
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80031ae:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031b0:	7823      	ldrb	r3, [r4, #0]
 80031b2:	4a26      	ldr	r2, [pc, #152]	; (800324c <USB_EPStartXfer+0x330>)
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	18eb      	adds	r3, r5, r3
 80031b8:	8819      	ldrh	r1, [r3, #0]
 80031ba:	4011      	ands	r1, r2
 80031bc:	22c0      	movs	r2, #192	; 0xc0
 80031be:	0192      	lsls	r2, r2, #6
 80031c0:	404a      	eors	r2, r1
 80031c2:	4923      	ldr	r1, [pc, #140]	; (8003250 <USB_EPStartXfer+0x334>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	e6d8      	b.n	8002f7a <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	d104      	bne.n	80031d6 <USB_EPStartXfer+0x2ba>
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	0209      	lsls	r1, r1, #8
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80031d2:	430a      	orrs	r2, r1
 80031d4:	e7eb      	b.n	80031ae <USB_EPStartXfer+0x292>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80031d6:	2001      	movs	r0, #1
 80031d8:	0851      	lsrs	r1, r2, #1
 80031da:	4002      	ands	r2, r0
 80031dc:	1889      	adds	r1, r1, r2
 80031de:	0289      	lsls	r1, r1, #10
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	e7e2      	b.n	80031aa <USB_EPStartXfer+0x28e>
      if (ep->type == EP_TYPE_BULK)
 80031e4:	78cb      	ldrb	r3, [r1, #3]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d000      	beq.n	80031ec <USB_EPStartXfer+0x2d0>
 80031ea:	e07c      	b.n	80032e6 <USB_EPStartXfer+0x3ca>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	d14c      	bne.n	800328a <USB_EPStartXfer+0x36e>
 80031f0:	0006      	movs	r6, r0
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <USB_EPStartXfer+0x310>)
 80031f4:	3650      	adds	r6, #80	; 0x50
 80031f6:	8831      	ldrh	r1, [r6, #0]
 80031f8:	7822      	ldrb	r2, [r4, #0]
 80031fa:	18c3      	adds	r3, r0, r3
 80031fc:	185b      	adds	r3, r3, r1
 80031fe:	00d2      	lsls	r2, r2, #3
 8003200:	18d2      	adds	r2, r2, r3
 8003202:	8813      	ldrh	r3, [r2, #0]
 8003204:	059b      	lsls	r3, r3, #22
 8003206:	0d9b      	lsrs	r3, r3, #22
 8003208:	8013      	strh	r3, [r2, #0]
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	2b3e      	cmp	r3, #62	; 0x3e
 800320e:	d921      	bls.n	8003254 <USB_EPStartXfer+0x338>
 8003210:	201f      	movs	r0, #31
 8003212:	4018      	ands	r0, r3
 8003214:	4247      	negs	r7, r0
 8003216:	4178      	adcs	r0, r7
 8003218:	0959      	lsrs	r1, r3, #5
 800321a:	1a09      	subs	r1, r1, r0
 800321c:	8810      	ldrh	r0, [r2, #0]
 800321e:	0289      	lsls	r1, r1, #10
 8003220:	4308      	orrs	r0, r1
 8003222:	4908      	ldr	r1, [pc, #32]	; (8003244 <USB_EPStartXfer+0x328>)
 8003224:	4301      	orrs	r1, r0
 8003226:	b289      	uxth	r1, r1
 8003228:	e01a      	b.n	8003260 <USB_EPStartXfer+0x344>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	00000402 	.word	0x00000402
 8003230:	ffff8fbf 	.word	0xffff8fbf
 8003234:	ffff8080 	.word	0xffff8080
 8003238:	ffff8f8f 	.word	0xffff8f8f
 800323c:	00008180 	.word	0x00008180
 8003240:	00000406 	.word	0x00000406
 8003244:	ffff8000 	.word	0xffff8000
 8003248:	ffff8e8f 	.word	0xffff8e8f
 800324c:	ffffbf8f 	.word	0xffffbf8f
 8003250:	00008080 	.word	0x00008080
 8003254:	2b00      	cmp	r3, #0
 8003256:	d12b      	bne.n	80032b0 <USB_EPStartXfer+0x394>
 8003258:	2080      	movs	r0, #128	; 0x80
 800325a:	8811      	ldrh	r1, [r2, #0]
 800325c:	0200      	lsls	r0, r0, #8
 800325e:	4301      	orrs	r1, r0
 8003260:	8011      	strh	r1, [r2, #0]
 8003262:	4952      	ldr	r1, [pc, #328]	; (80033ac <USB_EPStartXfer+0x490>)
 8003264:	8830      	ldrh	r0, [r6, #0]
 8003266:	7822      	ldrb	r2, [r4, #0]
 8003268:	1869      	adds	r1, r5, r1
 800326a:	1809      	adds	r1, r1, r0
 800326c:	00d2      	lsls	r2, r2, #3
 800326e:	1852      	adds	r2, r2, r1
 8003270:	8811      	ldrh	r1, [r2, #0]
 8003272:	0589      	lsls	r1, r1, #22
 8003274:	0d89      	lsrs	r1, r1, #22
 8003276:	8011      	strh	r1, [r2, #0]
 8003278:	2b3e      	cmp	r3, #62	; 0x3e
 800327a:	d820      	bhi.n	80032be <USB_EPStartXfer+0x3a2>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d12b      	bne.n	80032d8 <USB_EPStartXfer+0x3bc>
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	8813      	ldrh	r3, [r2, #0]
 8003284:	0209      	lsls	r1, r1, #8
 8003286:	430b      	orrs	r3, r1
 8003288:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 800328a:	69e3      	ldr	r3, [r4, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d08f      	beq.n	80031b0 <USB_EPStartXfer+0x294>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003290:	7823      	ldrb	r3, [r4, #0]
 8003292:	4947      	ldr	r1, [pc, #284]	; (80033b0 <USB_EPStartXfer+0x494>)
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	18eb      	adds	r3, r5, r3
 8003298:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800329a:	400a      	ands	r2, r1
 800329c:	428a      	cmp	r2, r1
 800329e:	d002      	beq.n	80032a6 <USB_EPStartXfer+0x38a>
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d000      	beq.n	80032a6 <USB_EPStartXfer+0x38a>
 80032a4:	e784      	b.n	80031b0 <USB_EPStartXfer+0x294>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80032a6:	4943      	ldr	r1, [pc, #268]	; (80033b4 <USB_EPStartXfer+0x498>)
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	400a      	ands	r2, r1
 80032ac:	4942      	ldr	r1, [pc, #264]	; (80033b8 <USB_EPStartXfer+0x49c>)
 80032ae:	e790      	b.n	80031d2 <USB_EPStartXfer+0x2b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80032b0:	2101      	movs	r1, #1
 80032b2:	0858      	lsrs	r0, r3, #1
 80032b4:	4019      	ands	r1, r3
 80032b6:	1840      	adds	r0, r0, r1
 80032b8:	0280      	lsls	r0, r0, #10
 80032ba:	8811      	ldrh	r1, [r2, #0]
 80032bc:	e7b2      	b.n	8003224 <USB_EPStartXfer+0x308>
 80032be:	201f      	movs	r0, #31
 80032c0:	0959      	lsrs	r1, r3, #5
 80032c2:	4003      	ands	r3, r0
 80032c4:	4258      	negs	r0, r3
 80032c6:	4143      	adcs	r3, r0
 80032c8:	1ac9      	subs	r1, r1, r3
 80032ca:	8813      	ldrh	r3, [r2, #0]
 80032cc:	0289      	lsls	r1, r1, #10
 80032ce:	4319      	orrs	r1, r3
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <USB_EPStartXfer+0x4a0>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	e7d7      	b.n	8003288 <USB_EPStartXfer+0x36c>
 80032d8:	2001      	movs	r0, #1
 80032da:	0859      	lsrs	r1, r3, #1
 80032dc:	4003      	ands	r3, r0
 80032de:	18c9      	adds	r1, r1, r3
 80032e0:	0289      	lsls	r1, r1, #10
 80032e2:	8813      	ldrh	r3, [r2, #0]
 80032e4:	e7f5      	b.n	80032d2 <USB_EPStartXfer+0x3b6>
        return HAL_ERROR;
 80032e6:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 80032e8:	4283      	cmp	r3, r0
 80032ea:	d000      	beq.n	80032ee <USB_EPStartXfer+0x3d2>
 80032ec:	e647      	b.n	8002f7e <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 80032ee:	698b      	ldr	r3, [r1, #24]
 80032f0:	6909      	ldr	r1, [r1, #16]
          ep->xfer_len = 0U;
 80032f2:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d901      	bls.n	80032fc <USB_EPStartXfer+0x3e0>
          ep->xfer_len -= len;
 80032f8:	1a58      	subs	r0, r3, r1
 80032fa:	000b      	movs	r3, r1
 80032fc:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80032fe:	2a00      	cmp	r2, #0
 8003300:	d000      	beq.n	8003304 <USB_EPStartXfer+0x3e8>
 8003302:	e755      	b.n	80031b0 <USB_EPStartXfer+0x294>
 8003304:	002e      	movs	r6, r5
 8003306:	492e      	ldr	r1, [pc, #184]	; (80033c0 <USB_EPStartXfer+0x4a4>)
 8003308:	3650      	adds	r6, #80	; 0x50
 800330a:	8830      	ldrh	r0, [r6, #0]
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	1869      	adds	r1, r5, r1
 8003310:	1809      	adds	r1, r1, r0
 8003312:	00d2      	lsls	r2, r2, #3
 8003314:	1852      	adds	r2, r2, r1
 8003316:	8811      	ldrh	r1, [r2, #0]
 8003318:	0589      	lsls	r1, r1, #22
 800331a:	0d89      	lsrs	r1, r1, #22
 800331c:	8011      	strh	r1, [r2, #0]
 800331e:	2b3e      	cmp	r3, #62	; 0x3e
 8003320:	d90c      	bls.n	800333c <USB_EPStartXfer+0x420>
 8003322:	201f      	movs	r0, #31
 8003324:	4018      	ands	r0, r3
 8003326:	4247      	negs	r7, r0
 8003328:	4178      	adcs	r0, r7
 800332a:	0959      	lsrs	r1, r3, #5
 800332c:	1a09      	subs	r1, r1, r0
 800332e:	8810      	ldrh	r0, [r2, #0]
 8003330:	0289      	lsls	r1, r1, #10
 8003332:	4308      	orrs	r0, r1
 8003334:	4921      	ldr	r1, [pc, #132]	; (80033bc <USB_EPStartXfer+0x4a0>)
 8003336:	4301      	orrs	r1, r0
 8003338:	b289      	uxth	r1, r1
 800333a:	e005      	b.n	8003348 <USB_EPStartXfer+0x42c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d119      	bne.n	8003374 <USB_EPStartXfer+0x458>
 8003340:	2080      	movs	r0, #128	; 0x80
 8003342:	8811      	ldrh	r1, [r2, #0]
 8003344:	0200      	lsls	r0, r0, #8
 8003346:	4301      	orrs	r1, r0
 8003348:	8011      	strh	r1, [r2, #0]
 800334a:	4918      	ldr	r1, [pc, #96]	; (80033ac <USB_EPStartXfer+0x490>)
 800334c:	8830      	ldrh	r0, [r6, #0]
 800334e:	7822      	ldrb	r2, [r4, #0]
 8003350:	1869      	adds	r1, r5, r1
 8003352:	1809      	adds	r1, r1, r0
 8003354:	00d2      	lsls	r2, r2, #3
 8003356:	1852      	adds	r2, r2, r1
 8003358:	8811      	ldrh	r1, [r2, #0]
 800335a:	0589      	lsls	r1, r1, #22
 800335c:	0d89      	lsrs	r1, r1, #22
 800335e:	8011      	strh	r1, [r2, #0]
 8003360:	2b3e      	cmp	r3, #62	; 0x3e
 8003362:	d80e      	bhi.n	8003382 <USB_EPStartXfer+0x466>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d119      	bne.n	800339c <USB_EPStartXfer+0x480>
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	8813      	ldrh	r3, [r2, #0]
 800336c:	0209      	lsls	r1, r1, #8
 800336e:	430b      	orrs	r3, r1
 8003370:	8013      	strh	r3, [r2, #0]
 8003372:	e71d      	b.n	80031b0 <USB_EPStartXfer+0x294>
 8003374:	2101      	movs	r1, #1
 8003376:	0858      	lsrs	r0, r3, #1
 8003378:	4019      	ands	r1, r3
 800337a:	1840      	adds	r0, r0, r1
 800337c:	0280      	lsls	r0, r0, #10
 800337e:	8811      	ldrh	r1, [r2, #0]
 8003380:	e7d9      	b.n	8003336 <USB_EPStartXfer+0x41a>
 8003382:	201f      	movs	r0, #31
 8003384:	0959      	lsrs	r1, r3, #5
 8003386:	4003      	ands	r3, r0
 8003388:	4258      	negs	r0, r3
 800338a:	4143      	adcs	r3, r0
 800338c:	1ac9      	subs	r1, r1, r3
 800338e:	8813      	ldrh	r3, [r2, #0]
 8003390:	0289      	lsls	r1, r1, #10
 8003392:	4319      	orrs	r1, r3
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <USB_EPStartXfer+0x4a0>)
 8003396:	430b      	orrs	r3, r1
 8003398:	b29b      	uxth	r3, r3
 800339a:	e7e9      	b.n	8003370 <USB_EPStartXfer+0x454>
 800339c:	2001      	movs	r0, #1
 800339e:	0859      	lsrs	r1, r3, #1
 80033a0:	4003      	ands	r3, r0
 80033a2:	18c9      	adds	r1, r1, r3
 80033a4:	0289      	lsls	r1, r1, #10
 80033a6:	8813      	ldrh	r3, [r2, #0]
 80033a8:	e7f5      	b.n	8003396 <USB_EPStartXfer+0x47a>
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	00000406 	.word	0x00000406
 80033b0:	00004040 	.word	0x00004040
 80033b4:	ffff8f8f 	.word	0xffff8f8f
 80033b8:	000080c0 	.word	0x000080c0
 80033bc:	ffff8000 	.word	0xffff8000
 80033c0:	00000402 	.word	0x00000402

080033c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033c6:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 80033c8:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033ca:	00ed      	lsls	r5, r5, #3
 80033cc:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 80033ce:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 80033d0:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033d2:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 80033d4:	1a47      	subs	r7, r0, r1
 80033d6:	197a      	adds	r2, r7, r5
 80033d8:	2e00      	cmp	r6, #0
 80033da:	d107      	bne.n	80033ec <USB_ReadPMA+0x28>
 80033dc:	0064      	lsls	r4, r4, #1
 80033de:	1900      	adds	r0, r0, r4
 80033e0:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80033e2:	07db      	lsls	r3, r3, #31
 80033e4:	d501      	bpl.n	80033ea <USB_ReadPMA+0x26>
  {
    RdVal = *pdwVal;
 80033e6:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80033e8:	700b      	strb	r3, [r1, #0]
  }
}
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 80033ec:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 80033ee:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 80033f0:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80033f2:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80033f4:	0a12      	lsrs	r2, r2, #8
 80033f6:	706a      	strb	r2, [r5, #1]
    pBuf++;
 80033f8:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 80033fa:	e7ec      	b.n	80033d6 <USB_ReadPMA+0x12>

080033fc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80033fc:	2329      	movs	r3, #41	; 0x29
 80033fe:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8003400:	4800      	ldr	r0, [pc, #0]	; (8003404 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
}
 8003402:	4770      	bx	lr
 8003404:	200000c8 	.word	0x200000c8

08003408 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8003408:	2329      	movs	r3, #41	; 0x29
 800340a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800340c:	4800      	ldr	r0, [pc, #0]	; (8003410 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
}
 800340e:	4770      	bx	lr
 8003410:	200000f4 	.word	0x200000f4

08003414 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8003414:	2329      	movs	r3, #41	; 0x29
 8003416:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8003418:	4800      	ldr	r0, [pc, #0]	; (800341c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
}
 800341a:	4770      	bx	lr
 800341c:	20000138 	.word	0x20000138

08003420 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8003420:	23ae      	movs	r3, #174	; 0xae
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	58c3      	ldr	r3, [r0, r3]
 8003426:	2000      	movs	r0, #0
 8003428:	3301      	adds	r3, #1
 800342a:	77d8      	strb	r0, [r3, #31]

  return USBD_OK;
}
 800342c:	4770      	bx	lr

0800342e <USBD_CUSTOM_HID_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800342e:	22ae      	movs	r2, #174	; 0xae
 8003430:	0092      	lsls	r2, r2, #2
{
 8003432:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003434:	5884      	ldr	r4, [r0, r2]
{
 8003436:	0003      	movs	r3, r0

  if (hhid->IsReportAvailable == 1U)
 8003438:	69e2      	ldr	r2, [r4, #28]
 800343a:	2a01      	cmp	r2, #1
 800343c:	d108      	bne.n	8003450 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800343e:	22af      	movs	r2, #175	; 0xaf
 8003440:	0092      	lsls	r2, r2, #2
 8003442:	589b      	ldr	r3, [r3, r2]
 8003444:	7861      	ldrb	r1, [r4, #1]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	7820      	ldrb	r0, [r4, #0]
 800344a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	61e3      	str	r3, [r4, #28]
  }

  return USBD_OK;
}
 8003450:	2000      	movs	r0, #0
 8003452:	bd10      	pop	{r4, pc}

08003454 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8003454:	230a      	movs	r3, #10
 8003456:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8003458:	4800      	ldr	r0, [pc, #0]	; (800345c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
}
 800345a:	4770      	bx	lr
 800345c:	2000012c 	.word	0x2000012c

08003460 <USBD_CUSTOM_HID_DataOut>:
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003460:	23ae      	movs	r3, #174	; 0xae
{
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	0004      	movs	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	58c5      	ldr	r5, [r0, r3]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800346a:	3304      	adds	r3, #4
 800346c:	58e3      	ldr	r3, [r4, r3]
 800346e:	7869      	ldrb	r1, [r5, #1]
 8003470:	7828      	ldrb	r0, [r5, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003476:	002a      	movs	r2, r5
 8003478:	230f      	movs	r3, #15
 800347a:	2101      	movs	r1, #1
 800347c:	0020      	movs	r0, r4
 800347e:	f000 feb2 	bl	80041e6 <USBD_LL_PrepareReceive>
}
 8003482:	2000      	movs	r0, #0
 8003484:	bd70      	pop	{r4, r5, r6, pc}
	...

08003488 <USBD_CUSTOM_HID_Setup>:
{
 8003488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800348a:	22ae      	movs	r2, #174	; 0xae
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	5884      	ldr	r4, [r0, r2]
  uint16_t status_info = 0U;
 8003490:	466a      	mov	r2, sp
{
 8003492:	0003      	movs	r3, r0
 8003494:	7808      	ldrb	r0, [r1, #0]
  uint16_t status_info = 0U;
 8003496:	1d97      	adds	r7, r2, #6
 8003498:	2200      	movs	r2, #0
 800349a:	0005      	movs	r5, r0
 800349c:	803a      	strh	r2, [r7, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800349e:	3260      	adds	r2, #96	; 0x60
 80034a0:	4015      	ands	r5, r2
 80034a2:	4210      	tst	r0, r2
 80034a4:	d027      	beq.n	80034f6 <USBD_CUSTOM_HID_Setup+0x6e>
 80034a6:	2d20      	cmp	r5, #32
 80034a8:	d13d      	bne.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
      switch (req->bRequest)
 80034aa:	7848      	ldrb	r0, [r1, #1]
 80034ac:	3802      	subs	r0, #2
 80034ae:	2809      	cmp	r0, #9
 80034b0:	d839      	bhi.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
 80034b2:	f7fc fe31 	bl	8000118 <__gnu_thumb1_case_uqi>
 80034b6:	0a15      	.short	0x0a15
 80034b8:	38383838 	.word	0x38383838
 80034bc:	05111838 	.word	0x05111838
          hhid->Protocol = (uint8_t)(req->wValue);
 80034c0:	788b      	ldrb	r3, [r1, #2]
 80034c2:	6123      	str	r3, [r4, #16]
  uint8_t ret = USBD_OK;
 80034c4:	2500      	movs	r5, #0
}
 80034c6:	0028      	movs	r0, r5
 80034c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80034ca:	0021      	movs	r1, r4
 80034cc:	3110      	adds	r1, #16
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80034ce:	2201      	movs	r2, #1
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 fc6f 	bl	8003db4 <USBD_CtlSendData>
          break;
 80034d6:	e7f5      	b.n	80034c4 <USBD_CUSTOM_HID_Setup+0x3c>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80034d8:	884b      	ldrh	r3, [r1, #2]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	6163      	str	r3, [r4, #20]
          break;
 80034de:	e7f1      	b.n	80034c4 <USBD_CUSTOM_HID_Setup+0x3c>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80034e0:	0021      	movs	r1, r4
 80034e2:	3114      	adds	r1, #20
 80034e4:	e7f3      	b.n	80034ce <USBD_CUSTOM_HID_Setup+0x46>
          hhid->IsReportAvailable = 1U;
 80034e6:	2201      	movs	r2, #1
 80034e8:	61e2      	str	r2, [r4, #28]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80034ea:	88ca      	ldrh	r2, [r1, #6]
 80034ec:	0018      	movs	r0, r3
 80034ee:	0021      	movs	r1, r4
 80034f0:	f000 fc76 	bl	8003de0 <USBD_CtlPrepareRx>
 80034f4:	e7e6      	b.n	80034c4 <USBD_CUSTOM_HID_Setup+0x3c>
      switch (req->bRequest)
 80034f6:	784e      	ldrb	r6, [r1, #1]
 80034f8:	2e0b      	cmp	r6, #11
 80034fa:	d814      	bhi.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
 80034fc:	0030      	movs	r0, r6
 80034fe:	f7fc fe0b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003502:	1206      	.short	0x1206
 8003504:	12121212 	.word	0x12121212
 8003508:	12121217 	.word	0x12121217
 800350c:	3f36      	.short	0x3f36
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800350e:	22a7      	movs	r2, #167	; 0xa7
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	5c9a      	ldrb	r2, [r3, r2]
 8003514:	2a03      	cmp	r2, #3
 8003516:	d106      	bne.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003518:	0039      	movs	r1, r7
 800351a:	0018      	movs	r0, r3
 800351c:	3a01      	subs	r2, #1
 800351e:	f000 fc49 	bl	8003db4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003522:	0035      	movs	r5, r6
 8003524:	e7cf      	b.n	80034c6 <USBD_CUSTOM_HID_Setup+0x3e>
            USBD_CtlError(pdev, req);
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fc1c 	bl	8003d64 <USBD_CtlError>
            ret = USBD_FAIL;
 800352c:	2502      	movs	r5, #2
 800352e:	e7ca      	b.n	80034c6 <USBD_CUSTOM_HID_Setup+0x3e>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8003530:	884c      	ldrh	r4, [r1, #2]
 8003532:	0a24      	lsrs	r4, r4, #8
 8003534:	2c22      	cmp	r4, #34	; 0x22
 8003536:	d10e      	bne.n	8003556 <USBD_CUSTOM_HID_Setup+0xce>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003538:	88c9      	ldrh	r1, [r1, #6]
 800353a:	1c0a      	adds	r2, r1, #0
 800353c:	2949      	cmp	r1, #73	; 0x49
 800353e:	d900      	bls.n	8003542 <USBD_CUSTOM_HID_Setup+0xba>
 8003540:	2249      	movs	r2, #73	; 0x49
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8003542:	21af      	movs	r1, #175	; 0xaf
 8003544:	0089      	lsls	r1, r1, #2
 8003546:	5859      	ldr	r1, [r3, r1]
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8003548:	b292      	uxth	r2, r2
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800354a:	6808      	ldr	r0, [r1, #0]
          USBD_CtlSendData(pdev, pbuf, len);
 800354c:	0001      	movs	r1, r0
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800354e:	0018      	movs	r0, r3
 8003550:	f000 fc30 	bl	8003db4 <USBD_CtlSendData>
 8003554:	e7b7      	b.n	80034c6 <USBD_CUSTOM_HID_Setup+0x3e>
  uint8_t  *pbuf = NULL;
 8003556:	2000      	movs	r0, #0
  uint16_t len = 0U;
 8003558:	0002      	movs	r2, r0
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800355a:	2c21      	cmp	r4, #33	; 0x21
 800355c:	d1f6      	bne.n	800354c <USBD_CUSTOM_HID_Setup+0xc4>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800355e:	88c9      	ldrh	r1, [r1, #6]
 8003560:	1c0a      	adds	r2, r1, #0
 8003562:	2909      	cmp	r1, #9
 8003564:	d900      	bls.n	8003568 <USBD_CUSTOM_HID_Setup+0xe0>
 8003566:	2209      	movs	r2, #9
              pbuf = USBD_CUSTOM_HID_Desc;
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <USBD_CUSTOM_HID_Setup+0x108>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800356a:	b292      	uxth	r2, r2
 800356c:	e7ee      	b.n	800354c <USBD_CUSTOM_HID_Setup+0xc4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800356e:	22a7      	movs	r2, #167	; 0xa7
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	5c9a      	ldrb	r2, [r3, r2]
 8003574:	2a03      	cmp	r2, #3
 8003576:	d1d6      	bne.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8003578:	0021      	movs	r1, r4
 800357a:	3a02      	subs	r2, #2
 800357c:	3118      	adds	r1, #24
 800357e:	e7e6      	b.n	800354e <USBD_CUSTOM_HID_Setup+0xc6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003580:	22a7      	movs	r2, #167	; 0xa7
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	5c9a      	ldrb	r2, [r3, r2]
 8003586:	2a03      	cmp	r2, #3
 8003588:	d1cd      	bne.n	8003526 <USBD_CUSTOM_HID_Setup+0x9e>
            hhid->AltSetting = (uint8_t)(req->wValue);
 800358a:	788b      	ldrb	r3, [r1, #2]
 800358c:	61a3      	str	r3, [r4, #24]
 800358e:	e79a      	b.n	80034c6 <USBD_CUSTOM_HID_Setup+0x3e>
 8003590:	20000120 	.word	0x20000120

08003594 <USBD_CUSTOM_HID_DeInit>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	0004      	movs	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003598:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800359a:	2181      	movs	r1, #129	; 0x81
 800359c:	f000 fde1 	bl	8004162 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80035a0:	2101      	movs	r1, #1
 80035a2:	0020      	movs	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80035a4:	62e6      	str	r6, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80035a6:	f000 fddc 	bl	8004162 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80035aa:	25ae      	movs	r5, #174	; 0xae
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80035ac:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 80035ae:	00ad      	lsls	r5, r5, #2
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80035b0:	33fc      	adds	r3, #252	; 0xfc
 80035b2:	671e      	str	r6, [r3, #112]	; 0x70
  if (pdev->pClassData != NULL)
 80035b4:	5963      	ldr	r3, [r4, r5]
 80035b6:	42b3      	cmp	r3, r6
 80035b8:	d008      	beq.n	80035cc <USBD_CUSTOM_HID_DeInit+0x38>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80035ba:	23af      	movs	r3, #175	; 0xaf
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	58e3      	ldr	r3, [r4, r3]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80035c4:	5960      	ldr	r0, [r4, r5]
 80035c6:	f000 fe1b 	bl	8004200 <USBD_static_free>
    pdev->pClassData = NULL;
 80035ca:	5166      	str	r6, [r4, r5]
}
 80035cc:	2000      	movs	r0, #0
 80035ce:	bd70      	pop	{r4, r5, r6, pc}

080035d0 <USBD_CUSTOM_HID_Init>:
{
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	0004      	movs	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80035d4:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80035d6:	2302      	movs	r3, #2
 80035d8:	2203      	movs	r2, #3
 80035da:	2181      	movs	r1, #129	; 0x81
 80035dc:	f000 fdb5 	bl	800414a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80035e0:	2302      	movs	r3, #2
 80035e2:	2203      	movs	r2, #3
 80035e4:	0039      	movs	r1, r7
 80035e6:	0020      	movs	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80035e8:	62e7      	str	r7, [r4, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80035ea:	f000 fdae 	bl	800414a <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80035ee:	0023      	movs	r3, r4
 80035f0:	33fc      	adds	r3, #252	; 0xfc
 80035f2:	671f      	str	r7, [r3, #112]	; 0x70
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80035f4:	2024      	movs	r0, #36	; 0x24
 80035f6:	f000 fdff 	bl	80041f8 <USBD_static_malloc>
 80035fa:	23ae      	movs	r3, #174	; 0xae
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	0005      	movs	r5, r0
 8003600:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8003602:	0038      	movs	r0, r7
  if (pdev->pClassData == NULL)
 8003604:	2d00      	cmp	r5, #0
 8003606:	d00e      	beq.n	8003626 <USBD_CUSTOM_HID_Init+0x56>
    hhid->state = CUSTOM_HID_IDLE;
 8003608:	2600      	movs	r6, #0
 800360a:	19eb      	adds	r3, r5, r7
 800360c:	77de      	strb	r6, [r3, #31]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800360e:	23af      	movs	r3, #175	; 0xaf
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	58e3      	ldr	r3, [r4, r3]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003618:	230f      	movs	r3, #15
 800361a:	002a      	movs	r2, r5
 800361c:	0039      	movs	r1, r7
 800361e:	0020      	movs	r0, r4
 8003620:	f000 fde1 	bl	80041e6 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003624:	0030      	movs	r0, r6
}
 8003626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003628 <USBD_CUSTOM_HID_SendReport>:
{
 8003628:	0013      	movs	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800362a:	22a7      	movs	r2, #167	; 0xa7
{
 800362c:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	5c82      	ldrb	r2, [r0, r2]
  return USBD_OK;
 8003632:	2400      	movs	r4, #0
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003634:	2a03      	cmp	r2, #3
 8003636:	d10c      	bne.n	8003652 <USBD_CUSTOM_HID_SendReport+0x2a>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8003638:	22ae      	movs	r2, #174	; 0xae
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	5885      	ldr	r5, [r0, r2]
    if (hhid->state == CUSTOM_HID_IDLE)
 800363e:	2201      	movs	r2, #1
 8003640:	3501      	adds	r5, #1
 8003642:	7fec      	ldrb	r4, [r5, #31]
 8003644:	2c00      	cmp	r4, #0
 8003646:	d106      	bne.n	8003656 <USBD_CUSTOM_HID_SendReport+0x2e>
      hhid->state = CUSTOM_HID_BUSY;
 8003648:	77ea      	strb	r2, [r5, #31]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800364a:	000a      	movs	r2, r1
 800364c:	2181      	movs	r1, #129	; 0x81
 800364e:	f000 fdc1 	bl	80041d4 <USBD_LL_Transmit>
}
 8003652:	0020      	movs	r0, r4
 8003654:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8003656:	0014      	movs	r4, r2
 8003658:	e7fb      	b.n	8003652 <USBD_CUSTOM_HID_SendReport+0x2a>

0800365a <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800365a:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 800365c:	2002      	movs	r0, #2

  if (fops != NULL)
 800365e:	2900      	cmp	r1, #0
 8003660:	d003      	beq.n	800366a <USBD_CUSTOM_HID_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8003662:	22af      	movs	r2, #175	; 0xaf
    ret = USBD_OK;
 8003664:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 800366a:	4770      	bx	lr

0800366c <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800366c:	2302      	movs	r3, #2
{
 800366e:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8003670:	2800      	cmp	r0, #0
 8003672:	d013      	beq.n	800369c <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003674:	23ad      	movs	r3, #173	; 0xad
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	58c4      	ldr	r4, [r0, r3]
 800367a:	2c00      	cmp	r4, #0
 800367c:	d001      	beq.n	8003682 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 800367e:	2400      	movs	r4, #0
 8003680:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003682:	2900      	cmp	r1, #0
 8003684:	d002      	beq.n	800368c <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8003686:	23ac      	movs	r3, #172	; 0xac
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800368c:	23a7      	movs	r3, #167	; 0xa7
 800368e:	2101      	movs	r1, #1
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8003694:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003696:	f000 fd17 	bl	80040c8 <USBD_LL_Init>

  return USBD_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	0018      	movs	r0, r3
 800369e:	bd10      	pop	{r4, pc}

080036a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80036a0:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80036a2:	2002      	movs	r0, #2
  if (pclass != NULL)
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d003      	beq.n	80036b0 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 80036a8:	22ad      	movs	r2, #173	; 0xad
    status = USBD_OK;
 80036aa:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 80036b0:	4770      	bx	lr

080036b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80036b2:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80036b4:	f000 fd40 	bl	8004138 <USBD_LL_Start>

  return USBD_OK;
}
 80036b8:	2000      	movs	r0, #0
 80036ba:	bd10      	pop	{r4, pc}

080036bc <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80036bc:	23ad      	movs	r3, #173	; 0xad
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	58c2      	ldr	r2, [r0, r3]
{
 80036c2:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80036c4:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	d004      	beq.n	80036d4 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	4798      	blx	r3
 80036ce:	1e43      	subs	r3, r0, #1
 80036d0:	4198      	sbcs	r0, r3
 80036d2:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80036d8:	23ad      	movs	r3, #173	; 0xad
{
 80036da:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	58c3      	ldr	r3, [r0, r3]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4798      	blx	r3

  return USBD_OK;
}
 80036e4:	2000      	movs	r0, #0
 80036e6:	bd10      	pop	{r4, pc}

080036e8 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80036e8:	23aa      	movs	r3, #170	; 0xaa
 80036ea:	009b      	lsls	r3, r3, #2
{
 80036ec:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80036ee:	18c5      	adds	r5, r0, r3
{
 80036f0:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80036f2:	0028      	movs	r0, r5
 80036f4:	f000 fb22 	bl	8003d3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80036f8:	23a5      	movs	r3, #165	; 0xa5
 80036fa:	2201      	movs	r2, #1
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <USBD_LL_SetupStage+0x60>)
 8003702:	5ae2      	ldrh	r2, [r4, r3]
 8003704:	3b16      	subs	r3, #22
 8003706:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003708:	3310      	adds	r3, #16
 800370a:	5ce1      	ldrb	r1, [r4, r3]
 800370c:	231f      	movs	r3, #31
 800370e:	400b      	ands	r3, r1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d009      	beq.n	8003728 <USBD_LL_SetupStage+0x40>
 8003714:	2b02      	cmp	r3, #2
 8003716:	d00c      	beq.n	8003732 <USBD_LL_SetupStage+0x4a>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10f      	bne.n	800373c <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800371c:	0029      	movs	r1, r5
 800371e:	0020      	movs	r0, r4
 8003720:	f000 f91e 	bl	8003960 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003724:	2000      	movs	r0, #0
 8003726:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003728:	0029      	movs	r1, r5
 800372a:	0020      	movs	r0, r4
 800372c:	f000 fa4e 	bl	8003bcc <USBD_StdItfReq>
      break;
 8003730:	e7f8      	b.n	8003724 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8003732:	0029      	movs	r1, r5
 8003734:	0020      	movs	r0, r4
 8003736:	f000 fa71 	bl	8003c1c <USBD_StdEPReq>
      break;
 800373a:	e7f3      	b.n	8003724 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800373c:	237f      	movs	r3, #127	; 0x7f
 800373e:	0020      	movs	r0, r4
 8003740:	4399      	bics	r1, r3
 8003742:	f000 fd17 	bl	8004174 <USBD_LL_StallEP>
      break;
 8003746:	e7ed      	b.n	8003724 <USBD_LL_SetupStage+0x3c>
 8003748:	000002ae 	.word	0x000002ae

0800374c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	000d      	movs	r5, r1
 8003750:	0004      	movs	r4, r0
 8003752:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003754:	2d00      	cmp	r5, #0
 8003756:	d12e      	bne.n	80037b6 <USBD_LL_DataOutStage+0x6a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003758:	23a5      	movs	r3, #165	; 0xa5
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	58c2      	ldr	r2, [r0, r3]
 800375e:	2a03      	cmp	r2, #3
 8003760:	d122      	bne.n	80037a8 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003762:	0002      	movs	r2, r0
 8003764:	3255      	adds	r2, #85	; 0x55
 8003766:	32ff      	adds	r2, #255	; 0xff
 8003768:	68d3      	ldr	r3, [r2, #12]
 800376a:	6910      	ldr	r0, [r2, #16]
 800376c:	4283      	cmp	r3, r0
 800376e:	d90a      	bls.n	8003786 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8003770:	1a1b      	subs	r3, r3, r0
 8003772:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8003774:	b282      	uxth	r2, r0
 8003776:	4298      	cmp	r0, r3
 8003778:	d900      	bls.n	800377c <USBD_LL_DataOutStage+0x30>
 800377a:	b29a      	uxth	r2, r3
 800377c:	0020      	movs	r0, r4
 800377e:	f000 fb3f 	bl	8003e00 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003782:	0028      	movs	r0, r5
 8003784:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003786:	23ad      	movs	r3, #173	; 0xad
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	58e3      	ldr	r3, [r4, r3]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003792:	22a7      	movs	r2, #167	; 0xa7
 8003794:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003796:	5ca2      	ldrb	r2, [r4, r2]
 8003798:	2a03      	cmp	r2, #3
 800379a:	d101      	bne.n	80037a0 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 800379c:	0020      	movs	r0, r4
 800379e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80037a0:	0020      	movs	r0, r4
 80037a2:	f000 fb35 	bl	8003e10 <USBD_CtlSendStatus>
 80037a6:	e7ec      	b.n	8003782 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80037a8:	2a05      	cmp	r2, #5
 80037aa:	d1ea      	bne.n	8003782 <USBD_LL_DataOutStage+0x36>
        USBD_LL_StallEP(pdev, 0U);
 80037ac:	0029      	movs	r1, r5
        pdev->ep0_state = USBD_EP0_IDLE;
 80037ae:	50c5      	str	r5, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 80037b0:	f000 fce0 	bl	8004174 <USBD_LL_StallEP>
 80037b4:	e7e5      	b.n	8003782 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 80037b6:	23ad      	movs	r3, #173	; 0xad
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	58c3      	ldr	r3, [r0, r3]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80037c2:	22a7      	movs	r2, #167	; 0xa7
 80037c4:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80037c6:	5c82      	ldrb	r2, [r0, r2]
 80037c8:	2a03      	cmp	r2, #3
 80037ca:	d103      	bne.n	80037d4 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 80037cc:	0029      	movs	r1, r5
 80037ce:	4798      	blx	r3
  return USBD_OK;
 80037d0:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80037d2:	e7d6      	b.n	8003782 <USBD_LL_DataOutStage+0x36>
    return USBD_FAIL;
 80037d4:	2502      	movs	r5, #2
 80037d6:	e7d4      	b.n	8003782 <USBD_LL_DataOutStage+0x36>

080037d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	000d      	movs	r5, r1
 80037dc:	0004      	movs	r4, r0
 80037de:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	d14d      	bne.n	8003880 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80037e4:	23a5      	movs	r3, #165	; 0xa5
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	58c3      	ldr	r3, [r0, r3]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d141      	bne.n	8003872 <USBD_LL_DataInStage+0x9a>
    {
      if (pep->rem_length > pep->maxpacket)
 80037ee:	6a03      	ldr	r3, [r0, #32]
 80037f0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80037f2:	42b3      	cmp	r3, r6
 80037f4:	d913      	bls.n	800381e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80037f6:	1b9b      	subs	r3, r3, r6
 80037f8:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	f000 fae8 	bl	8003dd0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003800:	002b      	movs	r3, r5
 8003802:	002a      	movs	r2, r5
 8003804:	0029      	movs	r1, r5
 8003806:	0020      	movs	r0, r4
 8003808:	f000 fced 	bl	80041e6 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800380c:	23a8      	movs	r3, #168	; 0xa8
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	5ce2      	ldrb	r2, [r4, r3]
 8003812:	2a01      	cmp	r2, #1
 8003814:	d101      	bne.n	800381a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003816:	2200      	movs	r2, #0
 8003818:	54e2      	strb	r2, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800381a:	0028      	movs	r0, r5
 800381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800381e:	69c7      	ldr	r7, [r0, #28]
 8003820:	0031      	movs	r1, r6
 8003822:	0038      	movs	r0, r7
 8003824:	f7fc fd12 	bl	800024c <__aeabi_uidivmod>
 8003828:	2900      	cmp	r1, #0
 800382a:	d10d      	bne.n	8003848 <USBD_LL_DataInStage+0x70>
 800382c:	42be      	cmp	r6, r7
 800382e:	d80b      	bhi.n	8003848 <USBD_LL_DataInStage+0x70>
            (pep->total_length < pdev->ep0_data_len))
 8003830:	26a6      	movs	r6, #166	; 0xa6
 8003832:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8003834:	59a3      	ldr	r3, [r4, r6]
 8003836:	429f      	cmp	r7, r3
 8003838:	d206      	bcs.n	8003848 <USBD_LL_DataInStage+0x70>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800383a:	002a      	movs	r2, r5
 800383c:	0029      	movs	r1, r5
 800383e:	0020      	movs	r0, r4
 8003840:	f000 fac6 	bl	8003dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003844:	51a5      	str	r5, [r4, r6]
 8003846:	e7db      	b.n	8003800 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003848:	23ad      	movs	r3, #173	; 0xad
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	58e3      	ldr	r3, [r4, r3]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <USBD_LL_DataInStage+0x8a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003854:	22a7      	movs	r2, #167	; 0xa7
 8003856:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003858:	5ca2      	ldrb	r2, [r4, r2]
 800385a:	2a03      	cmp	r2, #3
 800385c:	d101      	bne.n	8003862 <USBD_LL_DataInStage+0x8a>
            pdev->pClass->EP0_TxSent(pdev);
 800385e:	0020      	movs	r0, r4
 8003860:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0020      	movs	r0, r4
 8003866:	f000 fc85 	bl	8004174 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800386a:	0020      	movs	r0, r4
 800386c:	f000 fadc 	bl	8003e28 <USBD_CtlReceiveStatus>
 8003870:	e7cc      	b.n	800380c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003872:	2204      	movs	r2, #4
 8003874:	4393      	bics	r3, r2
 8003876:	d1c9      	bne.n	800380c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	f000 fc7b 	bl	8004174 <USBD_LL_StallEP>
 800387e:	e7c5      	b.n	800380c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003880:	23ad      	movs	r3, #173	; 0xad
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	58c3      	ldr	r3, [r0, r3]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <USBD_LL_DataInStage+0xc6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800388c:	22a7      	movs	r2, #167	; 0xa7
 800388e:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8003890:	5c82      	ldrb	r2, [r0, r2]
 8003892:	2a03      	cmp	r2, #3
 8003894:	d103      	bne.n	800389e <USBD_LL_DataInStage+0xc6>
    pdev->pClass->DataIn(pdev, epnum);
 8003896:	0029      	movs	r1, r5
 8003898:	4798      	blx	r3
  return USBD_OK;
 800389a:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 800389c:	e7bd      	b.n	800381a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800389e:	2502      	movs	r5, #2
 80038a0:	e7bb      	b.n	800381a <USBD_LL_DataInStage+0x42>

080038a2 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038a2:	2200      	movs	r2, #0
{
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038a8:	0011      	movs	r1, r2
 80038aa:	2340      	movs	r3, #64	; 0x40
 80038ac:	f000 fc4d 	bl	800414a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80038b0:	0023      	movs	r3, r4
 80038b2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80038b4:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80038b6:	33fc      	adds	r3, #252	; 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038b8:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80038ba:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80038bc:	669e      	str	r6, [r3, #104]	; 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80038be:	2200      	movs	r2, #0
 80038c0:	0033      	movs	r3, r6
 80038c2:	0020      	movs	r0, r4
 80038c4:	f000 fc41 	bl	800414a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80038c8:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 80038ca:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80038cc:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80038ce:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80038d0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80038d2:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80038d4:	3b08      	subs	r3, #8
 80038d6:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 80038d8:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 80038da:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80038dc:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 80038de:	3314      	adds	r3, #20
 80038e0:	58e3      	ldr	r3, [r4, r3]
 80038e2:	428b      	cmp	r3, r1
 80038e4:	d005      	beq.n	80038f2 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80038e6:	23ad      	movs	r3, #173	; 0xad
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	58e3      	ldr	r3, [r4, r3]
 80038ec:	0020      	movs	r0, r4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4798      	blx	r3
  }

  return USBD_OK;
}
 80038f2:	2000      	movs	r0, #0
 80038f4:	bd70      	pop	{r4, r5, r6, pc}

080038f6 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80038f6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80038f8:	2000      	movs	r0, #0
 80038fa:	4770      	bx	lr

080038fc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80038fc:	23a7      	movs	r3, #167	; 0xa7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	5cc1      	ldrb	r1, [r0, r3]
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <USBD_LL_Suspend+0x14>)
 8003904:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003906:	2204      	movs	r2, #4
 8003908:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	0000029d 	.word	0x0000029d

08003914 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003914:	23a7      	movs	r3, #167	; 0xa7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	5cc2      	ldrb	r2, [r0, r3]
 800391a:	2a04      	cmp	r2, #4
 800391c:	d102      	bne.n	8003924 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800391e:	4a02      	ldr	r2, [pc, #8]	; (8003928 <USBD_LL_Resume+0x14>)
 8003920:	5c82      	ldrb	r2, [r0, r2]
 8003922:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8003924:	2000      	movs	r0, #0
 8003926:	4770      	bx	lr
 8003928:	0000029d 	.word	0x0000029d

0800392c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800392c:	23a7      	movs	r3, #167	; 0xa7
{
 800392e:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	5cc3      	ldrb	r3, [r0, r3]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d106      	bne.n	8003946 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8003938:	23ad      	movs	r3, #173	; 0xad
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	58c3      	ldr	r3, [r0, r3]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d000      	beq.n	8003946 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8003944:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003946:	2000      	movs	r0, #0
 8003948:	bd10      	pop	{r4, pc}

0800394a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800394a:	b510      	push	{r4, lr}
 800394c:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800394e:	2180      	movs	r1, #128	; 0x80
 8003950:	f000 fc10 	bl	8004174 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003954:	2100      	movs	r1, #0
 8003956:	0020      	movs	r0, r4
 8003958:	f000 fc0c 	bl	8004174 <USBD_LL_StallEP>
}
 800395c:	bd10      	pop	{r4, pc}
	...

08003960 <USBD_StdDevReq>:
{
 8003960:	2260      	movs	r2, #96	; 0x60
 8003962:	780b      	ldrb	r3, [r1, #0]
 8003964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003966:	4013      	ands	r3, r2
 8003968:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800396a:	0019      	movs	r1, r3
 800396c:	1892      	adds	r2, r2, r2
 800396e:	3920      	subs	r1, #32
{
 8003970:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003972:	4211      	tst	r1, r2
 8003974:	d012      	beq.n	800399c <USBD_StdDevReq+0x3c>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d000      	beq.n	800397c <USBD_StdDevReq+0x1c>
 800397a:	e096      	b.n	8003aaa <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 800397c:	7868      	ldrb	r0, [r5, #1]
 800397e:	2809      	cmp	r0, #9
 8003980:	d900      	bls.n	8003984 <USBD_StdDevReq+0x24>
 8003982:	e092      	b.n	8003aaa <USBD_StdDevReq+0x14a>
 8003984:	f7fc fbd2 	bl	800012c <__gnu_thumb1_case_uhi>
 8003988:	010d00f0 	.word	0x010d00f0
 800398c:	01050091 	.word	0x01050091
 8003990:	00830091 	.word	0x00830091
 8003994:	00910012 	.word	0x00910012
 8003998:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 800399c:	23ad      	movs	r3, #173	; 0xad
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	58c3      	ldr	r3, [r0, r3]
 80039a2:	0029      	movs	r1, r5
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4798      	blx	r3
}
 80039a8:	2000      	movs	r0, #0
 80039aa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	466a      	mov	r2, sp
 80039b0:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 80039b2:	886b      	ldrh	r3, [r5, #2]
 80039b4:	0a18      	lsrs	r0, r3, #8
 80039b6:	3801      	subs	r0, #1
 80039b8:	2806      	cmp	r0, #6
 80039ba:	d876      	bhi.n	8003aaa <USBD_StdDevReq+0x14a>
 80039bc:	f7fc fbac 	bl	8000118 <__gnu_thumb1_case_uqi>
 80039c0:	75261704 	.word	0x75261704
 80039c4:	4075      	.short	0x4075
 80039c6:	4b          	.byte	0x4b
 80039c7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80039c8:	23ac      	movs	r3, #172	; 0xac
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	58e3      	ldr	r3, [r4, r3]
 80039ce:	7c20      	ldrb	r0, [r4, #16]
 80039d0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80039d2:	466a      	mov	r2, sp
 80039d4:	1d91      	adds	r1, r2, #6
 80039d6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80039d8:	466b      	mov	r3, sp
 80039da:	88d9      	ldrh	r1, [r3, #6]
 80039dc:	88ea      	ldrh	r2, [r5, #6]
 80039de:	2900      	cmp	r1, #0
 80039e0:	d050      	beq.n	8003a84 <USBD_StdDevReq+0x124>
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d143      	bne.n	8003a6e <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 80039e6:	0020      	movs	r0, r4
 80039e8:	f000 fa12 	bl	8003e10 <USBD_CtlSendStatus>
 80039ec:	e7dc      	b.n	80039a8 <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 80039ee:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039f0:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	d106      	bne.n	8003a08 <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80039fc:	466a      	mov	r2, sp
 80039fe:	1d90      	adds	r0, r2, #6
 8003a00:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003a02:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a04:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003a06:	e7e7      	b.n	80039d8 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	e7f7      	b.n	80039fc <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8003a0c:	b2d8      	uxtb	r0, r3
 8003a0e:	2805      	cmp	r0, #5
 8003a10:	d84b      	bhi.n	8003aaa <USBD_StdDevReq+0x14a>
 8003a12:	23ac      	movs	r3, #172	; 0xac
 8003a14:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003a16:	58e3      	ldr	r3, [r4, r3]
 8003a18:	f7fc fb7e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003a1c:	0c0a0803 	.word	0x0c0a0803
 8003a20:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d040      	beq.n	8003aaa <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003a28:	7c20      	ldrb	r0, [r4, #16]
 8003a2a:	e7d2      	b.n	80039d2 <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	e7f9      	b.n	8003a24 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	e7f7      	b.n	8003a24 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	e7f5      	b.n	8003a24 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	e7f3      	b.n	8003a24 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	e7f1      	b.n	8003a24 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a40:	7c23      	ldrb	r3, [r4, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d131      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003a46:	23ad      	movs	r3, #173	; 0xad
 8003a48:	466a      	mov	r2, sp
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	58e3      	ldr	r3, [r4, r3]
 8003a4e:	1d90      	adds	r0, r2, #6
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	4798      	blx	r3
  if (err != 0U)
 8003a54:	e7c0      	b.n	80039d8 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a56:	7c23      	ldrb	r3, [r4, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d126      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003a5c:	23ad      	movs	r3, #173	; 0xad
 8003a5e:	466a      	mov	r2, sp
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	58e3      	ldr	r3, [r4, r3]
 8003a64:	1d90      	adds	r0, r2, #6
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e7ca      	b.n	8003a04 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8003a6e:	1c0b      	adds	r3, r1, #0
 8003a70:	4291      	cmp	r1, r2
 8003a72:	d900      	bls.n	8003a76 <USBD_StdDevReq+0x116>
 8003a74:	1c13      	adds	r3, r2, #0
 8003a76:	4669      	mov	r1, sp
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003a7c:	0001      	movs	r1, r0
 8003a7e:	0020      	movs	r0, r4
 8003a80:	f000 f998 	bl	8003db4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003a84:	88eb      	ldrh	r3, [r5, #6]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d000      	beq.n	8003a8c <USBD_StdDevReq+0x12c>
 8003a8a:	e78d      	b.n	80039a8 <USBD_StdDevReq+0x48>
 8003a8c:	e7ab      	b.n	80039e6 <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003a8e:	88ab      	ldrh	r3, [r5, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
 8003a94:	88eb      	ldrh	r3, [r5, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
 8003a9a:	886e      	ldrh	r6, [r5, #2]
 8003a9c:	2e7f      	cmp	r6, #127	; 0x7f
 8003a9e:	d804      	bhi.n	8003aaa <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003aa0:	25a7      	movs	r5, #167	; 0xa7
 8003aa2:	00ad      	lsls	r5, r5, #2
 8003aa4:	5d63      	ldrb	r3, [r4, r5]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d103      	bne.n	8003ab2 <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 8003aaa:	0020      	movs	r0, r4
 8003aac:	f7ff ff4d 	bl	800394a <USBD_CtlError.constprop.0>
        break;
 8003ab0:	e77a      	b.n	80039a8 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8003ab2:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003ab4:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8003ab6:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f000 fb82 	bl	80041c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003abe:	0020      	movs	r0, r4
 8003ac0:	f000 f9a6 	bl	8003e10 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003ac4:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	d100      	bne.n	8003acc <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003aca:	2301      	movs	r3, #1
 8003acc:	5563      	strb	r3, [r4, r5]
 8003ace:	e76b      	b.n	80039a8 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8003ad0:	78a9      	ldrb	r1, [r5, #2]
 8003ad2:	4d3d      	ldr	r5, [pc, #244]	; (8003bc8 <USBD_StdDevReq+0x268>)
 8003ad4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003ad6:	2901      	cmp	r1, #1
 8003ad8:	d8e7      	bhi.n	8003aaa <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8003ada:	23a7      	movs	r3, #167	; 0xa7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	5ce2      	ldrb	r2, [r4, r3]
 8003ae0:	2a02      	cmp	r2, #2
 8003ae2:	d009      	beq.n	8003af8 <USBD_StdDevReq+0x198>
 8003ae4:	2a03      	cmp	r2, #3
 8003ae6:	d015      	beq.n	8003b14 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8003ae8:	0020      	movs	r0, r4
 8003aea:	f7ff ff2e 	bl	800394a <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003aee:	0020      	movs	r0, r4
 8003af0:	7829      	ldrb	r1, [r5, #0]
 8003af2:	f7ff fdf1 	bl	80036d8 <USBD_ClrClassConfig>
        break;
 8003af6:	e757      	b.n	80039a8 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d100      	bne.n	8003afe <USBD_StdDevReq+0x19e>
 8003afc:	e773      	b.n	80039e6 <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8003afe:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b00:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8003b02:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b04:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b06:	0020      	movs	r0, r4
 8003b08:	f7ff fdd8 	bl	80036bc <USBD_SetClassConfig>
 8003b0c:	2802      	cmp	r0, #2
 8003b0e:	d000      	beq.n	8003b12 <USBD_StdDevReq+0x1b2>
 8003b10:	e769      	b.n	80039e6 <USBD_StdDevReq+0x86>
 8003b12:	e7ca      	b.n	8003aaa <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d106      	bne.n	8003b26 <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b18:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8003b1a:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b1c:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8003b1e:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003b20:	f7ff fdda 	bl	80036d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003b24:	e75f      	b.n	80039e6 <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8003b26:	6861      	ldr	r1, [r4, #4]
 8003b28:	2901      	cmp	r1, #1
 8003b2a:	d100      	bne.n	8003b2e <USBD_StdDevReq+0x1ce>
 8003b2c:	e75b      	b.n	80039e6 <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b2e:	b2c9      	uxtb	r1, r1
 8003b30:	0020      	movs	r0, r4
 8003b32:	f7ff fdd1 	bl	80036d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003b36:	7829      	ldrb	r1, [r5, #0]
 8003b38:	6061      	str	r1, [r4, #4]
 8003b3a:	e7e4      	b.n	8003b06 <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8003b3c:	88ea      	ldrh	r2, [r5, #6]
 8003b3e:	2a01      	cmp	r2, #1
 8003b40:	d1b3      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8003b42:	23a7      	movs	r3, #167	; 0xa7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	5ce3      	ldrb	r3, [r4, r3]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d806      	bhi.n	8003b5a <USBD_StdDevReq+0x1fa>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ac      	beq.n	8003aaa <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 8003b50:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003b52:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8003b54:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003b56:	3108      	adds	r1, #8
 8003b58:	e002      	b.n	8003b60 <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003b5a:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d1a4      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003b60:	0020      	movs	r0, r4
 8003b62:	f000 f927 	bl	8003db4 <USBD_CtlSendData>
      break;
 8003b66:	e71f      	b.n	80039a8 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8003b68:	23a7      	movs	r3, #167	; 0xa7
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	5ce3      	ldrb	r3, [r4, r3]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d89a      	bhi.n	8003aaa <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8003b74:	88eb      	ldrh	r3, [r5, #6]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d197      	bne.n	8003aaa <USBD_StdDevReq+0x14a>
      if (pdev->dev_remote_wakeup)
 8003b7a:	23a9      	movs	r3, #169	; 0xa9
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003b80:	2303      	movs	r3, #3
      if (pdev->dev_remote_wakeup)
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d100      	bne.n	8003b88 <USBD_StdDevReq+0x228>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003b86:	3b02      	subs	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003b88:	0021      	movs	r1, r4
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	60e3      	str	r3, [r4, #12]
 8003b8e:	310c      	adds	r1, #12
 8003b90:	e7e6      	b.n	8003b60 <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003b92:	886b      	ldrh	r3, [r5, #2]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d000      	beq.n	8003b9a <USBD_StdDevReq+0x23a>
 8003b98:	e706      	b.n	80039a8 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8003b9a:	22a9      	movs	r2, #169	; 0xa9
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8003ba0:	e721      	b.n	80039e6 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8003ba2:	23a7      	movs	r3, #167	; 0xa7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	5ce3      	ldrb	r3, [r4, r3]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d900      	bls.n	8003bb0 <USBD_StdDevReq+0x250>
 8003bae:	e77c      	b.n	8003aaa <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003bb0:	886b      	ldrh	r3, [r5, #2]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d000      	beq.n	8003bb8 <USBD_StdDevReq+0x258>
 8003bb6:	e6f7      	b.n	80039a8 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8003bb8:	23a9      	movs	r3, #169	; 0xa9
 8003bba:	2200      	movs	r2, #0
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	50e2      	str	r2, [r4, r3]
 8003bc0:	e711      	b.n	80039e6 <USBD_StdDevReq+0x86>
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	0000029e 	.word	0x0000029e
 8003bc8:	20000484 	.word	0x20000484

08003bcc <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003bcc:	2260      	movs	r2, #96	; 0x60
 8003bce:	780b      	ldrb	r3, [r1, #0]
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003bd2:	401a      	ands	r2, r3
{
 8003bd4:	0004      	movs	r4, r0
 8003bd6:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003bd8:	2a40      	cmp	r2, #64	; 0x40
 8003bda:	d001      	beq.n	8003be0 <USBD_StdItfReq+0x14>
 8003bdc:	065b      	lsls	r3, r3, #25
 8003bde:	d419      	bmi.n	8003c14 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8003be0:	23a7      	movs	r3, #167	; 0xa7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	5ce3      	ldrb	r3, [r4, r3]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d813      	bhi.n	8003c14 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003bec:	792b      	ldrb	r3, [r5, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d810      	bhi.n	8003c14 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003bf2:	23ad      	movs	r3, #173	; 0xad
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	58e3      	ldr	r3, [r4, r3]
 8003bf8:	0029      	movs	r1, r5
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	0020      	movs	r0, r4
 8003bfe:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003c00:	88eb      	ldrh	r3, [r5, #6]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <USBD_StdItfReq+0x44>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d102      	bne.n	8003c10 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8003c0a:	0020      	movs	r0, r4
 8003c0c:	f000 f900 	bl	8003e10 <USBD_CtlSendStatus>
}
 8003c10:	2000      	movs	r0, #0
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8003c14:	0020      	movs	r0, r4
 8003c16:	f7ff fe98 	bl	800394a <USBD_CtlError.constprop.0>
          break;
 8003c1a:	e7f9      	b.n	8003c10 <USBD_StdItfReq+0x44>

08003c1c <USBD_StdEPReq>:
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	780a      	ldrb	r2, [r1, #0]
 8003c20:	0004      	movs	r4, r0
 8003c22:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8003c24:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c26:	2160      	movs	r1, #96	; 0x60
 8003c28:	400a      	ands	r2, r1
 8003c2a:	0015      	movs	r5, r2
 8003c2c:	1849      	adds	r1, r1, r1
 8003c2e:	3d20      	subs	r5, #32
 8003c30:	420d      	tst	r5, r1
 8003c32:	d02b      	beq.n	8003c8c <USBD_StdEPReq+0x70>
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d139      	bne.n	8003cac <USBD_StdEPReq+0x90>
      switch (req->bRequest)
 8003c38:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003c3a:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8003c3c:	2a01      	cmp	r2, #1
 8003c3e:	d048      	beq.n	8003cd2 <USBD_StdEPReq+0xb6>
 8003c40:	2a03      	cmp	r2, #3
 8003c42:	d02c      	beq.n	8003c9e <USBD_StdEPReq+0x82>
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d131      	bne.n	8003cac <USBD_StdEPReq+0x90>
          switch (pdev->dev_state)
 8003c48:	23a7      	movs	r3, #167	; 0xa7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	5ce3      	ldrb	r3, [r4, r3]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d059      	beq.n	8003d06 <USBD_StdEPReq+0xea>
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d12a      	bne.n	8003cac <USBD_StdEPReq+0x90>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003c56:	230f      	movs	r3, #15
 8003c58:	2214      	movs	r2, #20
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	4353      	muls	r3, r2
 8003c5e:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8003c60:	0600      	lsls	r0, r0, #24
 8003c62:	d560      	bpl.n	8003d26 <USBD_StdEPReq+0x10a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <USBD_StdEPReq+0x90>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003c6a:	237f      	movs	r3, #127	; 0x7f
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	3301      	adds	r3, #1
 8003c70:	4353      	muls	r3, r2
 8003c72:	18e5      	adds	r5, r4, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003c74:	2000      	movs	r0, #0
 8003c76:	064b      	lsls	r3, r1, #25
 8003c78:	d004      	beq.n	8003c84 <USBD_StdEPReq+0x68>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003c7a:	0020      	movs	r0, r4
 8003c7c:	f000 fa8c 	bl	8004198 <USBD_LL_IsStallEP>
 8003c80:	1e43      	subs	r3, r0, #1
 8003c82:	4198      	sbcs	r0, r3
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003c84:	2202      	movs	r2, #2
 8003c86:	0029      	movs	r1, r5
                pep->status = 0x0000U;
 8003c88:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003c8a:	e048      	b.n	8003d1e <USBD_StdEPReq+0x102>
      pdev->pClass->Setup(pdev, req);
 8003c8c:	22ad      	movs	r2, #173	; 0xad
 8003c8e:	0092      	lsls	r2, r2, #2
 8003c90:	58a2      	ldr	r2, [r4, r2]
 8003c92:	0019      	movs	r1, r3
 8003c94:	0020      	movs	r0, r4
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	4790      	blx	r2
}
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8003c9e:	22a7      	movs	r2, #167	; 0xa7
 8003ca0:	0092      	lsls	r2, r2, #2
 8003ca2:	5ca2      	ldrb	r2, [r4, r2]
 8003ca4:	2a02      	cmp	r2, #2
 8003ca6:	d024      	beq.n	8003cf2 <USBD_StdEPReq+0xd6>
 8003ca8:	2a03      	cmp	r2, #3
 8003caa:	d003      	beq.n	8003cb4 <USBD_StdEPReq+0x98>
              USBD_CtlError(pdev, req);
 8003cac:	0020      	movs	r0, r4
 8003cae:	f7ff fe4c 	bl	800394a <USBD_CtlError.constprop.0>
              break;
 8003cb2:	e7f2      	b.n	8003c9a <USBD_StdEPReq+0x7e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003cb4:	885a      	ldrh	r2, [r3, #2]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d107      	bne.n	8003cca <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) &&
 8003cba:	064a      	lsls	r2, r1, #25
 8003cbc:	d005      	beq.n	8003cca <USBD_StdEPReq+0xae>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003cbe:	88db      	ldrh	r3, [r3, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <USBD_StdEPReq+0xae>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003cc4:	0020      	movs	r0, r4
 8003cc6:	f000 fa55 	bl	8004174 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003cca:	0020      	movs	r0, r4
 8003ccc:	f000 f8a0 	bl	8003e10 <USBD_CtlSendStatus>
              break;
 8003cd0:	e7e3      	b.n	8003c9a <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 8003cd2:	22a7      	movs	r2, #167	; 0xa7
 8003cd4:	0092      	lsls	r2, r2, #2
 8003cd6:	5ca2      	ldrb	r2, [r4, r2]
 8003cd8:	2a02      	cmp	r2, #2
 8003cda:	d00a      	beq.n	8003cf2 <USBD_StdEPReq+0xd6>
 8003cdc:	2a03      	cmp	r2, #3
 8003cde:	d1e5      	bne.n	8003cac <USBD_StdEPReq+0x90>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ce0:	885b      	ldrh	r3, [r3, #2]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1d9      	bne.n	8003c9a <USBD_StdEPReq+0x7e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003ce6:	064b      	lsls	r3, r1, #25
 8003ce8:	d0ef      	beq.n	8003cca <USBD_StdEPReq+0xae>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003cea:	0020      	movs	r0, r4
 8003cec:	f000 fa4b 	bl	8004186 <USBD_LL_ClearStallEP>
 8003cf0:	e7eb      	b.n	8003cca <USBD_StdEPReq+0xae>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003cf2:	064b      	lsls	r3, r1, #25
 8003cf4:	d0da      	beq.n	8003cac <USBD_StdEPReq+0x90>
                USBD_LL_StallEP(pdev, ep_addr);
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	f000 fa3c 	bl	8004174 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003cfc:	2180      	movs	r1, #128	; 0x80
 8003cfe:	0020      	movs	r0, r4
 8003d00:	f000 fa38 	bl	8004174 <USBD_LL_StallEP>
 8003d04:	e7c9      	b.n	8003c9a <USBD_StdEPReq+0x7e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003d06:	0649      	lsls	r1, r1, #25
 8003d08:	d1d0      	bne.n	8003cac <USBD_StdEPReq+0x90>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003d0a:	0021      	movs	r1, r4
 8003d0c:	3155      	adds	r1, #85	; 0x55
 8003d0e:	31ff      	adds	r1, #255	; 0xff
 8003d10:	0600      	lsls	r0, r0, #24
 8003d12:	d501      	bpl.n	8003d18 <USBD_StdEPReq+0xfc>
 8003d14:	3941      	subs	r1, #65	; 0x41
 8003d16:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8003d18:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d1a:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8003d1c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003d1e:	0020      	movs	r0, r4
 8003d20:	f000 f848 	bl	8003db4 <USBD_CtlSendData>
              break;
 8003d24:	e7b9      	b.n	8003c9a <USBD_StdEPReq+0x7e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003d26:	33fc      	adds	r3, #252	; 0xfc
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0be      	beq.n	8003cac <USBD_StdEPReq+0x90>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003d2e:	237f      	movs	r3, #127	; 0x7f
 8003d30:	400b      	ands	r3, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003d32:	435a      	muls	r2, r3
 8003d34:	3255      	adds	r2, #85	; 0x55
 8003d36:	32ff      	adds	r2, #255	; 0xff
 8003d38:	18a5      	adds	r5, r4, r2
 8003d3a:	e79b      	b.n	8003c74 <USBD_StdEPReq+0x58>

08003d3c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003d3c:	780b      	ldrb	r3, [r1, #0]
 8003d3e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003d40:	784b      	ldrb	r3, [r1, #1]
 8003d42:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003d44:	78ca      	ldrb	r2, [r1, #3]
 8003d46:	788b      	ldrb	r3, [r1, #2]
 8003d48:	0212      	lsls	r2, r2, #8
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003d4e:	794a      	ldrb	r2, [r1, #5]
 8003d50:	790b      	ldrb	r3, [r1, #4]
 8003d52:	0212      	lsls	r2, r2, #8
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003d58:	79ca      	ldrb	r2, [r1, #7]
 8003d5a:	798b      	ldrb	r3, [r1, #6]
 8003d5c:	0212      	lsls	r2, r2, #8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	80c3      	strh	r3, [r0, #6]
}
 8003d62:	4770      	bx	lr

08003d64 <USBD_CtlError>:
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	f000 fa03 	bl	8004174 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	0020      	movs	r0, r4
 8003d72:	f000 f9ff 	bl	8004174 <USBD_LL_StallEP>
}
 8003d76:	bd10      	pop	{r4, pc}

08003d78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	2500      	movs	r5, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003d7c:	1e46      	subs	r6, r0, #1
  if (desc != NULL)
 8003d7e:	42a8      	cmp	r0, r5
 8003d80:	d00f      	beq.n	8003da2 <USBD_GetString+0x2a>
  while (*buf != '\0')
 8003d82:	002b      	movs	r3, r5
 8003d84:	3501      	adds	r5, #1
 8003d86:	5d74      	ldrb	r4, [r6, r5]
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d1fa      	bne.n	8003d82 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003d94:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003d96:	2303      	movs	r3, #3
 8003d98:	704b      	strb	r3, [r1, #1]
 8003d9a:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8003d9c:	7805      	ldrb	r5, [r0, #0]
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	d100      	bne.n	8003da4 <USBD_GetString+0x2c>
}
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	54cd      	strb	r5, [r1, r3]
 8003da8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003daa:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8003dac:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	548c      	strb	r4, [r1, r2]
 8003db2:	e7f3      	b.n	8003d9c <USBD_GetString+0x24>

08003db4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003db4:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003db6:	22a5      	movs	r2, #165	; 0xa5
{
 8003db8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003dba:	2402      	movs	r4, #2
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dc0:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8003dc2:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dc4:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8003dc6:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dc8:	f000 fa04 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003dcc:	2000      	movs	r0, #0
 8003dce:	bd10      	pop	{r4, pc}

08003dd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003dd4:	000a      	movs	r2, r1
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f000 f9fc 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003ddc:	2000      	movs	r0, #0
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003de0:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003de2:	22a5      	movs	r2, #165	; 0xa5
{
 8003de4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003de6:	2403      	movs	r4, #3
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8003dec:	0002      	movs	r2, r0
 8003dee:	32fc      	adds	r2, #252	; 0xfc
 8003df0:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8003df2:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003df4:	000a      	movs	r2, r1
 8003df6:	2100      	movs	r1, #0
 8003df8:	f000 f9f5 	bl	80041e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	bd10      	pop	{r4, pc}

08003e00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003e00:	b510      	push	{r4, lr}
 8003e02:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003e04:	000a      	movs	r2, r1
 8003e06:	2100      	movs	r1, #0
 8003e08:	f000 f9ed 	bl	80041e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003e10:	23a5      	movs	r3, #165	; 0xa5
 8003e12:	2204      	movs	r2, #4
 8003e14:	009b      	lsls	r3, r3, #2
{
 8003e16:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003e18:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	0019      	movs	r1, r3
 8003e20:	f000 f9d8 	bl	80041d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003e24:	2000      	movs	r0, #0
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003e28:	23a5      	movs	r3, #165	; 0xa5
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	009b      	lsls	r3, r3, #2
{
 8003e2e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003e30:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003e32:	2300      	movs	r3, #0
 8003e34:	001a      	movs	r2, r3
 8003e36:	0019      	movs	r1, r3
 8003e38:	f000 f9d5 	bl	80041e6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003e40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003e42:	4c11      	ldr	r4, [pc, #68]	; (8003e88 <MX_USB_DEVICE_Init+0x48>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	0020      	movs	r0, r4
 8003e48:	4910      	ldr	r1, [pc, #64]	; (8003e8c <MX_USB_DEVICE_Init+0x4c>)
 8003e4a:	f7ff fc0f 	bl	800366c <USBD_Init>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d001      	beq.n	8003e56 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8003e52:	f7fc fc7d 	bl	8000750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8003e56:	0020      	movs	r0, r4
 8003e58:	490d      	ldr	r1, [pc, #52]	; (8003e90 <MX_USB_DEVICE_Init+0x50>)
 8003e5a:	f7ff fc21 	bl	80036a0 <USBD_RegisterClass>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d001      	beq.n	8003e66 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8003e62:	f7fc fc75 	bl	8000750 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8003e66:	0020      	movs	r0, r4
 8003e68:	490a      	ldr	r1, [pc, #40]	; (8003e94 <MX_USB_DEVICE_Init+0x54>)
 8003e6a:	f7ff fbf6 	bl	800365a <USBD_CUSTOM_HID_RegisterInterface>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d001      	beq.n	8003e76 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8003e72:	f7fc fc6d 	bl	8000750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003e76:	0020      	movs	r0, r4
 8003e78:	f7ff fc1b 	bl	80036b2 <USBD_Start>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8003e80:	f7fc fc66 	bl	8000750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000488 	.word	0x20000488
 8003e8c:	200001c0 	.word	0x200001c0
 8003e90:	20000090 	.word	0x20000090
 8003e94:	200001b0 	.word	0x200001b0

08003e98 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4770      	bx	lr

08003e9c <CUSTOM_HID_OutEvent_FS>:
	 * By judging conditions,
	 * Aiming to eliminating loop operations:
	 * for(int i = 0; i < USBD_CUSTOMHID_INREPORT_BUF_SIZE; i++)
	 *     recv_buffer[i] = hhid->Report_buf[i];
	 */
	if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8003e9c:	22ae      	movs	r2, #174	; 0xae
	hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <CUSTOM_HID_OutEvent_FS+0x1c>)
	if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8003ea0:	0092      	lsls	r2, r2, #2
 8003ea2:	589b      	ldr	r3, [r3, r2]
 8003ea4:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <CUSTOM_HID_OutEvent_FS+0x20>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	7013      	strb	r3, [r2, #0]
 8003eaa:	079b      	lsls	r3, r3, #30
 8003eac:	d402      	bmi.n	8003eb4 <CUSTOM_HID_OutEvent_FS+0x18>
		InterruptFlag = 1;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <CUSTOM_HID_OutEvent_FS+0x24>)
 8003eb2:	601a      	str	r2, [r3, #0]
	}
	return (USBD_OK);
  /* USER CODE END 6 */
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	4770      	bx	lr
 8003eb8:	20000488 	.word	0x20000488
 8003ebc:	2000033c 	.word	0x2000033c
 8003ec0:	20000330 	.word	0x20000330

08003ec4 <CUSTOM_HID_DeInit_FS>:
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	4770      	bx	lr

08003ec8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ec8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8003eca:	4801      	ldr	r0, [pc, #4]	; (8003ed0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ecc:	800b      	strh	r3, [r1, #0]
}
 8003ece:	4770      	bx	lr
 8003ed0:	200001dc 	.word	0x200001dc

08003ed4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003ed4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8003ed6:	4801      	ldr	r0, [pc, #4]	; (8003edc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003ed8:	800b      	strh	r3, [r1, #0]
}
 8003eda:	4770      	bx	lr
 8003edc:	200001f0 	.word	0x200001f0

08003ee0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003ee0:	2300      	movs	r3, #0
{
 8003ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003ee4:	001f      	movs	r7, r3
    if (((value >> 28)) < 0xA)
 8003ee6:	0f06      	lsrs	r6, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ee8:	b2f5      	uxtb	r5, r6
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003eea:	002c      	movs	r4, r5
 8003eec:	3437      	adds	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8003eee:	2e09      	cmp	r6, #9
 8003ef0:	d800      	bhi.n	8003ef4 <IntToUnicode+0x14>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ef2:	3c07      	subs	r4, #7
  for (idx = 0; idx < len; idx++)
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ef8:	700c      	strb	r4, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003efa:	704f      	strb	r7, [r1, #1]
    value = value << 4;
 8003efc:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8003efe:	3102      	adds	r1, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1f0      	bne.n	8003ee6 <IntToUnicode+0x6>
  }
}
 8003f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f08 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003f08:	231a      	movs	r3, #26
{
 8003f0a:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003f0c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <USBD_FS_SerialStrDescriptor+0x34>)
 8003f10:	4c0b      	ldr	r4, [pc, #44]	; (8003f40 <USBD_FS_SerialStrDescriptor+0x38>)
 8003f12:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d00b      	beq.n	8003f36 <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003f20:	2208      	movs	r2, #8
 8003f22:	1ca1      	adds	r1, r4, #2
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003f24:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003f26:	f7ff ffdb 	bl	8003ee0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003f2a:	0021      	movs	r1, r4
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	0028      	movs	r0, r5
 8003f30:	3112      	adds	r1, #18
 8003f32:	f7ff ffd5 	bl	8003ee0 <IntToUnicode>
}
 8003f36:	0020      	movs	r0, r4
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	1ffff7ac 	.word	0x1ffff7ac
 8003f40:	200001f4 	.word	0x200001f4
 8003f44:	1ffff7b4 	.word	0x1ffff7b4
 8003f48:	1ffff7b0 	.word	0x1ffff7b0

08003f4c <USBD_FS_ManufacturerStrDescriptor>:
{
 8003f4c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003f4e:	4c04      	ldr	r4, [pc, #16]	; (8003f60 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003f50:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003f52:	0021      	movs	r1, r4
 8003f54:	4803      	ldr	r0, [pc, #12]	; (8003f64 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003f56:	f7ff ff0f 	bl	8003d78 <USBD_GetString>
}
 8003f5a:	0020      	movs	r0, r4
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	2000074c 	.word	0x2000074c
 8003f64:	0800430d 	.word	0x0800430d

08003f68 <USBD_FS_ProductStrDescriptor>:
{
 8003f68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003f6a:	4c04      	ldr	r4, [pc, #16]	; (8003f7c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003f6c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003f6e:	0021      	movs	r1, r4
 8003f70:	4803      	ldr	r0, [pc, #12]	; (8003f80 <USBD_FS_ProductStrDescriptor+0x18>)
 8003f72:	f7ff ff01 	bl	8003d78 <USBD_GetString>
}
 8003f76:	0020      	movs	r0, r4
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	2000074c 	.word	0x2000074c
 8003f80:	08004311 	.word	0x08004311

08003f84 <USBD_FS_ConfigStrDescriptor>:
{
 8003f84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f86:	4c04      	ldr	r4, [pc, #16]	; (8003f98 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003f88:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003f8a:	0021      	movs	r1, r4
 8003f8c:	4803      	ldr	r0, [pc, #12]	; (8003f9c <USBD_FS_ConfigStrDescriptor+0x18>)
 8003f8e:	f7ff fef3 	bl	8003d78 <USBD_GetString>
}
 8003f92:	0020      	movs	r0, r4
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	2000074c 	.word	0x2000074c
 8003f9c:	0800432e 	.word	0x0800432e

08003fa0 <USBD_FS_InterfaceStrDescriptor>:
{
 8003fa0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003fa2:	4c04      	ldr	r4, [pc, #16]	; (8003fb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003fa4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003fa6:	0021      	movs	r1, r4
 8003fa8:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003faa:	f7ff fee5 	bl	8003d78 <USBD_GetString>
}
 8003fae:	0020      	movs	r0, r4
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	2000074c 	.word	0x2000074c
 8003fb8:	08004340 	.word	0x08004340

08003fbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d801      	bhi.n	8003fc8 <USBD_Get_USB_Status+0xc>
 8003fc4:	4a01      	ldr	r2, [pc, #4]	; (8003fcc <USBD_Get_USB_Status+0x10>)
 8003fc6:	5cd0      	ldrb	r0, [r2, r3]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003fc8:	4770      	bx	lr
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	08004355 	.word	0x08004355

08003fd0 <HAL_PCD_MspInit>:
{
 8003fd0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_PCD_MspInit+0x30>)
 8003fd4:	6802      	ldr	r2, [r0, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d111      	bne.n	8003ffe <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_PCD_MspInit+0x34>)
 8003fde:	0409      	lsls	r1, r1, #16
 8003fe0:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003fe2:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003fe8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	400b      	ands	r3, r1
 8003fee:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003ff0:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003ff2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003ff4:	f7fc fd78 	bl	8000ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003ff8:	201f      	movs	r0, #31
 8003ffa:	f7fc fd9f 	bl	8000b3c <HAL_NVIC_EnableIRQ>
}
 8003ffe:	bd07      	pop	{r0, r1, r2, pc}
 8004000:	40005c00 	.word	0x40005c00
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004008:	23ac      	movs	r3, #172	; 0xac
{
 800400a:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	18c1      	adds	r1, r0, r3
 8004010:	3340      	adds	r3, #64	; 0x40
 8004012:	58c0      	ldr	r0, [r0, r3]
 8004014:	f7ff fb68 	bl	80036e8 <USBD_LL_SetupStage>
}
 8004018:	bd10      	pop	{r4, pc}

0800401a <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800401a:	2328      	movs	r3, #40	; 0x28
 800401c:	434b      	muls	r3, r1
 800401e:	18c3      	adds	r3, r0, r3
 8004020:	337d      	adds	r3, #125	; 0x7d
 8004022:	33ff      	adds	r3, #255	; 0xff
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	23bc      	movs	r3, #188	; 0xbc
{
 8004028:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	58c0      	ldr	r0, [r0, r3]
 800402e:	f7ff fb8d 	bl	800374c <USBD_LL_DataOutStage>
}
 8004032:	bd10      	pop	{r4, pc}

08004034 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004034:	2328      	movs	r3, #40	; 0x28
 8004036:	434b      	muls	r3, r1
 8004038:	18c3      	adds	r3, r0, r3
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	23bc      	movs	r3, #188	; 0xbc
{
 800403e:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	58c0      	ldr	r0, [r0, r3]
 8004044:	f7ff fbc8 	bl	80037d8 <USBD_LL_DataInStage>
}
 8004048:	bd10      	pop	{r4, pc}

0800404a <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800404a:	23bc      	movs	r3, #188	; 0xbc
{
 800404c:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	58c0      	ldr	r0, [r0, r3]
 8004052:	f7ff fc6b 	bl	800392c <USBD_LL_SOF>
}
 8004056:	bd10      	pop	{r4, pc}

08004058 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004058:	6883      	ldr	r3, [r0, #8]
{
 800405a:	b570      	push	{r4, r5, r6, lr}
 800405c:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800405e:	2b02      	cmp	r3, #2
 8004060:	d001      	beq.n	8004066 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8004062:	f7fc fb75 	bl	8000750 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004066:	25bc      	movs	r5, #188	; 0xbc
 8004068:	00ad      	lsls	r5, r5, #2
 800406a:	2101      	movs	r1, #1
 800406c:	5960      	ldr	r0, [r4, r5]
 800406e:	f7ff fc42 	bl	80038f6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004072:	5960      	ldr	r0, [r4, r5]
 8004074:	f7ff fc15 	bl	80038a2 <USBD_LL_Reset>
}
 8004078:	bd70      	pop	{r4, r5, r6, pc}
	...

0800407c <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800407c:	23bc      	movs	r3, #188	; 0xbc
{
 800407e:	b510      	push	{r4, lr}
 8004080:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	58c0      	ldr	r0, [r0, r3]
 8004086:	f7ff fc39 	bl	80038fc <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800408a:	69a3      	ldr	r3, [r4, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004090:	2306      	movs	r3, #6
 8004092:	4a02      	ldr	r2, [pc, #8]	; (800409c <HAL_PCD_SuspendCallback+0x20>)
 8004094:	6911      	ldr	r1, [r2, #16]
 8004096:	430b      	orrs	r3, r1
 8004098:	6113      	str	r3, [r2, #16]
}
 800409a:	bd10      	pop	{r4, pc}
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <HAL_PCD_ResumeCallback>:
  if (hpcd->Init.low_power_enable)
 80040a0:	6983      	ldr	r3, [r0, #24]
{
 80040a2:	b510      	push	{r4, lr}
 80040a4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80040aa:	2106      	movs	r1, #6
 80040ac:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <HAL_PCD_ResumeCallback+0x24>)
 80040ae:	6913      	ldr	r3, [r2, #16]
 80040b0:	438b      	bics	r3, r1
 80040b2:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80040b4:	f7fc fa02 	bl	80004bc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80040b8:	23bc      	movs	r3, #188	; 0xbc
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	58e0      	ldr	r0, [r4, r3]
 80040be:	f7ff fc29 	bl	8003914 <USBD_LL_Resume>
}
 80040c2:	bd10      	pop	{r4, pc}
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80040c8:	23bc      	movs	r3, #188	; 0xbc
{
 80040ca:	b570      	push	{r4, r5, r6, lr}
 80040cc:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80040ce:	4818      	ldr	r0, [pc, #96]	; (8004130 <USBD_LL_Init+0x68>)
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <USBD_LL_Init+0x6c>)
  pdev->pData = &hpcd_USB_FS;
 80040d6:	25b0      	movs	r5, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 80040d8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80040da:	2308      	movs	r3, #8
 80040dc:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80040de:	3b06      	subs	r3, #6
 80040e0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80040e2:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80040e4:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80040e6:	00ad      	lsls	r5, r5, #2
 80040e8:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80040ea:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80040ec:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80040ee:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80040f0:	f7fc fe02 	bl	8000cf8 <HAL_PCD_Init>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d001      	beq.n	80040fc <USBD_LL_Init+0x34>
    Error_Handler( );
 80040f8:	f7fc fb2a 	bl	8000750 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80040fc:	2200      	movs	r2, #0
 80040fe:	5960      	ldr	r0, [r4, r5]
 8004100:	0011      	movs	r1, r2
 8004102:	2318      	movs	r3, #24
 8004104:	f7fd fc5a 	bl	80019bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004108:	5960      	ldr	r0, [r4, r5]
 800410a:	2358      	movs	r3, #88	; 0x58
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	f7fd fc54 	bl	80019bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8004114:	5960      	ldr	r0, [r4, r5]
 8004116:	2398      	movs	r3, #152	; 0x98
 8004118:	2200      	movs	r2, #0
 800411a:	2181      	movs	r1, #129	; 0x81
 800411c:	f7fd fc4e 	bl	80019bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8004120:	5960      	ldr	r0, [r4, r5]
 8004122:	23d8      	movs	r3, #216	; 0xd8
 8004124:	2200      	movs	r2, #0
 8004126:	2101      	movs	r1, #1
 8004128:	f7fd fc48 	bl	80019bc <HAL_PCDEx_PMAConfig>
}
 800412c:	2000      	movs	r0, #0
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	2000094c 	.word	0x2000094c
 8004134:	40005c00 	.word	0x40005c00

08004138 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8004138:	23b0      	movs	r3, #176	; 0xb0
{
 800413a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	58c0      	ldr	r0, [r0, r3]
 8004140:	f7fc fe44 	bl	8000dcc <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004144:	f7ff ff3a 	bl	8003fbc <USBD_Get_USB_Status>
}
 8004148:	bd10      	pop	{r4, pc}

0800414a <USBD_LL_OpenEP>:
{
 800414a:	b510      	push	{r4, lr}
 800414c:	0014      	movs	r4, r2
 800414e:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004150:	0023      	movs	r3, r4
 8004152:	24b0      	movs	r4, #176	; 0xb0
 8004154:	00a4      	lsls	r4, r4, #2
 8004156:	5900      	ldr	r0, [r0, r4]
 8004158:	f7fd fb32 	bl	80017c0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800415c:	f7ff ff2e 	bl	8003fbc <USBD_Get_USB_Status>
}
 8004160:	bd10      	pop	{r4, pc}

08004162 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004162:	23b0      	movs	r3, #176	; 0xb0
{
 8004164:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	58c0      	ldr	r0, [r0, r3]
 800416a:	f7fd fb56 	bl	800181a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800416e:	f7ff ff25 	bl	8003fbc <USBD_Get_USB_Status>
}
 8004172:	bd10      	pop	{r4, pc}

08004174 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004174:	23b0      	movs	r3, #176	; 0xb0
{
 8004176:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	58c0      	ldr	r0, [r0, r3]
 800417c:	f7fd fbc4 	bl	8001908 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004180:	f7ff ff1c 	bl	8003fbc <USBD_Get_USB_Status>
}
 8004184:	bd10      	pop	{r4, pc}

08004186 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004186:	23b0      	movs	r3, #176	; 0xb0
{
 8004188:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	58c0      	ldr	r0, [r0, r3]
 800418e:	f7fd fbe7 	bl	8001960 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004192:	f7ff ff13 	bl	8003fbc <USBD_Get_USB_Status>
}
 8004196:	bd10      	pop	{r4, pc}

08004198 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004198:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 800419a:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	da07      	bge.n	80041b4 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80041a4:	227f      	movs	r2, #127	; 0x7f
 80041a6:	4011      	ands	r1, r2
 80041a8:	3101      	adds	r1, #1
 80041aa:	3a57      	subs	r2, #87	; 0x57
 80041ac:	434a      	muls	r2, r1
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	7898      	ldrb	r0, [r3, #2]
}
 80041b2:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80041b4:	2228      	movs	r2, #40	; 0x28
 80041b6:	434a      	muls	r2, r1
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	336b      	adds	r3, #107	; 0x6b
 80041bc:	33ff      	adds	r3, #255	; 0xff
 80041be:	7818      	ldrb	r0, [r3, #0]
 80041c0:	e7f7      	b.n	80041b2 <USBD_LL_IsStallEP+0x1a>

080041c2 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80041c2:	23b0      	movs	r3, #176	; 0xb0
{
 80041c4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	58c0      	ldr	r0, [r0, r3]
 80041ca:	f7fc fe12 	bl	8000df2 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041ce:	f7ff fef5 	bl	8003fbc <USBD_Get_USB_Status>
}
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <USBD_LL_Transmit>:
{
 80041d4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80041d6:	24b0      	movs	r4, #176	; 0xb0
 80041d8:	00a4      	lsls	r4, r4, #2
 80041da:	5900      	ldr	r0, [r0, r4]
 80041dc:	f7fd fb66 	bl	80018ac <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041e0:	f7ff feec 	bl	8003fbc <USBD_Get_USB_Status>
}
 80041e4:	bd10      	pop	{r4, pc}

080041e6 <USBD_LL_PrepareReceive>:
{
 80041e6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80041e8:	24b0      	movs	r4, #176	; 0xb0
 80041ea:	00a4      	lsls	r4, r4, #2
 80041ec:	5900      	ldr	r0, [r0, r4]
 80041ee:	f7fd fb3b 	bl	8001868 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80041f2:	f7ff fee3 	bl	8003fbc <USBD_Get_USB_Status>
}
 80041f6:	bd10      	pop	{r4, pc}

080041f8 <USBD_static_malloc>:
  return mem;
 80041f8:	4800      	ldr	r0, [pc, #0]	; (80041fc <USBD_static_malloc+0x4>)
}
 80041fa:	4770      	bx	lr
 80041fc:	20000c40 	.word	0x20000c40

08004200 <USBD_static_free>:
}
 8004200:	4770      	bx	lr

08004202 <memset>:
 8004202:	0003      	movs	r3, r0
 8004204:	1882      	adds	r2, r0, r2
 8004206:	4293      	cmp	r3, r2
 8004208:	d100      	bne.n	800420c <memset+0xa>
 800420a:	4770      	bx	lr
 800420c:	7019      	strb	r1, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	e7f9      	b.n	8004206 <memset+0x4>
	...

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	2600      	movs	r6, #0
 8004218:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x38>)
 800421a:	4d0d      	ldr	r5, [pc, #52]	; (8004250 <__libc_init_array+0x3c>)
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	2600      	movs	r6, #0
 8004226:	f000 f821 	bl	800426c <_init>
 800422a:	4c0a      	ldr	r4, [pc, #40]	; (8004254 <__libc_init_array+0x40>)
 800422c:	4d0a      	ldr	r5, [pc, #40]	; (8004258 <__libc_init_array+0x44>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	00b3      	lsls	r3, r6, #2
 800423a:	58eb      	ldr	r3, [r5, r3]
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	00b3      	lsls	r3, r6, #2
 8004244:	58eb      	ldr	r3, [r5, r3]
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	0800435c 	.word	0x0800435c
 8004250:	0800435c 	.word	0x0800435c
 8004254:	08004360 	.word	0x08004360
 8004258:	0800435c 	.word	0x0800435c

0800425c <strcpy>:
 800425c:	0003      	movs	r3, r0
 800425e:	780a      	ldrb	r2, [r1, #0]
 8004260:	3101      	adds	r1, #1
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	2a00      	cmp	r2, #0
 8004268:	d1f9      	bne.n	800425e <strcpy+0x2>
 800426a:	4770      	bx	lr

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
